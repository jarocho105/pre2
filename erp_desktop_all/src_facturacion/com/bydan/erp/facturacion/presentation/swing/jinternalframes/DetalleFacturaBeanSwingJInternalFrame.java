/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.DetalleFacturaConstantesFunciones;
import com.bydan.erp.facturacion.util.DetalleFacturaParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.DetalleFacturaParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.DetalleFacturaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleFacturaBeanSwingJInternalFrame extends DetalleFacturaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleFacturaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleFactura> detallefacturaValidator = new ClassValidator<DetalleFactura>(DetalleFactura.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleFactura detallefactura;	
	public DetalleFactura detallefacturaAux;
	public DetalleFactura detallefacturaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleFactura detallefacturaTotales;
	public Long idDetalleFacturaActual;
	public Long iIdNuevoDetalleFactura=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleFactura;
	public Boolean isPermisoNuevoDetalleFactura;
	public Boolean isPermisoActualizarDetalleFactura;
	public Boolean isPermisoActualizarOriginalDetalleFactura;
	public Boolean isPermisoEliminarDetalleFactura;
	public Boolean isPermisoGuardarCambiosDetalleFactura;
	public Boolean isPermisoConsultaDetalleFactura;
	public Boolean isPermisoBusquedaDetalleFactura;
	public Boolean isPermisoReporteDetalleFactura;
	public Boolean isPermisoPaginacionMedioDetalleFactura;
	public Boolean isPermisoPaginacionAltoDetalleFactura;
	public Boolean isPermisoPaginacionTodoDetalleFactura;
	public Boolean isPermisoCopiarDetalleFactura;
	public Boolean isPermisoVerFormDetalleFactura;
	public Boolean isPermisoDuplicarDetalleFactura;
	public Boolean isPermisoOrdenDetalleFactura;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleFacturaParameterReturnGeneral detallefacturaReturnGeneral;
	public DetalleFacturaParameterReturnGeneral detallefacturaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleFactura=false;
	public Boolean esParaAccionDesdeFormularioDetalleFactura=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleFacturaSessionBeanAdditional detallefacturaSessionBeanAdditional=null;
	
	public DetalleFacturaSessionBeanAdditional getDetalleFacturaSessionBeanAdditional() {
		return this.detallefacturaSessionBeanAdditional;
	}
	
	public void setDetalleFacturaSessionBeanAdditional(DetalleFacturaSessionBeanAdditional detallefacturaSessionBeanAdditional) {
		try {
			this.detallefacturaSessionBeanAdditional=detallefacturaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleFacturaBeanSwingJInternalFrameAdditional detallefacturaBeanSwingJInternalFrameAdditional=null;
	//public class DetalleFacturaBeanSwingJInternalFrame
	
	public DetalleFacturaBeanSwingJInternalFrameAdditional getDetalleFacturaBeanSwingJInternalFrameAdditional() {
		return this.detallefacturaBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleFacturaBeanSwingJInternalFrameAdditional(DetalleFacturaBeanSwingJInternalFrameAdditional detallefacturaBeanSwingJInternalFrameAdditional) {
		try {
			this.detallefacturaBeanSwingJInternalFrameAdditional=detallefacturaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleFacturaLogic detallefacturaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleFactura detallefacturaBean;
	public DetalleFacturaConstantesFunciones detallefacturaConstantesFunciones;
	//public DetalleFacturaParameterReturnGeneral detallefacturaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public FacturaLogic facturaLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public CentroCostoLogic centrocostoLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleFactura> detallefacturas;	
	//public List<DetalleFactura> detallefacturasEliminados;
	//public List<DetalleFactura> detallefacturasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleFactura=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleFactura=true;
	public Boolean isVisibilidadCeldaCopiarDetalleFactura=true;
	public Boolean isVisibilidadCeldaVerFormDetalleFactura=true;
	public Boolean isVisibilidadCeldaOrdenDetalleFactura=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
	public Boolean isVisibilidadCeldaModificarDetalleFactura=false;
	public Boolean isVisibilidadCeldaActualizarDetalleFactura=false;
	public Boolean isVisibilidadCeldaEliminarDetalleFactura=false;
	public Boolean isVisibilidadCeldaCancelarDetalleFactura=false;
	public Boolean isVisibilidadCeldaGuardarDetalleFactura=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleFactura=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleFactura() {
		return this.iIdNuevoDetalleFactura;
	}

	public void setiIdNuevoDetalleFactura(Long iIdNuevoDetalleFactura) {
		this.iIdNuevoDetalleFactura = iIdNuevoDetalleFactura;
	}
	
	public Long getidDetalleFacturaActual() {
		return this.idDetalleFacturaActual;
	}

	public void setidDetalleFacturaActual(Long idDetalleFacturaActual) {
		this.idDetalleFacturaActual = idDetalleFacturaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleFactura getdetallefactura() {
		return this.detallefactura;
	}

	public void setdetallefactura(DetalleFactura detallefactura) {
		this.detallefactura = detallefactura;
	}
	
	public DetalleFactura getdetallefacturaAux() {
		return this.detallefacturaAux;
	}

	public void setdetallefacturaAux(DetalleFactura detallefacturaAux) {
		this.detallefacturaAux = detallefacturaAux;
	}				
	
	public DetalleFactura getdetallefacturaAnterior() {
		return this.detallefacturaAnterior;
	}

	public void setdetallefacturaAnterior(DetalleFactura detallefacturaAnterior) {
		this.detallefacturaAnterior = detallefacturaAnterior;
	}	
	
	public DetalleFactura getdetallefacturaTotales() {
		return this.detallefacturaTotales;
	}

	public void setdetallefacturaTotales(DetalleFactura detallefacturaTotales) {
		this.detallefacturaTotales = detallefacturaTotales;
	}	
	
	public DetalleFactura getdetallefacturaBean() {
		return this.detallefacturaBean;
	}

	public void setdetallefacturaBean(DetalleFactura detallefacturaBean) {
		this.detallefacturaBean = detallefacturaBean;
	}	
	
	public DetalleFacturaParameterReturnGeneral getdetallefacturaReturnGeneral() {
		return this.detallefacturaReturnGeneral;
	}

	public void setdetallefacturaReturnGeneral(DetalleFacturaParameterReturnGeneral detallefacturaReturnGeneral) {
		this.detallefacturaReturnGeneral = detallefacturaReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleFacturaLogic getDetalleFacturaLogic()	{		
		return detallefacturaLogic;
	}

	public void setDetalleFacturaLogic(DetalleFacturaLogic detallefacturaLogic) {
		this.detallefacturaLogic = detallefacturaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleFactura() {
		return isEsNuevoDetalleFactura;
	}

	public void setIsEsNuevoDetalleFactura(Boolean isEsNuevoDetalleFactura) {
		this.isEsNuevoDetalleFactura = isEsNuevoDetalleFactura;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleFactura() {
		return esParaAccionDesdeFormularioDetalleFactura;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleFactura(Boolean esParaAccionDesdeFormularioDetalleFactura) {
		this.esParaAccionDesdeFormularioDetalleFactura = esParaAccionDesdeFormularioDetalleFactura;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallefacturaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallefacturaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detallefacturaSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detallefacturaSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detallefacturaSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detallefacturaSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(detallefacturaSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallefacturaSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallefacturaSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallefacturaSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detallefacturaSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleFactura.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleFacturaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleFacturaGenerico!=null && jComboBoxid_empresaDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleFactura.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleFacturaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleFacturaGenerico!=null && jComboBoxid_sucursalDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleFactura.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleFacturaGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleFacturaGenerico!=null && jComboBoxid_ejercicioDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleFactura.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleFacturaGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleFacturaGenerico!=null && jComboBoxid_periodoDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleFactura.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleFacturaGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleFacturaGenerico!=null && jComboBoxid_anioDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleFactura.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleFacturaGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleFacturaGenerico!=null && jComboBoxid_mesDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaDetalleFactura.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaDetalleFactura!=null) {
						jComboBoxid_facturaFK_IdFacturaDetalleFactura.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaDetalleFactura!=null) {
							//jComboBoxid_facturaFK_IdFacturaDetalleFactura.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaDetalleFactura.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaDetalleFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaDetalleFacturaGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaDetalleFacturaGenerico!=null && jComboBoxid_facturaDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_facturaDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleFactura.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleFactura!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleFactura.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleFactura!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleFactura.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleFactura.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleFacturaGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleFacturaGenerico!=null && jComboBoxid_bodegaDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleFactura.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleFactura!=null) {
						jComboBoxid_productoFK_IdProductoDetalleFactura.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleFactura!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleFactura.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleFactura.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleFacturaGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleFacturaGenerico!=null && jComboBoxid_productoDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleFactura.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleFactura!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleFactura.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleFactura!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleFactura.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleFactura.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleFacturaGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleFacturaGenerico!=null && jComboBoxid_unidadDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detallefactura!=null) {
						this.detallefactura.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleFactura.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleFacturaGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleFacturaGenerico!=null && jComboBoxid_centro_costoDetalleFacturaGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_empresaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleFacturaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleFacturaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallefactura.setid_empresa(empresaAux.getId());
				detallefactura.setempresa_descripcion(DetalleFacturaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallefactura.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_sucursalDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleFacturaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleFacturaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallefactura.setid_sucursal(sucursalAux.getId());
				detallefactura.setsucursal_descripcion(DetalleFacturaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallefactura.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_ejercicioDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleFacturaGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleFacturaGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detallefactura.setid_ejercicio(ejercicioAux.getId());
				detallefactura.setejercicio_descripcion(DetalleFacturaConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detallefactura.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_periodoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleFacturaGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleFacturaGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detallefactura.setid_periodo(periodoAux.getId());
				detallefactura.setperiodo_descripcion(DetalleFacturaConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detallefactura.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_anioDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleFacturaGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleFacturaGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detallefactura.setid_anio(anioAux.getId());
				detallefactura.setanio_descripcion(DetalleFacturaConstantesFunciones.getAnioDescripcion(anioAux));
				detallefactura.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_mesDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleFacturaGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleFacturaGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detallefactura.setid_mes(mesAux.getId());
				detallefactura.setmes_descripcion(DetalleFacturaConstantesFunciones.getMesDescripcion(mesAux));
				detallefactura.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_facturaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaDetalleFacturaGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaDetalleFacturaGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				detallefactura.setid_factura(facturaAux.getId());
				detallefactura.setfactura_descripcion(DetalleFacturaConstantesFunciones.getFacturaDescripcion(facturaAux));
				detallefactura.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_bodegaDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleFacturaGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleFacturaGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallefactura.setid_bodega(bodegaAux.getId());
				detallefactura.setbodega_descripcion(DetalleFacturaConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallefactura.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_productoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleFacturaGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleFacturaGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallefactura.setid_producto(productoAux.getId());
				detallefactura.setproducto_descripcion(DetalleFacturaConstantesFunciones.getProductoDescripcion(productoAux));
				detallefactura.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_unidadDetalleFacturaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleFacturaGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleFacturaGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallefactura.setid_unidad(unidadAux.getId());
				detallefactura.setunidad_descripcion(DetalleFacturaConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallefactura.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleFactura detallefactura,JComboBox jComboBoxid_centro_costoDetalleFacturaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleFacturaGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleFacturaGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detallefactura.setid_centro_costo(centrocostoAux.getId());
				detallefactura.setcentrocosto_descripcion(DetalleFacturaConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detallefactura.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.addItem(factura);
							}
						}

						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.addItem(bodega);
							}
						}

						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleFactura.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleFactura.addItem(producto);
							}
						}

						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.addItem(unidad);
							}
						}

						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFactura!=null) { 
					}

					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.addItem(centrocosto);
							}
						}

						if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleFactura.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleFactura() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleFacturaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleFactura(this.detallefacturaLogic.getDetalleFacturas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleFacturaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleFactura(this.detallefacturas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(CentroCosto.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallefacturaLogic.setDetalleFacturas(this.detallefacturas);
			detallefacturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleFacturaParameterReturnGeneral getDetalleFacturaParameterGeneral() {
		return this.detallefacturaParameterGeneral;
	}
	
	public void setDetalleFacturaParameterGeneral(DetalleFacturaParameterReturnGeneral detallefacturaParameterGeneral) {
		this.detallefacturaParameterGeneral = detallefacturaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleFactura() {
		return isPermisoTodoDetalleFactura;
	}

	public void setIsPermisoTodoDetalleFactura(Boolean isPermisoTodoDetalleFactura) {
		this.isPermisoTodoDetalleFactura = isPermisoTodoDetalleFactura;
	}

	public Boolean getIsPermisoNuevoDetalleFactura() {
		return isPermisoNuevoDetalleFactura;
	}

	public void setIsPermisoNuevoDetalleFactura(Boolean isPermisoNuevoDetalleFactura) {
		this.isPermisoNuevoDetalleFactura = isPermisoNuevoDetalleFactura;
	}

	public Boolean getIsPermisoActualizarDetalleFactura() {
		return isPermisoActualizarDetalleFactura;
	}

	public void setIsPermisoActualizarDetalleFactura(Boolean isPermisoActualizarDetalleFactura) {
		this.isPermisoActualizarDetalleFactura = isPermisoActualizarDetalleFactura;
	}

	public Boolean getIsPermisoEliminarDetalleFactura() {
		return isPermisoEliminarDetalleFactura;
	}

	public void setIsPermisoEliminarDetalleFactura(Boolean isPermisoEliminarDetalleFactura) {
		this.isPermisoEliminarDetalleFactura = isPermisoEliminarDetalleFactura;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleFactura() {
		return isPermisoGuardarCambiosDetalleFactura;
	}

	public void setIsPermisoGuardarCambiosDetalleFactura(Boolean isPermisoGuardarCambiosDetalleFactura) {
		this.isPermisoGuardarCambiosDetalleFactura = isPermisoGuardarCambiosDetalleFactura;
	}
	
	public Boolean getIsPermisoConsultaDetalleFactura() {
		return isPermisoConsultaDetalleFactura;
	}

	public void setIsPermisoConsultaDetalleFactura(Boolean isPermisoConsultaDetalleFactura) {
		this.isPermisoConsultaDetalleFactura = isPermisoConsultaDetalleFactura;
	}

	public Boolean getIsPermisoBusquedaDetalleFactura() {
		return isPermisoBusquedaDetalleFactura;
	}

	public void setIsPermisoBusquedaDetalleFactura(Boolean isPermisoBusquedaDetalleFactura) {
		this.isPermisoBusquedaDetalleFactura = isPermisoBusquedaDetalleFactura;
	}

	public Boolean getIsPermisoReporteDetalleFactura() {
		return isPermisoReporteDetalleFactura;
	}

	public void setIsPermisoReporteDetalleFactura(Boolean isPermisoReporteDetalleFactura) {
		this.isPermisoReporteDetalleFactura = isPermisoReporteDetalleFactura;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleFactura() {
		return isPermisoPaginacionMedioDetalleFactura;
	}

	public void setIsPermisoPaginacionMedioDetalleFactura(Boolean isPermisoPaginacionMedioDetalleFactura) {
		this.isPermisoPaginacionMedioDetalleFactura = isPermisoPaginacionMedioDetalleFactura;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleFactura() {
		return isPermisoPaginacionTodoDetalleFactura;
	}

	public void setIsPermisoPaginacionTodoDetalleFactura(Boolean isPermisoPaginacionTodoDetalleFactura) {
		this.isPermisoPaginacionTodoDetalleFactura = isPermisoPaginacionTodoDetalleFactura;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleFactura() {
		return isPermisoPaginacionAltoDetalleFactura;
	}

	public void setIsPermisoPaginacionAltoDetalleFactura(Boolean isPermisoPaginacionAltoDetalleFactura) {
		this.isPermisoPaginacionAltoDetalleFactura = isPermisoPaginacionAltoDetalleFactura;
	}
	
	public Boolean getIsPermisoCopiarDetalleFactura() {
		return isPermisoCopiarDetalleFactura;
	}

	public void setIsPermisoCopiarDetalleFactura(Boolean isPermisoCopiarDetalleFactura) {
		this.isPermisoCopiarDetalleFactura = isPermisoCopiarDetalleFactura;
	}
	
	public Boolean getIsPermisoVerFormDetalleFactura() {
		return isPermisoVerFormDetalleFactura;
	}

	public void setIsPermisoVerFormDetalleFactura(Boolean isPermisoVerFormDetalleFactura) {
		this.isPermisoVerFormDetalleFactura = isPermisoVerFormDetalleFactura;
	}
	
	public Boolean getIsPermisoDuplicarDetalleFactura() {
		return isPermisoDuplicarDetalleFactura;
	}

	public void setIsPermisoDuplicarDetalleFactura(Boolean isPermisoDuplicarDetalleFactura) {
		this.isPermisoDuplicarDetalleFactura = isPermisoDuplicarDetalleFactura;
	}
	
	public Boolean getIsPermisoOrdenDetalleFactura() {
		return isPermisoOrdenDetalleFactura;
	}

	public void setIsPermisoOrdenDetalleFactura(Boolean isPermisoOrdenDetalleFactura) {
		this.isPermisoOrdenDetalleFactura = isPermisoOrdenDetalleFactura;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleFactura() {
		return isVisibilidadCeldaNuevoDetalleFactura;
	}

	public void setIsVisibilidadCeldaNuevoDetalleFactura(Boolean isVisibilidadCeldaNuevoDetalleFactura) {
		this.isVisibilidadCeldaNuevoDetalleFactura = isVisibilidadCeldaNuevoDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleFactura() {
		return isVisibilidadCeldaDuplicarDetalleFactura;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleFactura(Boolean isVisibilidadCeldaDuplicarDetalleFactura) {
		this.isVisibilidadCeldaDuplicarDetalleFactura = isVisibilidadCeldaDuplicarDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleFactura() {
		return isVisibilidadCeldaCopiarDetalleFactura;
	}

	public void setIsVisibilidadCeldaCopiarDetalleFactura(Boolean isVisibilidadCeldaCopiarDetalleFactura) {
		this.isVisibilidadCeldaCopiarDetalleFactura = isVisibilidadCeldaCopiarDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleFactura() {
		return isVisibilidadCeldaVerFormDetalleFactura;
	}

	public void setIsVisibilidadCeldaVerFormDetalleFactura(Boolean isVisibilidadCeldaVerFormDetalleFactura) {
		this.isVisibilidadCeldaVerFormDetalleFactura = isVisibilidadCeldaVerFormDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleFactura() {
		return isVisibilidadCeldaOrdenDetalleFactura;
	}

	public void setIsVisibilidadCeldaOrdenDetalleFactura(Boolean isVisibilidadCeldaOrdenDetalleFactura) {
		this.isVisibilidadCeldaOrdenDetalleFactura = isVisibilidadCeldaOrdenDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleFactura() {
		return isVisibilidadCeldaNuevoRelacionesDetalleFactura;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleFactura(Boolean isVisibilidadCeldaNuevoRelacionesDetalleFactura) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleFactura = isVisibilidadCeldaNuevoRelacionesDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleFactura() {
		return isVisibilidadCeldaModificarDetalleFactura;
	}

	public void setIsVisibilidadCeldaModificarDetalleFactura(Boolean isVisibilidadCeldaModificarDetalleFactura) {
		this.isVisibilidadCeldaModificarDetalleFactura = isVisibilidadCeldaModificarDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleFactura() {
		return isVisibilidadCeldaActualizarDetalleFactura;
	}

	public void setIsVisibilidadCeldaActualizarDetalleFactura(Boolean isVisibilidadCeldaActualizarDetalleFactura) {
		this.isVisibilidadCeldaActualizarDetalleFactura = isVisibilidadCeldaActualizarDetalleFactura;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleFactura() {
		return isVisibilidadCeldaEliminarDetalleFactura;
	}

	public void setIsVisibilidadCeldaEliminarDetalleFactura(Boolean isVisibilidadCeldaEliminarDetalleFactura) {
		this.isVisibilidadCeldaEliminarDetalleFactura = isVisibilidadCeldaEliminarDetalleFactura;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleFactura() {
		return isVisibilidadCeldaCancelarDetalleFactura;
	}

	public void setIsVisibilidadCeldaCancelarDetalleFactura(Boolean isVisibilidadCeldaCancelarDetalleFactura) {
		this.isVisibilidadCeldaCancelarDetalleFactura = isVisibilidadCeldaCancelarDetalleFactura;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleFactura() {
		return isVisibilidadCeldaGuardarDetalleFactura;
	}

	public void setIsVisibilidadCeldaGuardarDetalleFactura(Boolean isVisibilidadCeldaGuardarDetalleFactura) {
		this.isVisibilidadCeldaGuardarDetalleFactura = isVisibilidadCeldaGuardarDetalleFactura;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleFactura() {
		return isVisibilidadCeldaGuardarCambiosDetalleFactura;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleFactura(Boolean isVisibilidadCeldaGuardarCambiosDetalleFactura) {
		this.isVisibilidadCeldaGuardarCambiosDetalleFactura = isVisibilidadCeldaGuardarCambiosDetalleFactura;
	}
		
	public DetalleFacturaSessionBean getdetallefacturaSessionBean() {
		return this.detallefacturaSessionBean;
	}
	
	public void setdetallefacturaSessionBean(DetalleFacturaSessionBean detallefacturaSessionBean) {
		this.detallefacturaSessionBean=detallefacturaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(DetalleFactura detallefactura)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(detallefactura,null);
				this.setActualParaGuardarSucursalForeignKey(detallefactura,null);
				this.setActualParaGuardarEjercicioForeignKey(detallefactura,null);
				this.setActualParaGuardarPeriodoForeignKey(detallefactura,null);
				this.setActualParaGuardarAnioForeignKey(detallefactura,null);
				this.setActualParaGuardarMesForeignKey(detallefactura,null);
				this.setActualParaGuardarFacturaForeignKey(detallefactura,null);
				this.setActualParaGuardarBodegaForeignKey(detallefactura,null);
				this.setActualParaGuardarProductoForeignKey(detallefactura,null);
				this.setActualParaGuardarUnidadForeignKey(detallefactura,null);
				this.setActualParaGuardarCentroCostoForeignKey(detallefactura,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetalleFactura detallefactura,DetalleFactura detallefacturaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleFactura(detallefactura);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallefacturaAux.setId(detallefactura.getId());
		detallefacturaAux.setVersionRow(detallefactura.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleFactura();
		
			int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallefacturaValidator.getInvalidValues(this.detallefactura);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallefacturaLogic.setDatosCliente(datosCliente);
			detallefacturaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallefacturaAux=new  DetalleFactura();
				
				detallefacturaAux.setIsNew(true);
				detallefacturaAux.setIsChanged(true);
				
				detallefacturaAux.setDetalleFacturaOriginal(this.detallefactura);
				
				detallefacturaAux.setId(this.detallefactura.getId());	
				detallefacturaAux.setVersionRow(this.detallefactura.getVersionRow());	
				detallefacturaAux.setid_empresa(this.detallefactura.getid_empresa());	
				detallefacturaAux.setid_sucursal(this.detallefactura.getid_sucursal());	
				detallefacturaAux.setid_ejercicio(this.detallefactura.getid_ejercicio());	
				detallefacturaAux.setid_periodo(this.detallefactura.getid_periodo());	
				detallefacturaAux.setid_anio(this.detallefactura.getid_anio());	
				detallefacturaAux.setid_mes(this.detallefactura.getid_mes());	
				detallefacturaAux.setid_factura(this.detallefactura.getid_factura());	
				detallefacturaAux.setid_bodega(this.detallefactura.getid_bodega());	
				detallefacturaAux.setid_producto(this.detallefactura.getid_producto());	
				detallefacturaAux.setid_unidad(this.detallefactura.getid_unidad());	
				detallefacturaAux.setcodigo_lote(this.detallefactura.getcodigo_lote());	
				
				if(this.detallefactura.getid_centro_costo()!=null && this.detallefactura.getid_centro_costo()>0L) {
					detallefacturaAux.setid_centro_costo(this.detallefactura.getid_centro_costo());
				} else {
					detallefacturaAux.setid_centro_costo(null);
				}	
				detallefacturaAux.setfecha(this.detallefactura.getfecha());	
				detallefacturaAux.setdescripcion(this.detallefactura.getdescripcion());	
				detallefacturaAux.setcantidad(this.detallefactura.getcantidad());	
				detallefacturaAux.setprecio(this.detallefactura.getprecio());	
				detallefacturaAux.setiva(this.detallefactura.getiva());	
				detallefacturaAux.setiva_valor(this.detallefactura.getiva_valor());	
				detallefacturaAux.setice(this.detallefactura.getice());	
				detallefacturaAux.setice_valor(this.detallefactura.getice_valor());	
				detallefacturaAux.setdescuento(this.detallefactura.getdescuento());	
				detallefacturaAux.setdescuento_valor(this.detallefactura.getdescuento_valor());	
				detallefacturaAux.setdescuento2(this.detallefactura.getdescuento2());	
				detallefacturaAux.setsub_total(this.detallefactura.getsub_total());	
				detallefacturaAux.settotal(this.detallefactura.gettotal());	
				detallefacturaAux.setmonto(this.detallefactura.getmonto());	
				detallefacturaAux.setnombre(this.detallefactura.getnombre());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaAux,detallefacturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.saveDetalleFacturas();//WithConnection
						//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaLogic.saveDetalleFacturaRelaciones(detallefacturaAux);//WithConnection
								//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallefacturaAux,detallefacturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallefacturaAux=new  DetalleFactura();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallefacturaSessionBean.getEsGuardarRelacionado() 
					|| (this.detallefacturaSessionBean.getEsGuardarRelacionado() && this.detallefactura.getId()>=0)) {
						
					detallefacturaAux.setIsNew(false);
				}
				
				detallefacturaAux.setIsDeleted(false);
			
				detallefacturaAux.setId(this.detallefactura.getId());	
				detallefacturaAux.setVersionRow(this.detallefactura.getVersionRow());	
				detallefacturaAux.setid_empresa(this.detallefactura.getid_empresa());	
				detallefacturaAux.setid_sucursal(this.detallefactura.getid_sucursal());	
				detallefacturaAux.setid_ejercicio(this.detallefactura.getid_ejercicio());	
				detallefacturaAux.setid_periodo(this.detallefactura.getid_periodo());	
				detallefacturaAux.setid_anio(this.detallefactura.getid_anio());	
				detallefacturaAux.setid_mes(this.detallefactura.getid_mes());	
				detallefacturaAux.setid_factura(this.detallefactura.getid_factura());	
				detallefacturaAux.setid_bodega(this.detallefactura.getid_bodega());	
				detallefacturaAux.setid_producto(this.detallefactura.getid_producto());	
				detallefacturaAux.setid_unidad(this.detallefactura.getid_unidad());	
				detallefacturaAux.setcodigo_lote(this.detallefactura.getcodigo_lote());	
				
				if(this.detallefactura.getid_centro_costo()!=null && this.detallefactura.getid_centro_costo()>0L) {
					detallefacturaAux.setid_centro_costo(this.detallefactura.getid_centro_costo());
				} else {
					detallefacturaAux.setid_centro_costo(null);
				}	
				detallefacturaAux.setfecha(this.detallefactura.getfecha());	
				detallefacturaAux.setdescripcion(this.detallefactura.getdescripcion());	
				detallefacturaAux.setcantidad(this.detallefactura.getcantidad());	
				detallefacturaAux.setprecio(this.detallefactura.getprecio());	
				detallefacturaAux.setiva(this.detallefactura.getiva());	
				detallefacturaAux.setiva_valor(this.detallefactura.getiva_valor());	
				detallefacturaAux.setice(this.detallefactura.getice());	
				detallefacturaAux.setice_valor(this.detallefactura.getice_valor());	
				detallefacturaAux.setdescuento(this.detallefactura.getdescuento());	
				detallefacturaAux.setdescuento_valor(this.detallefactura.getdescuento_valor());	
				detallefacturaAux.setdescuento2(this.detallefactura.getdescuento2());	
				detallefacturaAux.setsub_total(this.detallefactura.getsub_total());	
				detallefacturaAux.settotal(this.detallefactura.gettotal());	
				detallefacturaAux.setmonto(this.detallefactura.getmonto());	
				detallefacturaAux.setnombre(this.detallefactura.getnombre());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaAux,detallefacturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.saveDetalleFacturas();//WithConnection
						//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaLogic.saveDetalleFacturaRelaciones(detallefacturaAux);//WithConnection
								//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallefacturaAux,detallefacturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallefactura,detallefacturaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallefacturaAux=new  DetalleFactura();
				
				detallefacturaAux.setIsNew(false);
				detallefacturaAux.setIsChanged(false);
				
				detallefacturaAux.setIsDeleted(true);
				
				detallefacturaAux.setId(this.detallefactura.getId());	
				detallefacturaAux.setVersionRow(this.detallefactura.getVersionRow());	
				detallefacturaAux.setid_empresa(this.detallefactura.getid_empresa());	
				detallefacturaAux.setid_sucursal(this.detallefactura.getid_sucursal());	
				detallefacturaAux.setid_ejercicio(this.detallefactura.getid_ejercicio());	
				detallefacturaAux.setid_periodo(this.detallefactura.getid_periodo());	
				detallefacturaAux.setid_anio(this.detallefactura.getid_anio());	
				detallefacturaAux.setid_mes(this.detallefactura.getid_mes());	
				detallefacturaAux.setid_factura(this.detallefactura.getid_factura());	
				detallefacturaAux.setid_bodega(this.detallefactura.getid_bodega());	
				detallefacturaAux.setid_producto(this.detallefactura.getid_producto());	
				detallefacturaAux.setid_unidad(this.detallefactura.getid_unidad());	
				detallefacturaAux.setcodigo_lote(this.detallefactura.getcodigo_lote());	
				
				if(this.detallefactura.getid_centro_costo()!=null && this.detallefactura.getid_centro_costo()>0L) {
					detallefacturaAux.setid_centro_costo(this.detallefactura.getid_centro_costo());
				} else {
					detallefacturaAux.setid_centro_costo(null);
				}	
				detallefacturaAux.setfecha(this.detallefactura.getfecha());	
				detallefacturaAux.setdescripcion(this.detallefactura.getdescripcion());	
				detallefacturaAux.setcantidad(this.detallefactura.getcantidad());	
				detallefacturaAux.setprecio(this.detallefactura.getprecio());	
				detallefacturaAux.setiva(this.detallefactura.getiva());	
				detallefacturaAux.setiva_valor(this.detallefactura.getiva_valor());	
				detallefacturaAux.setice(this.detallefactura.getice());	
				detallefacturaAux.setice_valor(this.detallefactura.getice_valor());	
				detallefacturaAux.setdescuento(this.detallefactura.getdescuento());	
				detallefacturaAux.setdescuento_valor(this.detallefactura.getdescuento_valor());	
				detallefacturaAux.setdescuento2(this.detallefactura.getdescuento2());	
				detallefacturaAux.setsub_total(this.detallefactura.getsub_total());	
				detallefacturaAux.settotal(this.detallefactura.gettotal());	
				detallefacturaAux.setmonto(this.detallefactura.getmonto());	
				detallefacturaAux.setnombre(this.detallefactura.getnombre());	
				
				if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallefacturaAux.getId()>=0) {	
						this.detallefacturasEliminados.add(detallefacturaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaAux,detallefacturas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.saveDetalleFacturas();//WithConnection
						//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaLogic.saveDetalleFacturaRelaciones(detallefacturaAux);//WithConnection
								//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallefacturaAux,detallefacturaLogic.getDetalleFacturas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallefacturaAux,detallefacturas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getDetalleFacturas().addAll(this.detallefacturasEliminados);
					
					detallefacturaLogic.saveDetalleFacturas();//WithConnection
					//detallefacturaLogic.getSetVersionRowDetalleFacturas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleFactura();
				
				this.detallefacturasEliminados= new ArrayList<DetalleFactura>();		
			}
			
			if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(detallefacturaLogic.getDetalleFacturas());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(this.detallefacturas);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Factura GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallefactura=detallefacturaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleFactura();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleFactura detallefacturaLocal) throws Exception {
		
		if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleFactura detallefacturaLocal) throws Exception {	
		if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallefacturaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallefacturaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detallefacturaLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detallefacturaLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detallefacturaLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detallefacturaLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				detallefacturaLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallefacturaLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallefacturaLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallefacturaLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detallefacturaLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleFacturaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallefacturaValidator.getInvalidValues(this.detallefactura);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleFactura detallefactura,List<DetalleFactura> detallefacturas) throws Exception {
		try	{		
			DetalleFacturaConstantesFunciones.actualizarLista(detallefactura,detallefacturas,this.detallefacturaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleFactura detallefactura,List<DetalleFactura> detallefacturas) throws Exception {
		try	{			
			DetalleFacturaConstantesFunciones.actualizarSelectedLista(detallefactura,detallefacturas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleFactura> detallefacturasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallefacturasLocal=this.detallefacturaLogic.getDetalleFacturas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallefacturasLocal=this.detallefacturas;
			}
			//ARCHITECTURE
		
			for(DetalleFactura detallefacturaLocal:detallefacturasLocal) {
				if(this.permiteMantenimiento(detallefacturaLocal) && detallefacturaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleFacturaConstantesFunciones.getDetalleFacturaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_empresaDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_sucursalDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_ejercicioDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_periodoDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_anioDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_mesDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_facturaDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_bodegaDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_productoDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_unidadDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.CODIGOLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelcodigo_loteDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_centro_costoDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelfechaDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescripcionDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelcantidadDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.PRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelprecioDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelivaDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.IVAVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeliva_valorDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeliceDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.ICEVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelice_valorDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuentoDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento_valorDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.DESCUENTO2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento2DetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelsub_totalDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeltotalDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.MONTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelmontoDetalleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelnombreDetalleFactura,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_empresaDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_sucursalDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_ejercicioDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_periodoDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_anioDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_mesDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_facturaDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_bodegaDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_productoDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_unidadDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelcodigo_loteDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelid_centro_costoDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelfechaDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescripcionDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelcantidadDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelprecioDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelivaDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeliva_valorDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeliceDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelice_valorDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuentoDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento_valorDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento2DetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelsub_totalDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabeltotalDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelmontoDetalleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFactura.jLabelnombreDetalleFactura,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleFactura--;	
		
		
		this.detallefacturaAux=new DetalleFactura();
		
		this.detallefacturaAux.setId(this.iIdNuevoDetalleFactura);
		this.detallefacturaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallefacturaLogic.getDetalleFacturas().add(this.detallefacturaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallefacturas.add(this.detallefacturaAux);
		}
		//ARCHITECTURE
		
		this.detallefactura=this.detallefacturaAux;
		
		if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleFactura(this.detallefactura);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleFactura(this.detallefactura);
		}
				
		//this.setDefaultControlesDetalleFactura();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleFactura();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleFactura();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFactura();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleFactura(this.detallefacturaBean,this.detallefactura,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleFacturaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
			classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallefacturaReturnGeneral=detallefacturaLogic.procesarEventosDetalleFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefacturaLogic.getDetalleFacturas(),this.detallefactura,this.detallefacturaParameterGeneral,this.isEsNuevoDetalleFactura,classes);//this.detallefacturaLogic.getDetalleFactura()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleFactura(this.detallefacturaReturnGeneral,this.detallefacturaBean,false);
		
		if(this.detallefacturaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura());
		}
		
		if(this.detallefacturaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura(),classes);//this.detallefacturaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleFactura();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleFactura();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.RecargarFormDetalleFactura(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleFactura(false);
						
			if(detallefacturaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFactura();
			}
			
			this.actualizarVisualTableDatosDetalleFactura();
			
			this.jTableDatosDetalleFactura.setRowSelectionInterval(this.getIndiceNuevoDetalleFactura(), this.getIndiceNuevoDetalleFactura());
			
			this.seleccionarFilaTablaDetalleFacturaActual();
						
			this.actualizarEstadoCeldasBotonesDetalleFactura("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleFactura(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarcodigo_loteDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarfechaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activardescripcionDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarcantidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarprecioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarivaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activariva_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activariceDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarice_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activardescuentoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activardescuento_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activardescuento2DetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarsub_totalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activartotalDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldmontoDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarmontoDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jTextAreanombreDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarnombreDetalleFactura);	
		//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_empresaDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_sucursalDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_ejercicioDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_periodoDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_anioDetalleFactura);//
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_mesDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_facturaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_bodegaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_productoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_unidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setEnabled(isHabilitar && this.detallefacturaConstantesFunciones.activarid_centro_costoDetalleFactura);
	};
	
	public void setDefaultControlesDetalleFactura() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleFactura(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallefacturaSessionBean.setConGuardarRelaciones(true);			
			this.detallefacturaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.setVisible(true);
			
					
		} else {
			//this.detallefacturaSessionBean.setConGuardarRelaciones(false);			
			this.detallefacturaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleFactura() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
				if(detallefacturaAux.getId().equals(this.iIdNuevoDetalleFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFactura detallefacturaAux:this.detallefacturas) {
				if(detallefacturaAux.getId().equals(this.iIdNuevoDetalleFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleFactura(DetalleFactura detallefactura,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
				if(detallefacturaAux.getId().equals(detallefactura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFactura detallefacturaAux:this.detallefacturas) {
				if(detallefacturaAux.getId().equals(detallefactura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleFactura(DetalleFactura detallefacturaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
				if(detallefacturaAux.getDetalleFacturaOriginal().getId().equals(detallefacturaOriginal.getId())) {
					existe=true;
					detallefacturaOriginal.setId(detallefacturaAux.getId());
					detallefacturaOriginal.setVersionRow(detallefacturaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFactura detallefacturaAux:this.detallefacturas) {
				if(detallefacturaAux.getDetalleFacturaOriginal().getId().equals(detallefacturaOriginal.getId())) {
					existe=true;
					detallefacturaOriginal.setId(detallefacturaAux.getId());
					detallefacturaOriginal.setVersionRow(detallefacturaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleFactura(Boolean esParaCancelar) throws Exception {
		detallefacturasAux=new ArrayList<DetalleFactura>();
		detallefacturaAux=new DetalleFactura();
		
		if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
					if(detallefacturaAux.getId()<0) {
						detallefacturasAux.add(detallefacturaAux);
					}		
				}
				this.iIdNuevoDetalleFactura=0L;
				this.detallefacturaLogic.getDetalleFacturas().removeAll(detallefacturasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFactura detallefacturaAux:this.detallefacturas) {
					if(detallefacturaAux.getId()<0) {
						detallefacturasAux.add(detallefacturaAux);
					}		
				}
				this.iIdNuevoDetalleFactura=0L;
				this.detallefacturas.removeAll(detallefacturasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleFactura 
					&& this.detallefacturaLogic.getDetalleFacturas().size()>0
					) {
					detallefacturaAux=this.detallefacturaLogic.getDetalleFacturas().get(this.detallefacturaLogic.getDetalleFacturas().size() - 1);
				
					if(detallefacturaAux.getId()<0) {
						this.detallefacturaLogic.getDetalleFacturas().remove(detallefacturaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleFactura && this.detallefacturas.size()>0) {
					detallefacturaAux=this.detallefacturas.get(this.detallefacturas.size() - 1);
				
					if(detallefacturaAux.getId()<0) {
						this.detallefacturas.remove(detallefacturaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleFactura(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallefactura.getId()<0) {
				this.detallefacturaLogic.getDetalleFacturas().remove(this.detallefactura);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallefactura.getId()<0) {
				this.detallefacturas.remove(this.detallefactura);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleFactura(List<DetalleFactura> detallefacturasAux) throws Exception {
		DetalleFacturaConstantesFunciones.setEstadosInicialesDetalleFactura(detallefacturasAux);
	}
	
	public void setEstadosInicialesDetalleFactura(DetalleFactura detallefacturaAux) throws Exception {
		DetalleFacturaConstantesFunciones.setEstadosInicialesDetalleFactura(detallefacturaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleFacturaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleFacturaActual()) {
				if(!this.isEsNuevoDetalleFactura) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleFactura=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleFacturaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Factura ?", "MANTENIMIENTO DE Detalle Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleFactura detallefactura) throws Exception {
		DetalleFacturaConstantesFunciones.seleccionarAsignar(this.detallefactura,detallefactura);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleFactura=this.isPermisoActualizarOriginalDetalleFactura;
			
			
			this.seleccionarAsignar(detallefactura);
			
			

			idFacturaActual=detallefactura.getid_factura();
			this.seleccionarFacturaActual();

			idProductoActual=detallefactura.getid_producto();
			this.seleccionarProductoActual();

			idCentroCostoActual=detallefactura.getid_centro_costo();
			this.seleccionarCentroCostoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleFacturaConstantesFunciones.quitarEspaciosDetalleFactura(this.detallefactura,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallefacturaSessionBean.setsFuncionBusquedaRapida(this.detallefacturaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleFactura) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleFactura(esParaCancelar);				
				this.cancelarNuevoDetalleFactura(esParaCancelar);								
			}
			
			this.detallefactura=new DetalleFactura();
			
			this.inicializarDetalleFactura();
			
			this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleFactura() throws Exception {
		try {
			DetalleFacturaConstantesFunciones.inicializarDetalleFactura(this.detallefactura);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallefacturaLogic.getDetalleFacturas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleFacturas(String sAccionBusqueda,List<DetalleFactura> detallefacturasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleFactura"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleFacturaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleFacturaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleFactura"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Facturas");		
		parameters.put("busquedapor", DetalleFacturaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleFactura=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleFacturaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleFacturaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleFactura=new JRBeanArrayDataSource(DetalleFacturaJInternalFrame.TraerDetalleFacturaBeans(detallefacturasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleFactura);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleFacturaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleFacturaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleFacturaBean.TraerDetalleFacturaBeans(detallefacturasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetalleFacturaActionPerformed(null);
					//this.generarExcelReporteDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleFacturas(sAccionBusqueda,sTipoArchivoReporte,detallefacturasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFactura> detallefacturasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleFactura("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleFactura detallefactura : detallefacturasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleFacturaConstantesFunciones.generarExcelReporteDataDetalleFactura("NORMAL",row,workbook,detallefactura,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleFactura(String sTipo,Row row,Workbook workbook) {
		
		DetalleFacturaConstantesFunciones.generarExcelReporteHeaderDetalleFactura(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFactura> detallefacturasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleFactura detallefactura : detallefacturasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleFacturaConstantesFunciones.getDetalleFacturaDescripcion(detallefactura));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getcodigo_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_PRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_PRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getprecio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getiva_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getice_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getdescuento2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_MONTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_MONTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getmonto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefactura.getnombre());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFactura> detallefacturasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleFactura> detallefacturasRespaldo=null;
		
		classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallefacturaLogic.setDatosCliente(this.datosCliente);
		this.detallefacturaLogic.setDatosDeep(this.datosDeep);
		this.detallefacturaLogic.setIsConDeep(true);
		
		detallefacturasRespaldo=this.detallefacturaLogic.getDetalleFacturas();
		
		this.detallefacturaLogic.setDetalleFacturas(detallefacturasParaReportes);	
		this.detallefacturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallefacturasParaReportes=this.detallefacturaLogic.getDetalleFacturas();
		this.detallefacturaLogic.setDetalleFacturas(detallefacturasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleFactura("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleFactura detallefactura : detallefacturasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleFactura("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleFacturaConstantesFunciones.generarExcelReporteDataDetalleFactura("NORMAL",row,workbook,detallefactura,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleFacturaConstantesFunciones.getDetalleFacturaDescripcion(detallefactura));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFactura.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetalleFactura() throws Exception {		
		this.startProcessDetalleFactura(true);
	}
	
	public void startProcessDetalleFactura(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleFactura ,this.jPanelParametrosReportesDetalleFactura, this.jScrollPanelDatosDetalleFactura,this.jPanelPaginacionDetalleFactura, this.jScrollPanelDatosEdicionDetalleFactura, this.jPanelAccionesDetalleFactura,this.jPanelAccionesFormularioDetalleFactura,this.jmenuBarDetalleFactura,this.jmenuBarDetalleDetalleFactura,this.jTtoolBarDetalleFactura,this.jTtoolBarDetalleDetalleFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleFactura=this.jTabbedPaneBusquedasDetalleFactura; 
		
		final JPanel jPanelParametrosReportesDetalleFactura=this.jPanelParametrosReportesDetalleFactura;
		//final JScrollPane jScrollPanelDatosDetalleFactura=this.jScrollPanelDatosDetalleFactura;
		final JTable jTableDatosDetalleFactura=this.jTableDatosDetalleFactura;		
		final JPanel jPanelPaginacionDetalleFactura=this.jPanelPaginacionDetalleFactura;
		//final JScrollPane jScrollPanelDatosEdicionDetalleFactura=this.jScrollPanelDatosEdicionDetalleFactura;
		final JPanel jPanelAccionesDetalleFactura=this.jPanelAccionesDetalleFactura;
		
		JPanel jPanelCamposAuxiliarDetalleFactura=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleFactura=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			jPanelCamposAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jPanelCamposDetalleFactura;
			jPanelAccionesFormularioAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jPanelAccionesFormularioDetalleFactura;
		}
		
		final JPanel jPanelCamposDetalleFactura=jPanelCamposAuxiliarDetalleFactura;
		final JPanel jPanelAccionesFormularioDetalleFactura=jPanelAccionesFormularioAuxiliarDetalleFactura;
		
		
		final JMenuBar jmenuBarDetalleFactura=this.jmenuBarDetalleFactura;
		final JToolBar jTtoolBarDetalleFactura=this.jTtoolBarDetalleFactura;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetalleFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleFactura=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			jmenuBarDetalleAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jmenuBarDetalleDetalleFactura;
			jTtoolBarDetalleAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jTtoolBarDetalleDetalleFactura;
		}
		
		final JMenuBar jmenuBarDetalleDetalleFactura=jmenuBarDetalleAuxiliarDetalleFactura;
		final JToolBar jTtoolBarDetalleDetalleFactura=jTtoolBarDetalleAuxiliarDetalleFactura;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleFactura;
			processRunnable.jTableDatos=jTableDatosDetalleFactura;
			processRunnable.jPanelCampos=jPanelCamposDetalleFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleFactura;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleFactura;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleFactura;
			processRunnable.jTtoolBar=jTtoolBarDetalleFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleFactura ,jPanelParametrosReportesDetalleFactura,jTableDatosDetalleFactura, /*jScrollPanelDatosDetalleFactura,*/jPanelCamposDetalleFactura,jPanelPaginacionDetalleFactura, /*jScrollPanelDatosEdicionDetalleFactura,*/ jPanelAccionesDetalleFactura,jPanelAccionesFormularioDetalleFactura,jmenuBarDetalleFactura,jmenuBarDetalleDetalleFactura,jTtoolBarDetalleFactura,jTtoolBarDetalleDetalleFactura);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleFactura ,jPanelParametrosReportesDetalleFactura, jScrollPanelDatosDetalleFactura,jPanelPaginacionDetalleFactura, jScrollPanelDatosEdicionDetalleFactura, jPanelAccionesDetalleFactura,jPanelAccionesFormularioDetalleFactura,jmenuBarDetalleFactura,jmenuBarDetalleDetalleFactura,jTtoolBarDetalleFactura,jTtoolBarDetalleDetalleFactura);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleFactura() {// throws Exception 
		this.finishProcessDetalleFactura(true);
	}
	
	public void finishProcessDetalleFactura(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleFactura ,this.jPanelParametrosReportesDetalleFactura, this.jScrollPanelDatosDetalleFactura,this.jPanelPaginacionDetalleFactura, this.jScrollPanelDatosEdicionDetalleFactura, this.jPanelAccionesDetalleFactura,this.jPanelAccionesFormularioDetalleFactura,this.jmenuBarDetalleFactura,this.jmenuBarDetalleDetalleFactura,this.jTtoolBarDetalleFactura,this.jTtoolBarDetalleDetalleFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleFactura=this.jTabbedPaneBusquedasDetalleFactura; 
		
		final JPanel jPanelParametrosReportesDetalleFactura=this.jPanelParametrosReportesDetalleFactura;
		//final JScrollPane jScrollPanelDatosDetalleFactura=this.jScrollPanelDatosDetalleFactura;
		final JTable jTableDatosDetalleFactura=this.jTableDatosDetalleFactura;		
		final JPanel jPanelPaginacionDetalleFactura=this.jPanelPaginacionDetalleFactura;
		//final JScrollPane jScrollPanelDatosEdicionDetalleFactura=this.jScrollPanelDatosEdicionDetalleFactura;
		final JPanel jPanelAccionesDetalleFactura=this.jPanelAccionesDetalleFactura;
		
		JPanel jPanelCamposAuxiliarDetalleFactura=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleFactura=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			jPanelCamposAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jPanelCamposDetalleFactura;
			jPanelAccionesFormularioAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jPanelAccionesFormularioDetalleFactura;
		}
		
		final JPanel jPanelCamposDetalleFactura=jPanelCamposAuxiliarDetalleFactura;
		final JPanel jPanelAccionesFormularioDetalleFactura=jPanelAccionesFormularioAuxiliarDetalleFactura;
		
		
		final JMenuBar jmenuBarDetalleFactura=this.jmenuBarDetalleFactura;		
		final JToolBar jTtoolBarDetalleFactura=this.jTtoolBarDetalleFactura;
				
		JMenuBar jmenuBarDetalleAuxiliarDetalleFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleFactura=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			jmenuBarDetalleAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jmenuBarDetalleDetalleFactura;
			jTtoolBarDetalleAuxiliarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jTtoolBarDetalleDetalleFactura;		
		}
		
		final JMenuBar jmenuBarDetalleDetalleFactura=jmenuBarDetalleAuxiliarDetalleFactura;
		final JToolBar jTtoolBarDetalleDetalleFactura=jTtoolBarDetalleAuxiliarDetalleFactura;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleFactura;
			processRunnable.jTableDatos=jTableDatosDetalleFactura;
			processRunnable.jPanelCampos=jPanelCamposDetalleFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleFactura;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleFactura;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleFactura;
			processRunnable.jTtoolBar=jTtoolBarDetalleFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleFactura ,jPanelParametrosReportesDetalleFactura, jTableDatosDetalleFactura,/*jScrollPanelDatosDetalleFactura,*/jPanelCamposDetalleFactura,jPanelPaginacionDetalleFactura, /*jScrollPanelDatosEdicionDetalleFactura,*/ jPanelAccionesDetalleFactura,jPanelAccionesFormularioDetalleFactura,jmenuBarDetalleFactura,jmenuBarDetalleDetalleFactura,jTtoolBarDetalleFactura,jTtoolBarDetalleDetalleFactura));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleFactura(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleFactura(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleFactura(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleFactura,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleFactura,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallefacturaConstantesFunciones.getsFinalQueryDetalleFactura();
		String  finalQueryPaginacionTodos=this.detallefacturaConstantesFunciones.getsFinalQueryDetalleFactura();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleFacturaConstantesFunciones.getArrayColumnasGlobalesNoDetalleFactura(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleFacturaConstantesFunciones.getArrayColumnasGlobalesDetalleFactura(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleFacturaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallefacturasEliminados= new ArrayList<DetalleFactura>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleFactura();
		
				///*DetalleFacturaSessionBean*/this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			
			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleFacturaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleFacturaConstantesFunciones.getClassesForeignKeysOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallefactura."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallefacturasAux= new ArrayList<DetalleFactura>();
			
				
			detallefacturaLogic.setDatosCliente(this.datosCliente);
			detallefacturaLogic.setDatosDeep(this.datosDeep);
			detallefacturaLogic.setIsConDeep(true);
			
			
			detallefacturaLogic.getDetalleFacturaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallefacturaLogic.getTodosDetalleFacturas(finalQueryGlobal,pagination);
					
					//detallefacturaLogic.getTodosDetalleFacturasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallefacturaLogic.getDetalleFacturas()==null|| detallefacturaLogic.getDetalleFacturas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturasAux= new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux= new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturaLogic.getTodosDetalleFacturas(finalQueryGlobal+"",this.pagination);												
							
							//detallefacturaLogic.getTodosDetalleFacturasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleFacturas("Todos",detallefacturaLogic.getDetalleFacturas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());					
							detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleFactura=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleFactura=this.idActual;
				
				} else if(this.idDetalleFacturaActual!=null && this.idDetalleFacturaActual!=0L) {
					idDetalleFactura=idDetalleFacturaActual;
				}
				
					
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndicePorId(idDetalleFactura);
				
				this.detallefacturas=new ArrayList<DetalleFactura>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallefacturaLogic.getEntity(idDetalleFactura);
					
					//detallefacturaLogic.getEntityWithConnection(idDetalleFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
					detallefacturaLogic.getDetalleFacturas().add(detallefacturaLogic.getDetalleFactura());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturas=new ArrayList<DetalleFactura>();
					this.detallefacturas.add(detallefactura);
				}
				
				if(detallefacturaLogic.getDetalleFactura()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdBodega",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdBodega",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdCentroCosto",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdCentroCosto",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdEjercicio",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdEjercicio",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdEmpresa",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdEmpresa",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdFactura",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdFactura",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdPeriodo",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdPeriodo",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdProducto",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdProducto",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdSucursal",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdSucursal",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaLogic.getDetalleFacturasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaLogic.getDetalleFacturas()==null||detallefacturaLogic.getDetalleFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturas==null|| detallefacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturasAux=new ArrayList<DetalleFactura>();
						detallefacturasAux.addAll(detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturasAux=new ArrayList<DetalleFactura>();
							detallefacturasAux.addAll(detallefacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaLogic.getDetalleFacturasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturas("FK_IdUnidad",detallefacturaLogic.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturas("FK_IdUnidad",detallefacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
						detallefacturaLogic.getDetalleFacturas().addAll(detallefacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturas=new ArrayList<DetalleFactura>();
							detallefacturas.addAll(detallefacturasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleFactura();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(detallefacturaLogic.getDetalleFacturas());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(this.detallefacturas);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleFactura();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallefacturaLogic.getDetalleFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallefacturas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallefacturaLogic.getDetalleFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallefacturas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleFactura detallefactura) {
		Boolean permite=true;
		
		if(this.detallefactura.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(detallefacturaLogic.getDetalleFacturas());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleFacturaConstantesFunciones.getTotalesListaDetalleFactura(this.detallefacturas);
		}
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleFacturaConstantesFunciones.getOrderByListaDetalleFactura();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleFacturaConstantesFunciones.getOrderByListaDetalleFactura();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFactura detallefactura:detallefacturaLogic.getDetalleFacturas()) {
				if(detallefactura.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaTotales=detallefactura;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFactura detallefactura:this.detallefacturas) {
				if(detallefactura.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaTotales=detallefactura;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallefacturaAux=new DetalleFactura();
			this.detallefacturaAux.setsType(Constantes2.S_TOTALES);
			this.detallefacturaAux.setIsNew(false);
			this.detallefacturaAux.setIsChanged(false);
			this.detallefacturaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleFacturaConstantesFunciones.TotalizarValoresFilaDetalleFactura(this.detallefacturaLogic.getDetalleFacturas(),this.detallefacturaAux);
				
				this.detallefacturaLogic.getDetalleFacturas().add(this.detallefacturaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleFacturaConstantesFunciones.TotalizarValoresFilaDetalleFactura(this.detallefacturas,this.detallefacturaAux);
				
				this.detallefacturas.add(this.detallefacturaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallefacturaTotales=new DetalleFactura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallefacturaLogic.getDetalleFacturas().remove(detallefacturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallefacturas.remove(detallefacturaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallefacturaTotales=new DetalleFactura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFactura detallefactura:detallefacturaLogic.getDetalleFacturas()) {
				if(detallefactura.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaTotales=detallefactura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleFacturaConstantesFunciones.TotalizarValoresFilaDetalleFactura(this.detallefacturaLogic.getDetalleFacturas(),detallefacturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFactura detallefactura:this.detallefacturas) {
				if(detallefactura.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaTotales=detallefactura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleFacturaConstantesFunciones.TotalizarValoresFilaDetalleFactura(this.detallefacturas,detallefacturaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetalleFacturasFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturasFK_IdUnidad()throws Exception {
		try {
			sAccionBusqueda="FK_IdUnidad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetalleFacturasFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturasFK_IdUnidad(String sFinalQuery,Long id_unidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLogic.getDetalleFacturasFK_IdUnidad(sFinalQuery,this.pagination,id_unidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleFactura() {
		this.isPermisoTodoDetalleFactura=false;
		this.isPermisoNuevoDetalleFactura=false;
		this.isPermisoActualizarDetalleFactura=false;
		this.isPermisoActualizarOriginalDetalleFactura=false;
		this.isPermisoEliminarDetalleFactura=false;
		this.isPermisoGuardarCambiosDetalleFactura=false;
		this.isPermisoConsultaDetalleFactura=false;
		this.isPermisoBusquedaDetalleFactura=false;
		this.isPermisoReporteDetalleFactura=false;		
		this.isPermisoOrdenDetalleFactura=false;		
		this.isPermisoPaginacionMedioDetalleFactura=false;		
		this.isPermisoPaginacionAltoDetalleFactura=false;
		this.isPermisoPaginacionTodoDetalleFactura=false;
		this.isPermisoCopiarDetalleFactura=false;		
		this.isPermisoVerFormDetalleFactura=false;		
		this.isPermisoDuplicarDetalleFactura=false;		
		this.isPermisoOrdenDetalleFactura=false;		
	}
	
	public void setPermisosUsuarioDetalleFactura(Boolean isPermiso) {
		this.isPermisoTodoDetalleFactura=isPermiso;
		this.isPermisoNuevoDetalleFactura=isPermiso;
		this.isPermisoActualizarDetalleFactura=isPermiso;
		this.isPermisoActualizarOriginalDetalleFactura=isPermiso;
		this.isPermisoEliminarDetalleFactura=isPermiso;
		this.isPermisoGuardarCambiosDetalleFactura=isPermiso;
		this.isPermisoConsultaDetalleFactura=isPermiso;
		this.isPermisoBusquedaDetalleFactura=isPermiso;
		this.isPermisoReporteDetalleFactura=isPermiso;
		this.isPermisoOrdenDetalleFactura=isPermiso;		
		this.isPermisoPaginacionMedioDetalleFactura=isPermiso;		
		this.isPermisoPaginacionAltoDetalleFactura=isPermiso;		
		this.isPermisoPaginacionTodoDetalleFactura=isPermiso;		
		this.isPermisoCopiarDetalleFactura=isPermiso;		
		this.isPermisoVerFormDetalleFactura=isPermiso;		
		this.isPermisoDuplicarDetalleFactura=isPermiso;
		this.isPermisoOrdenDetalleFactura=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleFactura(Boolean isPermiso) {
		//this.isPermisoTodoDetalleFactura=isPermiso;
		this.isPermisoNuevoDetalleFactura=isPermiso;
		this.isPermisoActualizarDetalleFactura=isPermiso;
		this.isPermisoActualizarOriginalDetalleFactura=isPermiso;
		this.isPermisoEliminarDetalleFactura=isPermiso;
		this.isPermisoGuardarCambiosDetalleFactura=isPermiso;
		//this.isPermisoConsultaDetalleFactura=isPermiso;
		//this.isPermisoBusquedaDetalleFactura=isPermiso;
		//this.isPermisoReporteDetalleFactura=isPermiso;
		//this.isPermisoOrdenDetalleFactura=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleFactura=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleFactura=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleFactura=isPermiso;		
		//this.isPermisoCopiarDetalleFactura=isPermiso;		
		//this.isPermisoDuplicarDetalleFactura=isPermiso;
		//this.isPermisoOrdenDetalleFactura=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleFacturaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleFactura(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleFacturaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleFacturaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleFacturaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleFacturaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleFactura() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleFacturaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleFactura=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleFactura=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleFactura=this.isPermisoActualizarDetalleFactura;
			this.isPermisoEliminarDetalleFactura=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleFactura=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleFactura=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleFactura=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleFactura=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleFactura=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleFactura=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleFactura=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleFactura=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleFactura=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleFactura=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleFactura=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleFactura.setToolTipText(this.jTableDatosDetalleFactura.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleFactura(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleFactura(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleFactura() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleFacturaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleFacturaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleFacturaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleFacturaParameterReturnGeneral detallefacturaReturnGeneral=new DetalleFacturaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_empresaDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_empresaDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_sucursalDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_sucursalDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_ejercicioDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_ejercicioDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_periodoDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_periodoDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_anioDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_anioDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_mesDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_mesDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_facturaDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_facturaDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_bodegaDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_bodegaDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_productoDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_productoDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_unidadDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_unidadDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detallefacturaConstantesFunciones.cargarid_centro_costoDetalleFactura)
					 || (this.esRecargarFks && this.detallefacturaConstantesFunciones.cargarid_centro_costoDetalleFactura)) {

					if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detallefacturaSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallefacturaReturnGeneral=detallefacturaLogic.cargarCombosLoteForeignKeyDetalleFactura(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalFactura,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalCentroCosto);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallefacturaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallefacturaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detallefacturaReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detallefacturaReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detallefacturaReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detallefacturaReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=detallefacturaReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallefacturaReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallefacturaReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallefacturaReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detallefacturaReturnGeneral.getcentrocostosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleFactura()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyCentroCosto();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.detallefacturaSessionBean==null) {
				this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detallefacturaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleFactura()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallefactura.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleFactura"));
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleFactura"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleFactura"));
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleFactura"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFactura"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFactura"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFactura"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFactura"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleFactura"));
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleFactura"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleFactura"));
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleFactura"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleFactura.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleFactura"));

						this.jComboBoxid_productoFK_IdProductoDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleFactura"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleFactura.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleFactura"));

						this.jComboBoxid_productoFK_IdProductoDetalleFactura.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleFactura"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleFactura()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detallefactura.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFactura();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleFactura(DetalleFactura detallefactura)throws Exception {	
		try {
			
			this.setActualFacturaForeignKey(detallefactura.getid_factura(),false,"Formulario");
			this.setActualBodegaForeignKey(detallefactura.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallefactura.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallefactura.getid_unidad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detallefactura.getid_centro_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleFactura(DetalleFactura detallefactura,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallefactura.getFactura()!=null && !sTipoEvento.equals("id_facturaDetalleFactura")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(detallefactura.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(detallefactura.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleFactura")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallefactura.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				if(detallefactura.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoDetalleFactura")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(detallefactura.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleFactura()throws Exception {	
		try {
			
			this.setActualFacturaForeignKey(this.detallefacturaConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallefacturaConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallefacturaConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallefacturaConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detallefacturaConstantesFunciones.getid_centro_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFactura()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleFactura()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleFactura()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleFactura()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	















	public void recargarFormDetalleFacturaBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleFacturaid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleFacturaProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleFacturaid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}




	
	



	public void recargarFormDetalleFacturaid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallefactura,jComboBoxGenericoProducto);
			}

			if(this.detallefactura.getid_bodega()!=null && this.detallefactura.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallefactura.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallefactura.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleFacturaid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallefactura,jComboBoxGenericoUnidad);
			}

			if(this.detallefactura.getid_producto()!=null && this.detallefactura.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallefactura.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallefactura.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleFacturaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleFacturaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleFacturaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallefacturaSessionBean=new DetalleFacturaSessionBean(); 
		this.detallefacturaConstantesFunciones=new DetalleFacturaConstantesFunciones(); 
		this.detallefacturaBean=new DetalleFactura();//(this.detallefacturaConstantesFunciones); 		
		this.detallefacturaReturnGeneral=new DetalleFacturaParameterReturnGeneral(); 
		
		this.detallefacturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallefacturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleFactura(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallefacturaConstantesFunciones=new DetalleFacturaConstantesFunciones(); 
			this.detallefacturaBean=new DetalleFactura();//this.detallefacturaConstantesFunciones); 			
			this.detallefacturaReturnGeneral=new DetalleFacturaParameterReturnGeneral(); 
		
			DetalleFacturaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Factura Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallefactura=new DetalleFactura();
			this.detallefacturas = new ArrayList<DetalleFactura>();
			this.detallefacturasAux = new ArrayList<DetalleFactura>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic=new DetalleFacturaLogic();
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			//this.detallefacturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallefacturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleFactura);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleFactura);	
					}
					
					if(this.jInternalFrameImportacionDetalleFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleFactura);							
					}
					
				}
				
				if(this.jInternalFrameTotalesDetalleFactura!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleFactura);
				}
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetalleFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleFactura);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleFactura);
				this.jInternalFrameDetalleFormDetalleFactura.setVisible(false);
				this.jInternalFrameDetalleFormDetalleFactura.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleFactura);
					this.jInternalFrameReporteDinamicoDetalleFactura.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleFactura.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleFactura);
					this.jInternalFrameImportacionDetalleFactura.setVisible(false);
					this.jInternalFrameImportacionDetalleFactura.setSelected(false);
				}
				
				
			}
			
			if(this.jInternalFrameTotalesDetalleFactura!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleFactura);
				this.jInternalFrameTotalesDetalleFactura.setVisible(false);
				this.jInternalFrameTotalesDetalleFactura.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetalleFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleFactura);
					this.jInternalFrameOrderByDetalleFactura.setVisible(false);
					this.jInternalFrameOrderByDetalleFactura.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleFacturaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleFacturaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallefacturaReturnGeneral=new DetalleFacturaParameterReturnGeneral();
			
			this.detallefacturaParameterGeneral=new DetalleFacturaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallefacturaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleFacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallefacturaSessionBean.getEsGuardarRelacionado(),this.detallefacturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleFacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallefacturaSessionBean.getEsGuardarRelacionado(),this.detallefacturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaDuplicarDetalleFactura=true;
			this.isVisibilidadCeldaCopiarDetalleFactura=true;
			this.isVisibilidadCeldaVerFormDetalleFactura=true;
			this.isVisibilidadCeldaOrdenDetalleFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=false;
			this.isVisibilidadCeldaGuardarDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleFactura();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleFactura(false);
			
			this.setPermisosUsuarioDetalleFactura();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaSessionBean.getEsGuardarRelacionado() 
				|| (this.detallefacturaSessionBean.getEsGuardarRelacionado() && this.detallefacturaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleFacturaClasesRelacionadas();
			}
			
			if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleFacturaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleFactura();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleFactura();
			}
			
			if(!this.isPermisoBusquedaDetalleFactura) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleFactura,this.isPermisoPaginacionMedioDetalleFactura,this.isPermisoPaginacionTodoDetalleFactura);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleFacturaConstantesFunciones.getTiposSeleccionarDetalleFactura());
				
				this.tiposColumnasSelect=DetalleFacturaConstantesFunciones.getTiposSeleccionarDetalleFactura(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleFactura();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleFactura(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleFactura(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFactura() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.facturaLogic=new FacturaLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallefacturaImplementable= (DetalleFacturaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleFacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallefacturaImplementableHome= (DetalleFacturaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleFacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallefacturas= new ArrayList<DetalleFactura>();
			this.detallefacturasEliminados= new ArrayList<DetalleFactura>();
						
			this.isEsNuevoDetalleFactura=false;
			this.esParaAccionDesdeFormularioDetalleFactura=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idFacturaActual=0L;
			this.idProductoActual=0L;
			this.idCentroCostoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleFactura(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleFactura();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleFacturaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleFacturaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleFactura(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleFactura();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleFactura();
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleFactura.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleFactura(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleFactura: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleFactura() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleFactura")) {
				iIndex=this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleFactura();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleFactura(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleFactura(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleFacturaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleFactura();
		
		this.cargarCombosFrameForeignKeyDetalleFactura();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleFactura();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleFactura();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			
			if(jTableDatosDetalleFactura.getRowCount()>=1) {
				jTableDatosDetalleFactura.removeRowSelectionInterval(0, jTableDatosDetalleFactura.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleFactura=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleFactura(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleFactura(true);			
			//this.detallefactura=new DetalleFactura();
			//this.detallefactura.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFactura(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFactura() ;
			
			if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFactura(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallefactura);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);				
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleFactura: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleFactura.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleFactura.getSelectedRows().length;			
			}
			
			detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleFactura--;			
				//DetalleFactura detallefacturaAux= new DetalleFactura();			
				//detallefacturaAux.setId(this.iIdNuevoDetalleFactura);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleFactura detallefacturaOrigen=new DetalleFactura();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleFactura detallefacturaOrigen : detallefacturasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallefacturaOrigen =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaOrigen =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleFactura();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallefactura.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleFactura(detallefacturaOrigen,this.detallefactura,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallefacturaLogic.getDetalleFacturas().add(this.detallefacturaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallefacturas.add(this.detallefacturaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleFactura(false);
				
				this.jTableDatosDetalleFactura.setRowSelectionInterval(this.getIndiceNuevoDetalleFactura(), this.getIndiceNuevoDetalleFactura());
				
				int iLastRow =  this.jTableDatosDetalleFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFactura(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();									
		
			DetalleFactura detallefacturaOrigen=new DetalleFactura();
			DetalleFactura detallefacturaDestino=new DetalleFactura();
				
			detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleFactura.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallefacturasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleFactura.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaOrigen =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallefacturaOrigen =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaDestino =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallefacturaDestino =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallefacturaOrigen =detallefacturasSeleccionados.get(0);
				detallefacturaDestino =detallefacturasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleFactura(detallefacturaOrigen,detallefacturaDestino,true,false);
				
				detallefacturaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallefacturaDestino,detallefacturaLogic.getDetalleFacturas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaDestino,detallefacturas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleFactura(false);
				
				//this.jTableDatosDetalleFactura.setRowSelectionInterval(this.getIndiceNuevoDetalleFactura(), this.getIndiceNuevoDetalleFactura());
				
				int iLastRow =  this.jTableDatosDetalleFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFactura(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleFactura.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleFactura.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetalleFactura.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetalleFactura.setVisible(!isVisible);
			this.jPanelPaginacionDetalleFactura.setVisible(!isVisible);
			this.jPanelAccionesDetalleFactura.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleFactura();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetalleFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetalleFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetalleFactura();
			
			this.abrirFrameTotalesDetalleFactura();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetalleFactura();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetalleFactura();
			
			this.abrirFrameOrderByDetalleFactura();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetalleFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleFactura(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleFactura);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleFactura.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleFactura.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleFactura.setSize(this.jInternalFrameDetalleFormDetalleFactura.iWidthFormulario,this.jInternalFrameDetalleFormDetalleFactura.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleFactura.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleFactura.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleFactura.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleFactura.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleFactura.jContentPaneDetalleDetalleFactura.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleFactura.jContentPaneDetalleDetalleFactura.getWidth(),DetalleFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleFactura.jContentPaneDetalleDetalleFactura.getWidth(),DetalleFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleFactura.jContentPaneDetalleDetalleFactura.getWidth(),DetalleFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleFactura.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleFactura.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetalleFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleFactura==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleFactura,false,this);
				} else {
					this.jInternalFrameOrderByDetalleFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleFactura,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleFactura);
				this.jInternalFrameOrderByDetalleFactura.setVisible(false);
				this.jInternalFrameOrderByDetalleFactura.setSelected(false);
				
				this.jInternalFrameOrderByDetalleFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleFactura"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleFactura();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetalleFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleFactura==null) {
				
				this.jInternalFrameImportacionDetalleFactura=new ImportacionJInternalFrame(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleFactura);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleFactura);
				this.jInternalFrameImportacionDetalleFactura.setVisible(false);
				this.jInternalFrameImportacionDetalleFactura.setSelected(false);


				this.jInternalFrameImportacionDetalleFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleFactura"));
				this.jInternalFrameImportacionDetalleFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleFactura"));
				this.jInternalFrameImportacionDetalleFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleFactura"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetalleFactura() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleFactura==null) {
				this.jInternalFrameReporteDinamicoDetalleFactura=new ReporteDinamicoJInternalFrame(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleFactura);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleFactura);
				this.jInternalFrameReporteDinamicoDetalleFactura.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleFactura.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFactura"));
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFactura"));
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFactura"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFactura();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	public void abrirInicializarFrameTotalesDetalleFactura() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetalleFactura==null) {
				this.jInternalFrameTotalesDetalleFactura=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetalleFactura,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleFactura);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleFactura);
				this.jInternalFrameTotalesDetalleFactura.setVisible(false);
				this.jInternalFrameTotalesDetalleFactura.setSelected(false);


				this.jInternalFrameTotalesDetalleFactura.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleFactura"));
								
				this.inicializarActualizarBindingTablaTotalesDetalleFactura();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		
					
	public void cerrarFrameDetalleDetalleFactura() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleFactura);
			
	       	this.jInternalFrameDetalleFormDetalleFactura.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleFactura.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleFactura.dispose();
			//this.jInternalFrameDetalleFormDetalleFactura=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetalleFactura() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleFactura.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetalleFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleFactura.setVisible(true);
	        this.jInternalFrameImportacionDetalleFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	public void abrirFrameTotalesDetalleFactura() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleFactura.setVisible(true);
	        this.jInternalFrameTotalesDetalleFactura.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetalleFactura() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleFactura.setVisible(false);
	        this.jInternalFrameTotalesDetalleFactura.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	
	public void abrirFrameOrderByDetalleFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleFactura.setVisible(true);
	        this.jInternalFrameOrderByDetalleFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetalleFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleFactura.setVisible(false);
	        this.jInternalFrameOrderByDetalleFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetalleFactura() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleFactura.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetalleFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleFactura.setVisible(false);
	        this.jInternalFrameImportacionDetalleFactura.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleFactura.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleFactura(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleFactura(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleFactura(true);
			//this.isEsNuevoDetalleFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFactura(false) ;
			
			if(detallefacturaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFactura(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleFacturaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleFactura(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleFactura(true);
			//this.isEsNuevoDetalleFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallefactura.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleFactura(false) ;
			
			if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFactura(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Factura")) {
				if(!this.detallefacturaConstantesFunciones.cargarid_facturaDetalleFactura) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleFactura(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("Producto")) {
				if(!this.detallefacturaConstantesFunciones.cargarid_productoDetalleFactura) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleFactura(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.detallefacturaConstantesFunciones.cargarid_centro_costoDetalleFactura) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleFactura(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleFactura(false);
			
			//if(!this.isEsNuevoDetalleFactura) {								
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				
			}
			
			if(this.permiteMantenimiento(this.detallefactura)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleFactura=true;
					this.inicializarActualizarBindingTablaDetalleFactura(false);
					this.isEsNuevoDetalleFactura=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleFactura=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleFactura=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFactura(false);
				
				this.habilitarDeshabilitarControlesDetalleFactura(false);
			
												
				
				if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleFactura();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleFacturaActionPerformed(evt,detallefacturaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleFactura(this.detallefactura,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallefacturaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallefactura.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				this.detallefactura.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				this.detallefactura.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallefactura)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleFacturaModel) this.jTableDatosDetalleFactura.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleFactura=true;
				this.inicializarActualizarBindingTablaDetalleFactura(false);
				this.isEsNuevoDetalleFactura=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFactura(false);
				
				this.habilitarDeshabilitarControlesDetalleFactura(false);
				
				
				
				if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleFactura();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleFactura.getRowCount()>=1) {
				jTableDatosDetalleFactura.removeRowSelectionInterval(0, jTableDatosDetalleFactura.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleFactura(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleFactura(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFactura(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFactura(false) ;
			
			this.isEsNuevoDetalleFactura=false;
			
			if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleFactura();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleFactura(false);
				
				//SI ES MANUAL
				if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleFactura();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleFactura--;			
			//DetalleFactura detallefacturaAux= new DetalleFactura();			
			//detallefacturaAux.setId(this.iIdNuevoDetalleFactura);
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleFactura();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
			
			this.detallefactura.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallefacturaLogic.getDetalleFacturas().add(this.detallefacturaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallefacturas.add(this.detallefacturaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleFactura(false);
			
			this.jTableDatosDetalleFactura.setRowSelectionInterval(this.getIndiceNuevoDetalleFactura(), this.getIndiceNuevoDetalleFactura());
			
			int iLastRow =  this.jTableDatosDetalleFactura.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleFactura.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleFactura.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleFactura(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFactura(false);
			
			//SI ES MANUAL
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFactura();
			}
			
			//this.abrirFrameTreeDetalleFactura();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle FacturaS ?", "MANTENIMIENTO DE Detalle Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleFactura.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleFactura();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallefacturaReturnGeneral=detallefacturaLogic.procesarImportacionDetalleFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallefacturaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleFacturaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleFactura.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleFactura.setFileImportacion(this.jInternalFrameImportacionDetalleFactura.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleFactura.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleFactura.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleFactura.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleFactura.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		

		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleFacturaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleFacturaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_PRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVAVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICEVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_MONTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleFactura.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE:
					sNombreCampoCategoria="codigo_lote";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoria="precio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoria="iva_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoria="ice_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoria="descuento2";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_MONTO:
					sNombreCampoCategoria="monto";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE:
					sNombreCampoCategoriaValor="codigo_lote";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoriaValor="precio";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoriaValor="iva_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoriaValor="ice_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoriaValor="descuento2";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_MONTO:
					sNombreCampoCategoriaValor="monto";
					break;

				case DetalleFacturaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_lote");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_PRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"precio");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVAVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_valor");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICEVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice_valor");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento2");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_MONTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto");
					break;

				case DetalleFacturaConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleFacturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getcodigo_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_PRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_PRECIO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getprecio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_IVAVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getiva_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_ICEVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getice_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getdescuento2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_MONTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_MONTO);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getmonto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(DetalleFactura detallefactura:detallefacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefactura.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleFactura(row);				
			//	iRow++;
			//}				
			
			//for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleFactura(detallefacturaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFactura(false);
			
			//SI ES MANUAL
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFactura();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFactura(false);
			
			//SI ES MANUAL
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleFactura();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFactura(false);
			
			//SI ES MANUAL
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleFactura();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleFactura() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleFactura.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleFactura.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleFactura.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleFactura.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleFactura.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleFactura.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleFactura.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleFactura(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleFactura(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleFactura(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleFactura(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleFactura(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleFactura(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFactura(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleFactura(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleFactura() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleFactura();
		
		this.inicializarActualizarBindingBotonesManualDetalleFactura(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleFactura();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFactura() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFactura(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFactura(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleFactura.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleFactura.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleFactura.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionNuevoDetalleFactura.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionSinCerrarDetalleFactura.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionSinMensajeDetalleFactura.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleFactura.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleFactura.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetalleFactura.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
				this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionNuevoDetalleFactura.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionSinCerrarDetalleFactura.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleFactura.jCheckBoxPostAccionSinMensajeDetalleFactura.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetalleFactura.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleFactura.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleFactura.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleFactura.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleFactura.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleFactura.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleFactura.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleFactura(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFactura(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFactura() throws Exception {
		try	{
			if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleFactura();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleFactura() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleFactura() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleFactura.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleFactura.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleFactura.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleFactura.addItem(reporte);
			}
			
			
			if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleFactura.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleFactura.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFactura();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFactura() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
				this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
				this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleFacturaConstantesFunciones.getTiposSeleccionarDetalleFactura(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleFacturaConstantesFunciones.getTiposSeleccionarDetalleFactura(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleFacturaConstantesFunciones.getTiposSeleccionarDetalleFactura(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFactura.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleFactura.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetalleFactura()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaDetalleFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleFactura.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleFactura.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleFactura(Boolean esInicializar) throws Exception {				
		if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleFactura();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleFactura() throws Exception {
		this.inicializarActualizarBindingTablaDetalleFactura(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetalleFactura() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleFacturaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	public void inicializarActualizarBindingTablaTotalesDetalleFactura() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetalleFactura(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallefacturaLogic.getDetalleFacturas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallefacturas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleFactura.setModel(new DetalleFacturaModel(this.detallefacturaLogic.getDetalleFacturas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleFactura.setModel(new DetalleFacturaModel(this.detallefacturas,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetalleFactura!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleFactura.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
			}
							
			
			
			if(this.jInternalFrameOrderByDetalleFactura!=null && this.jInternalFrameOrderByDetalleFactura.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleFactura();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleFacturaConstantesFunciones.SCLASSWEBTITULO,detallefacturaConstantesFunciones.resaltarSeleccionarDetalleFactura,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleFacturaConstantesFunciones.SCLASSWEBTITULO,detallefacturaConstantesFunciones.resaltarSeleccionarDetalleFactura,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_ID));

		if(this.detallefacturaConstantesFunciones.mostraridDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltaridDetalleFactura,this.detallefacturaConstantesFunciones.activaridDetalleFactura,iSizeTabla,this,true,"idDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltaridDetalleFactura,this.detallefacturaConstantesFunciones.activaridDetalleFactura,this,true,"idDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallefacturaConstantesFunciones.mostrarid_empresaDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_empresaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_empresaDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_empresaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_empresaDetalleFactura,false,"id_empresaDetalleFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallefacturaConstantesFunciones.mostrarid_sucursalDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallefacturaConstantesFunciones.resaltarid_sucursalDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_sucursalDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallefacturaConstantesFunciones.resaltarid_sucursalDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_sucursalDetalleFactura,false,"id_sucursalDetalleFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detallefacturaConstantesFunciones.mostrarid_ejercicioDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_ejercicioDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_ejercicioDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_ejercicioDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_ejercicioDetalleFactura,false,"id_ejercicioDetalleFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDPERIODO));

		if(this.detallefacturaConstantesFunciones.mostrarid_periodoDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_periodoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_periodoDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_periodoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_periodoDetalleFactura,false,"id_periodoDetalleFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDANIO));

		if(this.detallefacturaConstantesFunciones.mostrarid_anioDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_anioDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_anioDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_anioDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_anioDetalleFactura,true,"id_anioDetalleFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDMES));

		if(this.detallefacturaConstantesFunciones.mostrarid_mesDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detallefacturaConstantesFunciones.resaltarid_mesDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_mesDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detallefacturaConstantesFunciones.resaltarid_mesDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_mesDetalleFactura,true,"id_mesDetalleFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDFACTURA));

		if(this.detallefacturaConstantesFunciones.mostrarid_facturaDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_facturaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_facturaDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_facturaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_facturaDetalleFactura,true,"id_facturaDetalleFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallefacturaConstantesFunciones.mostrarid_bodegaDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_bodegaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_bodegaDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallefacturaConstantesFunciones.resaltarid_bodegaDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_bodegaDetalleFactura,true,"id_bodegaDetalleFactura","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallefacturaConstantesFunciones.mostrarid_productoDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_productoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_productoDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_productoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_productoDetalleFactura,true,"id_productoDetalleFactura","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallefacturaConstantesFunciones.mostrarid_unidadDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallefacturaConstantesFunciones.resaltarid_unidadDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_unidadDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallefacturaConstantesFunciones.resaltarid_unidadDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_unidadDetalleFactura,true,"id_unidadDetalleFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE));

		if(this.detallefacturaConstantesFunciones.mostrarcodigo_loteDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaConstantesFunciones.resaltarcodigo_loteDetalleFactura,this.detallefacturaConstantesFunciones.activarcodigo_loteDetalleFactura,iSizeTabla,this,true,"codigo_loteDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarcodigo_loteDetalleFactura,this.detallefacturaConstantesFunciones.activarcodigo_loteDetalleFactura,this,true,"codigo_loteDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.detallefacturaConstantesFunciones.mostrarid_centro_costoDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_centro_costoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_centro_costoDetalleFactura,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallefacturaConstantesFunciones.resaltarid_centro_costoDetalleFactura,this,this.detallefacturaConstantesFunciones.activarid_centro_costoDetalleFactura,true,"id_centro_costoDetalleFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_FECHA));

		if(this.detallefacturaConstantesFunciones.mostrarfechaDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detallefacturaConstantesFunciones.resaltarfechaDetalleFactura,this.detallefacturaConstantesFunciones.activarfechaDetalleFactura,iSizeTabla,this,true,"fechaDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detallefacturaConstantesFunciones.resaltarfechaDetalleFactura,this.detallefacturaConstantesFunciones.activarfechaDetalleFactura,this,true,"fechaDetalleFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallefacturaConstantesFunciones.mostrardescripcionDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaConstantesFunciones.resaltardescripcionDetalleFactura,this.detallefacturaConstantesFunciones.activardescripcionDetalleFactura,iSizeTabla,this,true,"descripcionDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltardescripcionDetalleFactura,this.detallefacturaConstantesFunciones.activardescripcionDetalleFactura,this,true,"descripcionDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_CANTIDAD));

		if(this.detallefacturaConstantesFunciones.mostrarcantidadDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltarcantidadDetalleFactura,this.detallefacturaConstantesFunciones.activarcantidadDetalleFactura,iSizeTabla,this,true,"cantidadDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarcantidadDetalleFactura,this.detallefacturaConstantesFunciones.activarcantidadDetalleFactura,this,true,"cantidadDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_PRECIO));

		if(this.detallefacturaConstantesFunciones.mostrarprecioDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_PRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltarprecioDetalleFactura,this.detallefacturaConstantesFunciones.activarprecioDetalleFactura,iSizeTabla,this,true,"precioDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarprecioDetalleFactura,this.detallefacturaConstantesFunciones.activarprecioDetalleFactura,this,true,"precioDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IVA));

		if(this.detallefacturaConstantesFunciones.mostrarivaDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltarivaDetalleFactura,this.detallefacturaConstantesFunciones.activarivaDetalleFactura,iSizeTabla,this,true,"ivaDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarivaDetalleFactura,this.detallefacturaConstantesFunciones.activarivaDetalleFactura,this,true,"ivaDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_IVAVALOR));

		if(this.detallefacturaConstantesFunciones.mostrariva_valorDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_IVAVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltariva_valorDetalleFactura,this.detallefacturaConstantesFunciones.activariva_valorDetalleFactura,iSizeTabla,this,true,"iva_valorDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltariva_valorDetalleFactura,this.detallefacturaConstantesFunciones.activariva_valorDetalleFactura,this,true,"iva_valorDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_ICE));

		if(this.detallefacturaConstantesFunciones.mostrariceDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltariceDetalleFactura,this.detallefacturaConstantesFunciones.activariceDetalleFactura,iSizeTabla,this,true,"iceDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltariceDetalleFactura,this.detallefacturaConstantesFunciones.activariceDetalleFactura,this,true,"iceDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_ICEVALOR));

		if(this.detallefacturaConstantesFunciones.mostrarice_valorDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_ICEVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltarice_valorDetalleFactura,this.detallefacturaConstantesFunciones.activarice_valorDetalleFactura,iSizeTabla,this,true,"ice_valorDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarice_valorDetalleFactura,this.detallefacturaConstantesFunciones.activarice_valorDetalleFactura,this,true,"ice_valorDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_DESCUENTO));

		if(this.detallefacturaConstantesFunciones.mostrardescuentoDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltardescuentoDetalleFactura,this.detallefacturaConstantesFunciones.activardescuentoDetalleFactura,iSizeTabla,this,true,"descuentoDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltardescuentoDetalleFactura,this.detallefacturaConstantesFunciones.activardescuentoDetalleFactura,this,true,"descuentoDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.detallefacturaConstantesFunciones.mostrardescuento_valorDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltardescuento_valorDetalleFactura,this.detallefacturaConstantesFunciones.activardescuento_valorDetalleFactura,iSizeTabla,this,true,"descuento_valorDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltardescuento_valorDetalleFactura,this.detallefacturaConstantesFunciones.activardescuento_valorDetalleFactura,this,true,"descuento_valorDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2));

		if(this.detallefacturaConstantesFunciones.mostrardescuento2DetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltardescuento2DetalleFactura,this.detallefacturaConstantesFunciones.activardescuento2DetalleFactura,iSizeTabla,this,true,"descuento2DetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltardescuento2DetalleFactura,this.detallefacturaConstantesFunciones.activardescuento2DetalleFactura,this,true,"descuento2DetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.detallefacturaConstantesFunciones.mostrarsub_totalDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltarsub_totalDetalleFactura,this.detallefacturaConstantesFunciones.activarsub_totalDetalleFactura,iSizeTabla,this,true,"sub_totalDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltarsub_totalDetalleFactura,this.detallefacturaConstantesFunciones.activarsub_totalDetalleFactura,this,true,"sub_totalDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,DetalleFacturaConstantesFunciones.LABEL_TOTAL));

		if(this.detallefacturaConstantesFunciones.mostrartotalDetalleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaConstantesFunciones.resaltartotalDetalleFactura,this.detallefacturaConstantesFunciones.activartotalDetalleFactura,iSizeTabla,this,true,"totalDetalleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaConstantesFunciones.resaltartotalDetalleFactura,this.detallefacturaConstantesFunciones.activartotalDetalleFactura,this,true,"totalDetalleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleFactura.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleFactura.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallefacturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleFactura.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleFactura.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleFactura.moveColumn(this.jTableDatosDetalleFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleFactura.moveColumn(this.jTableDatosDetalleFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleFactura.moveColumn(this.jTableDatosDetalleFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleFactura.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleFactura.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleFactura,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleFactura.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleFactura.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleFactura.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleFactura.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleFactura.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallefacturaLogic.getDetalleFacturas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallefacturas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleFactura.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleFactura();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleFactura=false;
					
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleFactura==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallefactura.getsType().equals("DUPLICADO")
				   || this.detallefactura.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleFactura=true;
				
				} else {
					this.isEsNuevoDetalleFactura=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					if(this.detallefactura.getId()>=0 && !this.detallefactura.getIsNew()) {						
						this.isEsNuevoDetalleFactura=false;
						
					} else {
						this.isEsNuevoDetalleFactura=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleFactura(esRelaciones);						
				
				this.seleccionarDetalleFactura(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallefactura.getId()<0) {
					this.isEsNuevoDetalleFactura=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleFactura(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleFactura(evt,rowIndex);
				}	
				
				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleFactura: " + this.dDif); 
					}
				}								
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleFactura(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallefactura)) {
					if(this.detallefactura.getId()>0) {
						this.detallefactura.setIsDeleted(true);
						
						this.detallefacturasEliminados.add(this.detallefactura);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallefacturaLogic.getDetalleFacturas().remove(this.detallefactura);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallefacturas.remove(this.detallefactura);				
					}
					
					
					((DetalleFacturaModel) this.jTableDatosDetalleFactura.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFactura(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleFactura(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleFactura) {
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleFactura.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleFactura(this.detallefactura);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.detallefacturaConstantesFunciones.cargarid_empresaDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_empresaDetalleFactura) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallefactura.getid_empresa());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallefactura.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallefactura.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallefactura.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallefacturaConstantesFunciones.cargarid_sucursalDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_sucursalDetalleFactura) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallefactura.getid_sucursal());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallefactura.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallefactura.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallefactura.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detallefacturaConstantesFunciones.cargarid_ejercicioDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_ejercicioDetalleFactura) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detallefactura.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detallefactura.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detallefactura.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detallefactura.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detallefacturaConstantesFunciones.cargarid_periodoDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_periodoDetalleFactura) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detallefactura.getid_periodo());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detallefactura.getPeriodo()!=null) {
							this.periodosForeignKey.add(detallefactura.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detallefactura.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detallefacturaConstantesFunciones.cargarid_anioDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_anioDetalleFactura) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detallefactura.getid_anio());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detallefactura.getAnio()!=null) {
							this.aniosForeignKey.add(detallefactura.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detallefactura.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detallefacturaConstantesFunciones.cargarid_mesDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_mesDetalleFactura) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detallefactura.getid_mes());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detallefactura.getMes()!=null) {
							this.messForeignKey.add(detallefactura.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detallefactura.getid_mes(),false,"Formulario");

					//Factura
					if(!this.detallefacturaConstantesFunciones.cargarid_facturaDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_facturaDetalleFactura) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.detallefactura.getid_factura());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(detallefactura.getFactura()!=null) {
							this.facturasForeignKey.add(detallefactura.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.detallefactura.getid_factura(),false,"Formulario");

					//Bodega
					if(!this.detallefacturaConstantesFunciones.cargarid_bodegaDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_bodegaDetalleFactura) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallefactura.getid_bodega());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallefactura.getBodega()!=null) {
							this.bodegasForeignKey.add(detallefactura.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallefactura.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallefacturaConstantesFunciones.cargarid_productoDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_productoDetalleFactura) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallefactura.getid_producto());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallefactura.getProducto()!=null) {
							this.productosForeignKey.add(detallefactura.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallefactura.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallefacturaConstantesFunciones.cargarid_unidadDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_unidadDetalleFactura) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallefactura.getid_unidad());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallefactura.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallefactura.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallefactura.getid_unidad(),false,"Formulario");

					//CentroCosto
					if(!this.detallefacturaConstantesFunciones.cargarid_centro_costoDetalleFactura || this.detallefacturaConstantesFunciones.event_dependid_centro_costoDetalleFactura) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detallefactura.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleFactura(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detallefactura.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detallefactura.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detallefactura.getid_centro_costo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleFactura("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleFactura(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFactura() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleFactura(DetalleFactura detallefactura) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleFactura(detallefactura,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleFactura(DetalleFactura detallefactura,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleFactura(detallefactura);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleFactura(detallefactura,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleFactura(detallefactura);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleFactura(DetalleFactura detallefactura) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setText(detallefactura.getId().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setText(detallefactura.getcodigo_lote());
			this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setDate(detallefactura.getfecha());
			this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setText(detallefactura.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setText(detallefactura.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setText(detallefactura.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setText(detallefactura.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setText(detallefactura.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setText(detallefactura.getice().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setText(detallefactura.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setText(detallefactura.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setText(detallefactura.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setText(detallefactura.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setText(detallefactura.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setText(detallefactura.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleFactura detallefacturaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallefacturaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleFactura detallefacturaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallefacturaLocal=this.detallefactura;
			} else {
				detallefacturaLocal=this.detallefacturaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallefacturaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleFactura(detallefacturaLocal,true);
					
					if(detallefacturaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallefacturaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallefacturaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleFactura(DetalleFactura detallefactura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleFactura(detallefactura,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(detallefactura);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleFactura(DetalleFactura detallefactura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleFactura(detallefactura,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleFactura(DetalleFactura detallefactura,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.getText()==null || this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.getText()=="" || this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setText("0");
			}

			if(conColumnasBase) {detallefactura.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelIdDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setcodigo_lote(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelcodigo_loteDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setfecha(this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelfechaDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setdescripcion(this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescripcionDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelcantidadDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setprecio(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_PRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelprecioDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setiva(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelivaDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setiva_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_IVAVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeliva_valorDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setice(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeliceDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setice_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_ICEVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelice_valorDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuentoDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento_valorDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setdescuento2(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeldescuento2DetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabelsub_totalDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefactura.settotal(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFactura.jLabeltotalDetalleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleFactura(DetalleFactura detallefacturaBean,DetalleFactura detallefactura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleFactura(DetalleFactura detallefacturaOrigen,DetalleFactura detallefactura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallefacturaOrigen.getId()!=null && !detallefacturaOrigen.getId().equals(0L))) {detallefactura.setId(detallefacturaOrigen.getId());}}
			if(conDefault || (!conDefault && detallefacturaOrigen.getcodigo_lote()!=null && !detallefacturaOrigen.getcodigo_lote().equals(""))) {detallefactura.setcodigo_lote(detallefacturaOrigen.getcodigo_lote());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getfecha()!=null && !detallefacturaOrigen.getfecha().equals(new Date()))) {detallefactura.setfecha(detallefacturaOrigen.getfecha());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getdescripcion()!=null && !detallefacturaOrigen.getdescripcion().equals(""))) {detallefactura.setdescripcion(detallefacturaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getcantidad()!=null && !detallefacturaOrigen.getcantidad().equals(0))) {detallefactura.setcantidad(detallefacturaOrigen.getcantidad());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getprecio()!=null && !detallefacturaOrigen.getprecio().equals(0.0))) {detallefactura.setprecio(detallefacturaOrigen.getprecio());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getiva()!=null && !detallefacturaOrigen.getiva().equals(0.0))) {detallefactura.setiva(detallefacturaOrigen.getiva());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getiva_valor()!=null && !detallefacturaOrigen.getiva_valor().equals(0.0))) {detallefactura.setiva_valor(detallefacturaOrigen.getiva_valor());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getice()!=null && !detallefacturaOrigen.getice().equals(0.0))) {detallefactura.setice(detallefacturaOrigen.getice());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getice_valor()!=null && !detallefacturaOrigen.getice_valor().equals(0.0))) {detallefactura.setice_valor(detallefacturaOrigen.getice_valor());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getdescuento()!=null && !detallefacturaOrigen.getdescuento().equals(0.0))) {detallefactura.setdescuento(detallefacturaOrigen.getdescuento());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getdescuento_valor()!=null && !detallefacturaOrigen.getdescuento_valor().equals(0.0))) {detallefactura.setdescuento_valor(detallefacturaOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getdescuento2()!=null && !detallefacturaOrigen.getdescuento2().equals(0.0))) {detallefactura.setdescuento2(detallefacturaOrigen.getdescuento2());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getsub_total()!=null && !detallefacturaOrigen.getsub_total().equals(0.0))) {detallefactura.setsub_total(detallefacturaOrigen.getsub_total());}
			if(conDefault || (!conDefault && detallefacturaOrigen.gettotal()!=null && !detallefacturaOrigen.gettotal().equals(0.0))) {detallefactura.settotal(detallefacturaOrigen.gettotal());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getmonto()!=null && !detallefacturaOrigen.getmonto().equals(0.0))) {detallefactura.setmonto(detallefacturaOrigen.getmonto());}
			if(conDefault || (!conDefault && detallefacturaOrigen.getnombre()!=null && !detallefacturaOrigen.getnombre().equals(""))) {detallefactura.setnombre(detallefacturaOrigen.getnombre());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleFactura(DetalleFactura detallefactura) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setText(detallefactura.getId().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setText(detallefactura.getcodigo_lote());
			this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setDate(detallefactura.getfecha());
			this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setText(detallefactura.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setText(detallefactura.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setText(detallefactura.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setText(detallefactura.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setText(detallefactura.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setText(detallefactura.getice().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setText(detallefactura.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setText(detallefactura.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setText(detallefactura.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setText(detallefactura.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setText(detallefactura.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setText(detallefactura.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleFactura(DetalleFacturaBean detallefacturaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setText(detallefacturaBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setText(detallefacturaBean.getcodigo_lote());
			this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setDate(detallefacturaBean.getfecha());
			this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setText(detallefacturaBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setText(detallefacturaBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setText(detallefacturaBean.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setText(detallefacturaBean.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setText(detallefacturaBean.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setText(detallefacturaBean.getice().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setText(detallefacturaBean.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setText(detallefacturaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setText(detallefacturaBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setText(detallefacturaBean.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setText(detallefacturaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setText(detallefacturaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleFactura(DetalleFacturaParameterReturnGeneral detallefacturaReturnGeneral,DetalleFacturaBean detallefacturaBean,Boolean conDefault) throws Exception { 
		try {
			DetalleFactura detallefacturaLocal=new DetalleFactura();
			
			detallefacturaLocal=detallefacturaReturnGeneral.getDetalleFactura();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallefacturaLocal.getId()!=null && !detallefacturaLocal.getId().equals(0L))) {detallefacturaBean.setId(detallefacturaLocal.getId());}}
			if(conDefault || (!conDefault && detallefacturaLocal.getcodigo_lote()!=null && !detallefacturaLocal.getcodigo_lote().equals(""))) {detallefacturaBean.setcodigo_lote(detallefacturaLocal.getcodigo_lote());}
			if(conDefault || (!conDefault && detallefacturaLocal.getfecha()!=null && !detallefacturaLocal.getfecha().equals(new Date()))) {detallefacturaBean.setfecha(detallefacturaLocal.getfecha());}
			if(conDefault || (!conDefault && detallefacturaLocal.getdescripcion()!=null && !detallefacturaLocal.getdescripcion().equals(""))) {detallefacturaBean.setdescripcion(detallefacturaLocal.getdescripcion());}
			if(conDefault || (!conDefault && detallefacturaLocal.getcantidad()!=null && !detallefacturaLocal.getcantidad().equals(0))) {detallefacturaBean.setcantidad(detallefacturaLocal.getcantidad());}
			if(conDefault || (!conDefault && detallefacturaLocal.getprecio()!=null && !detallefacturaLocal.getprecio().equals(0.0))) {detallefacturaBean.setprecio(detallefacturaLocal.getprecio());}
			if(conDefault || (!conDefault && detallefacturaLocal.getiva()!=null && !detallefacturaLocal.getiva().equals(0.0))) {detallefacturaBean.setiva(detallefacturaLocal.getiva());}
			if(conDefault || (!conDefault && detallefacturaLocal.getiva_valor()!=null && !detallefacturaLocal.getiva_valor().equals(0.0))) {detallefacturaBean.setiva_valor(detallefacturaLocal.getiva_valor());}
			if(conDefault || (!conDefault && detallefacturaLocal.getice()!=null && !detallefacturaLocal.getice().equals(0.0))) {detallefacturaBean.setice(detallefacturaLocal.getice());}
			if(conDefault || (!conDefault && detallefacturaLocal.getice_valor()!=null && !detallefacturaLocal.getice_valor().equals(0.0))) {detallefacturaBean.setice_valor(detallefacturaLocal.getice_valor());}
			if(conDefault || (!conDefault && detallefacturaLocal.getdescuento()!=null && !detallefacturaLocal.getdescuento().equals(0.0))) {detallefacturaBean.setdescuento(detallefacturaLocal.getdescuento());}
			if(conDefault || (!conDefault && detallefacturaLocal.getdescuento_valor()!=null && !detallefacturaLocal.getdescuento_valor().equals(0.0))) {detallefacturaBean.setdescuento_valor(detallefacturaLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && detallefacturaLocal.getdescuento2()!=null && !detallefacturaLocal.getdescuento2().equals(0.0))) {detallefacturaBean.setdescuento2(detallefacturaLocal.getdescuento2());}
			if(conDefault || (!conDefault && detallefacturaLocal.getsub_total()!=null && !detallefacturaLocal.getsub_total().equals(0.0))) {detallefacturaBean.setsub_total(detallefacturaLocal.getsub_total());}
			if(conDefault || (!conDefault && detallefacturaLocal.gettotal()!=null && !detallefacturaLocal.gettotal().equals(0.0))) {detallefacturaBean.settotal(detallefacturaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleFacturaGenerico(Long idDetalleFacturaSeleccionado,JComboBox jComboBoxDetalleFactura,List<DetalleFactura> detallefacturasLocal)throws Exception {
		try {
			DetalleFactura  detallefacturaTemp=null;

			for(DetalleFactura detallefacturaAux:detallefacturasLocal) {
				if(detallefacturaAux.getId()!=null && detallefacturaAux.getId().equals(idDetalleFacturaSeleccionado)) {
					detallefacturaTemp=detallefacturaAux;
					break;
				}
			}

			jComboBoxDetalleFactura.setSelectedItem(detallefacturaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleFacturaGenerico(JComboBox jComboBoxDetalleFactura,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleFactura.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleFactura.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefactura=(DetalleFactura) detallefacturaLogic.getDetalleFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallefactura =(DetalleFactura) detallefacturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getmes_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getfactura_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallefactura.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallefactura.getunidad_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detallefactura.getIsNew() && !detallefactura.getIsChanged() && !detallefactura.getIsDeleted()) {
				sDescripcion=detallefactura.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefactura.getcentrocosto_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleFactura detallefacturaRow=new DetalleFactura();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefacturaRow=(DetalleFactura) detallefacturaLogic.getDetalleFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallefacturaRow=(DetalleFactura) detallefacturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleFactura(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura));			
			this.jButtonDuplicarDetalleFactura.setVisible((this.isVisibilidadCeldaDuplicarDetalleFactura && this.isPermisoDuplicarDetalleFactura));			
			this.jButtonCopiarDetalleFactura.setVisible((this.isVisibilidadCeldaCopiarDetalleFactura && this.isPermisoCopiarDetalleFactura));
			this.jButtonVerFormDetalleFactura.setVisible((this.isVisibilidadCeldaVerFormDetalleFactura && this.isPermisoVerFormDetalleFactura));
			
			this.jButtonAbrirOrderByDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));			
			
			this.jButtonNuevoRelacionesDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFactura && this.isPermisoNuevoDetalleFactura));			
			this.jButtonNuevoGuardarCambiosDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarDetalleFactura.setVisible((this.isVisibilidadCeldaModificarDetalleFactura && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.setVisible((this.isVisibilidadCeldaActualizarDetalleFactura && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.setVisible((this.isVisibilidadCeldaEliminarDetalleFactura && this.isPermisoEliminarDetalleFactura));
			this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.setVisible(this.isVisibilidadCeldaCancelarDetalleFactura);							
			this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura));						
			this.jButtonDuplicarToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaDuplicarDetalleFactura && this.isPermisoDuplicarDetalleFactura));						
			this.jButtonCopiarToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaCopiarDetalleFactura && this.isPermisoCopiarDetalleFactura));			
			this.jButtonVerFormToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaVerFormDetalleFactura && this.isPermisoVerFormDetalleFactura));			
			this.jButtonAbrirOrderByToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));
			this.jButtonNuevoRelacionesToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFactura && this.isPermisoNuevoDetalleFactura));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));			
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaModificarDetalleFactura && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaActualizarDetalleFactura  && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaEliminarDetalleFactura && this.isPermisoEliminarDetalleFactura));
			this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarToolBarDetalleFactura.setVisible(this.isVisibilidadCeldaCancelarDetalleFactura);				
			this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura));			
			this.jMenuItemDuplicarDetalleFactura.setVisible((this.isVisibilidadCeldaDuplicarDetalleFactura && this.isPermisoDuplicarDetalleFactura));			
			this.jMenuItemCopiarDetalleFactura.setVisible((this.isVisibilidadCeldaCopiarDetalleFactura && this.isPermisoCopiarDetalleFactura));			
			this.jMenuItemVerFormDetalleFactura.setVisible((this.isVisibilidadCeldaVerFormDetalleFactura && this.isPermisoVerFormDetalleFactura));			
			this.jMenuItemAbrirOrderByDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));			
			//this.jMenuItemMostrarOcultarDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));
			this.jMenuItemDetalleAbrirOrderByDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));			
			//this.jMenuItemDetalleMostrarOcultarDetalleFactura.setVisible((this.isVisibilidadCeldaOrdenDetalleFactura && this.isPermisoOrdenDetalleFactura));			
			this.jMenuItemNuevoRelacionesDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFactura && this.isPermisoNuevoDetalleFactura));			
			this.jMenuItemNuevoGuardarCambiosDetalleFactura.setVisible((this.isVisibilidadCeldaNuevoDetalleFactura && this.isPermisoNuevoDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));									
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemModificarDetalleFactura.setVisible((this.isVisibilidadCeldaModificarDetalleFactura && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemActualizarDetalleFactura.setVisible((this.isVisibilidadCeldaActualizarDetalleFactura && this.isPermisoActualizarDetalleFactura));	
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemEliminarDetalleFactura.setVisible((this.isVisibilidadCeldaEliminarDetalleFactura && this.isPermisoEliminarDetalleFactura));
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemCancelarDetalleFactura.setVisible(this.isVisibilidadCeldaCancelarDetalleFactura);				
			}
			
			this.jMenuItemGuardarCambiosDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));						
			this.jMenuItemGuardarCambiosTablaDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleFactura=this.jButtonNuevoDetalleFactura.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleFactura=this.jButtonDuplicarDetalleFactura.isVisible();
			this.isVisibilidadCeldaCopiarDetalleFactura=this.jButtonCopiarDetalleFactura.isVisible();
			this.isVisibilidadCeldaVerFormDetalleFactura=this.jButtonVerFormDetalleFactura.isVisible();
			
			this.isVisibilidadCeldaOrdenDetalleFactura=this.jButtonAbrirOrderByDetalleFactura.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=this.jButtonNuevoRelacionesDetalleFactura.isVisible();
			this.isVisibilidadCeldaModificarDetalleFactura=this.jButtonModificarDetalleFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.isVisibilidadCeldaActualizarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.isVisible();
			this.isVisibilidadCeldaGuardarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=this.jButtonGuardarCambiosTablaDetalleFactura.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetalleFactura=this.jButtonNuevoToolBarDetalleFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=this.jButtonNuevoRelacionesToolBarDetalleFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.isVisibilidadCeldaModificarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarToolBarDetalleFactura.isVisible();
			this.isVisibilidadCeldaActualizarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarToolBarDetalleFactura.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarToolBarDetalleFactura.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarToolBarDetalleFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleFactura=this.jButtonGuardarCambiosToolBarDetalleFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=this.jButtonGuardarCambiosTablaToolBarDetalleFactura.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetalleFactura=this.jMenuItemNuevoDetalleFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=this.jMenuItemNuevoRelacionesDetalleFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.isVisibilidadCeldaModificarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jMenuItemModificarDetalleFactura.isVisible();
			this.isVisibilidadCeldaActualizarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jMenuItemActualizarDetalleFactura.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jMenuItemEliminarDetalleFactura.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFactura=this.jInternalFrameDetalleFormDetalleFactura.jMenuItemCancelarDetalleFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleFactura=this.jMenuItemGuardarCambiosDetalleFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=this.jMenuItemGuardarCambiosTablaDetalleFactura.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleFactura(Boolean esInicializar) {
		if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
				//if(this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleFactura();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleFactura(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleFactura() {
		this.jButtonNuevoDetalleFactura.setVisible(this.isPermisoNuevoDetalleFactura);			
		this.jButtonDuplicarDetalleFactura.setVisible(this.isPermisoDuplicarDetalleFactura);			
		this.jButtonCopiarDetalleFactura.setVisible(this.isPermisoCopiarDetalleFactura);			
		this.jButtonVerFormDetalleFactura.setVisible(this.isPermisoVerFormDetalleFactura);			
		
		this.jButtonAbrirOrderByDetalleFactura.setVisible(this.isPermisoOrdenDetalleFactura);					
		
		this.jButtonNuevoRelacionesDetalleFactura.setVisible(this.isPermisoNuevoDetalleFactura);			
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarDetalleFactura.setVisible(this.isPermisoActualizarDetalleFactura);	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.setVisible(this.isPermisoActualizarDetalleFactura);	
			this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.setVisible(this.isPermisoEliminarDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.setVisible(this.isVisibilidadCeldaCancelarDetalleFactura);						
			this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.setVisible(this.isPermisoGuardarCambiosDetalleFactura);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleFactura.setVisible(this.isPermisoActualizarDetalleFactura);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleFactura() {
		this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarDetalleFactura.setVisible(this.isPermisoActualizarDetalleFactura);	
		this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.setVisible(this.isPermisoActualizarDetalleFactura);	
		this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.setVisible(this.isPermisoEliminarDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.setVisible(this.isVisibilidadCeldaCancelarDetalleFactura);							
		this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.setVisible((this.isVisibilidadCeldaGuardarDetalleFactura && this.isPermisoGuardarCambiosDetalleFactura));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleFactura() {
		if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleFactura();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleFactura() {
	}
	
	public void jTableDatosDetalleFacturaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleFactura(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallefactura.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleFactura.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallefactura.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleFactura.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallefactura.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleFactura.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detallefactura.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleFactura.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detallefactura.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleFactura.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detallefactura.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleFactura.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detallefactura.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaDetalleFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleFactura=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosDetalleFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderDetalleFactura.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderDetalleFactura.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.detallefactura.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleFactura.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallefactura.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleFactura=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleFactura.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleFactura.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallefactura.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleFactura.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallefactura.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_loteDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getcodigo_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_lote like '%"+this.detallefactura.getcodigo_lote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleFactura=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosDetalleFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleFactura.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoDetalleFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleFactura(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detallefacturaLogic.getConnexion());

				if(this.detallefactura.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detallefactura.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFactura=(TitledBorder)this.jScrollPanelDatosDetalleFactura.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleFactura.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detallefactura.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.detallefactura.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallefactura.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detallefactura.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprecioDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getprecio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where precio = "+this.detallefactura.getprecio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detallefactura.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_valorDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getiva_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_valor = "+this.detallefactura.getiva_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detallefactura.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonice_valorDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getice_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice_valor = "+this.detallefactura.getice_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detallefactura.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.detallefactura.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento2DetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getdescuento2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento2 = "+this.detallefactura.getdescuento2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.detallefactura.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.detallefactura.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmontoDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getmonto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto = "+this.detallefactura.getmonto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreDetalleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.getdetallefactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefactura==null) {
						this.detallefactura = new DetalleFactura();
					}

					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);
				}

				if(this.detallefactura.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.detallefactura.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdAnio();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdBodega();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdCentroCosto();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdEjercicio();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdEmpresa();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdFactura();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdMes();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdPeriodo();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdProducto();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdSucursal();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUnidadDetalleFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFactura(false,false);

			this.getDetalleFacturasFK_IdUnidad();

			this.inicializarActualizarBindingDetalleFactura(false);

			//if(DetalleFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetalleFactura() {
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
			this.jInternalFrameDetalleFormDetalleFactura.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleFactura.dispose();
			this.jInternalFrameDetalleFormDetalleFactura=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
			this.jInternalFrameReporteDinamicoDetalleFactura.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleFactura.dispose();
			this.jInternalFrameReporteDinamicoDetalleFactura=null;
		}
		
		if(this.jInternalFrameImportacionDetalleFactura!=null) {
			this.jInternalFrameImportacionDetalleFactura.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleFactura.dispose();
			this.jInternalFrameImportacionDetalleFactura=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleFactura();
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleFactura")) {
				jButtonDuplicarDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleFactura")) {
				jButtonCopiarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleFactura")) {
				jButtonVerFormDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleFactura")) {
				jButtonDuplicarDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleFactura")) {
				jButtonDuplicarDetalleFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleFactura")) {
				jButtonModificarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleFactura")) {
				jButtonModificarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleFactura")) {
				jButtonModificarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleFactura")) {
				jButtonActualizarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleFactura")) {
				jButtonActualizarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleFactura")) {
				jButtonActualizarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleFactura")) {
				jButtonEliminarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleFactura")) {
				jButtonEliminarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleFactura")) {
				jButtonEliminarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleFactura")) {
				jButtonCancelarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleFactura")) {
				jButtonCancelarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleFactura")) {
				jButtonCancelarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleFactura")) {
				jButtonCerrarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleFactura")) {
				jButtonCerrarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleFactura")) {
				jButtonCerrarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleFactura")) {
				jButtonMostrarOcultarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleFactura")) {
				jButtonCancelarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleFactura")) {
				jButtonCopiarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleFactura")) {
				jButtonVerFormDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleFactura")) {
				jButtonCopiarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleFactura")) {
				jButtonVerFormDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleFactura")) {
				jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleFactura")) {
				jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleFactura")) {
				jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleFactura")) {
				jButtonAnterioresDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleFactura")) {
				jButtonAnterioresDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleFactura")) {
				jButtonAnterioresDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleFactura")) {
				jButtonSiguientesDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleFactura")) {
				jButtonSiguientesDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleFactura")) {
				jButtonSiguientesDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleFactura") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleFactura")) {
				jButtonAbrirOrderByDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleFactura") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleFactura")) {
				jButtonMostrarOcultarDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleFactura")) {
				jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleFactura")) {
				jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleFactura")) {
				jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleFactura")) {
				jButtonCerrarReporteDinamicoDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleFactura")) {
				jButtonGenerarReporteDinamicoDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleFactura")) {
				
				jButtonGenerarExcelReporteDinamicoDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetalleFactura")) {
				jButtonCerrarImportacionDetalleFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleFactura")) {
				
				jButtonGenerarImportacionDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetalleFactura")) {
				
				jButtonAbrirImportacionDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetalleFactura")) {
				jComboBoxTiposAccionesDetalleFacturaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleFactura")) {
				jComboBoxTiposRelacionesDetalleFacturaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleFactura")) {
				jComboBoxTiposAccionesDetalleFacturaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleFactura")) {
				
				jComboBoxTiposSeleccionarDetalleFacturaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetalleFactura")) {
				jTextFieldValorCampoGeneralDetalleFacturaActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetalleFactura")) {
				jButtonAbrirTotalesDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetalleFactura")) {
				jButtonCerrarTotalesDetalleFacturaActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetalleFactura")) {
				jButtonAbrirOrderByDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleFactura")) {
				jButtonAbrirOrderByDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleFactura")) {
				jButtonCerrarOrderByDetalleFacturaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleFacturaBusqueda")) {
				this.jButtonidDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaUpdate")) {
				this.jButtonid_empresaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaBusqueda")) {
				this.jButtonid_empresaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaUpdate")) {
				this.jButtonid_sucursalDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaBusqueda")) {
				this.jButtonid_sucursalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaUpdate")) {
				this.jButtonid_ejercicioDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaBusqueda")) {
				this.jButtonid_ejercicioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaUpdate")) {
				this.jButtonid_periodoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaBusqueda")) {
				this.jButtonid_periodoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaUpdate")) {
				this.jButtonid_anioDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaBusqueda")) {
				this.jButtonid_anioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaUpdate")) {
				this.jButtonid_mesDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaBusqueda")) {
				this.jButtonid_mesDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaDetalleFactura")) {
				this.jButtonid_facturaDetalleFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaDetalleFacturaUpdate")) {
				this.jButtonid_facturaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaDetalleFacturaBusqueda")) {
				this.jButtonid_facturaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaUpdate")) {
				this.jButtonid_bodegaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaBusqueda")) {
				this.jButtonid_bodegaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleFactura")) {
				this.jButtonid_productoDetalleFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaUpdate")) {
				this.jButtonid_productoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaBusqueda")) {
				this.jButtonid_productoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaUpdate")) {
				this.jButtonid_unidadDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaBusqueda")) {
				this.jButtonid_unidadDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_loteDetalleFacturaBusqueda")) {
				this.jButtoncodigo_loteDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFactura")) {
				this.jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaUpdate")) {
				this.jButtonid_centro_costoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaBusqueda")) {
				this.jButtonid_centro_costoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaDetalleFacturaBusqueda")) {
				this.jButtonfechaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleFacturaBusqueda")) {
				this.jButtondescripcionDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleFacturaBusqueda")) {
				this.jButtoncantidadDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleFacturaBusqueda")) {
				this.jButtonprecioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleFacturaBusqueda")) {
				this.jButtonivaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleFacturaBusqueda")) {
				this.jButtoniva_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleFacturaBusqueda")) {
				this.jButtoniceDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleFacturaBusqueda")) {
				this.jButtonice_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleFacturaBusqueda")) {
				this.jButtondescuentoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleFacturaBusqueda")) {
				this.jButtondescuento_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleFacturaBusqueda")) {
				this.jButtondescuento2DetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalDetalleFacturaBusqueda")) {
				this.jButtonsub_totalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleFacturaBusqueda")) {
				this.jButtontotalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("montoDetalleFacturaBusqueda")) {
				this.jButtonmontoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreDetalleFacturaBusqueda")) {
				this.jButtonnombreDetalleFacturaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoDetalleFactura")) {
				this.jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaDetalleFactura")) {
				this.jButtonid_facturaDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("id_productoDetalleFactura")) {
				this.jButtonid_productoDetalleFacturaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaDetalleFactura")) {
				this.jButtonFK_IdBodegaDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoDetalleFactura")) {
				this.jButtonFK_IdCentroCostoDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaDetalleFactura")) {
				this.jButtonFK_IdFacturaDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoDetalleFactura")) {
				this.jButtonFK_IdProductoDetalleFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdUnidadDetalleFactura")) {
				this.jButtonFK_IdUnidadDetalleFacturaActionPerformed(evt);
			}
			
			;
			
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleFactura();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleFactura detallefacturaLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallefacturaLocal=this.detallefactura;
			} else {
				detallefacturaLocal=this.detallefacturaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
							
				
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
								
						
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
								
				
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
							
				
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
								
				
				


				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleFactura")) {
					jCheckBoxSeleccionarTodosDetalleFacturaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleFactura")) {
					jCheckBoxSeleccionadosDetalleFacturaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleFactura")) {
					
				}
				
				


				
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
												
				
				


				
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFactura")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
				//recargarFormDetalleFacturaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFactura")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
				//recargarFormDetalleFacturaProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFactura")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
				//recargarFormDetalleFacturaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFactura")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
				//recargarFormDetalleFacturaProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
			}
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefactura);
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFactura")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
				//recargarFormDetalleFacturaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFactura,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFactura")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura;
				}

				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFactura(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFactura")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
				//recargarFormDetalleFacturaProducto(jComboBoxid_productoFK_IdProductoDetalleFactura,"FK_IdProducto");
			}
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFactura.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaAnterior =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleFactura")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleFactura.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallefactura =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallefactura =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallefactura);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleFactura")) {
				
				}
				
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleFactura")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleFactura.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleFactura")) {
			
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleFactura();
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleFactura")) {
				jButtonDuplicarDetalleFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleFactura")) {
				jButtonCopiarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleFactura")) {
				jButtonVerFormDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleFactura")) {
				jButtonNuevoDetalleFacturaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleFactura")) {
				jButtonModificarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleFactura")) {
				jButtonActualizarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleFactura")) {
				jButtonEliminarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleFactura")) {
				jButtonCancelarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleFactura")) {
				jButtonCerrarDetalleFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleFactura")) {
				jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleFactura")) {
				jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleFactura")) {
				jButtonAbrirOrderByDetalleFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleFactura")) {
				jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleFactura")) {
				jButtonAnterioresDetalleFacturaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleFactura")) {
				jButtonSiguientesDetalleFacturaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleFacturaBusqueda")) {
				this.jButtonidDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaUpdate")) {
				this.jButtonid_empresaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaBusqueda")) {
				this.jButtonid_empresaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaUpdate")) {
				this.jButtonid_sucursalDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaBusqueda")) {
				this.jButtonid_sucursalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaUpdate")) {
				this.jButtonid_ejercicioDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaBusqueda")) {
				this.jButtonid_ejercicioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaUpdate")) {
				this.jButtonid_periodoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaBusqueda")) {
				this.jButtonid_periodoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaUpdate")) {
				this.jButtonid_anioDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaBusqueda")) {
				this.jButtonid_anioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaUpdate")) {
				this.jButtonid_mesDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaBusqueda")) {
				this.jButtonid_mesDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaDetalleFactura")) {
				this.jButtonid_facturaDetalleFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaDetalleFacturaUpdate")) {
				this.jButtonid_facturaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaDetalleFacturaBusqueda")) {
				this.jButtonid_facturaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaUpdate")) {
				this.jButtonid_bodegaDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaBusqueda")) {
				this.jButtonid_bodegaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleFactura")) {
				this.jButtonid_productoDetalleFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaUpdate")) {
				this.jButtonid_productoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaBusqueda")) {
				this.jButtonid_productoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaUpdate")) {
				this.jButtonid_unidadDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaBusqueda")) {
				this.jButtonid_unidadDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_loteDetalleFacturaBusqueda")) {
				this.jButtoncodigo_loteDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFactura")) {
				this.jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaUpdate")) {
				this.jButtonid_centro_costoDetalleFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaBusqueda")) {
				this.jButtonid_centro_costoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaDetalleFacturaBusqueda")) {
				this.jButtonfechaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleFacturaBusqueda")) {
				this.jButtondescripcionDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleFacturaBusqueda")) {
				this.jButtoncantidadDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleFacturaBusqueda")) {
				this.jButtonprecioDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleFacturaBusqueda")) {
				this.jButtonivaDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleFacturaBusqueda")) {
				this.jButtoniva_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleFacturaBusqueda")) {
				this.jButtoniceDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleFacturaBusqueda")) {
				this.jButtonice_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleFacturaBusqueda")) {
				this.jButtondescuentoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleFacturaBusqueda")) {
				this.jButtondescuento_valorDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleFacturaBusqueda")) {
				this.jButtondescuento2DetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalDetalleFacturaBusqueda")) {
				this.jButtonsub_totalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleFacturaBusqueda")) {
				this.jButtontotalDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("montoDetalleFacturaBusqueda")) {
				this.jButtonmontoDetalleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreDetalleFacturaBusqueda")) {
				this.jButtonnombreDetalleFacturaBusquedaActionPerformed(evt);
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleFactura();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleFactura")) {
				closingInternalFrameDetalleFactura();
				
			} else if(sTipo.equals("jButtonCancelarDetalleFactura")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleFactura = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleFacturaBeanSwingJInternalFrame jInternalFrameParent=(DetalleFacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleFactura.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleFacturaActionPerformed(null);
			}
			
			DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallefactura,new Object(),this.detallefacturaParameterGeneral,this.detallefacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallefactura)) {
			if(!esControlTabla) {
				if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);			
				}
				
				if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleFactura(this.detallefactura,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallefacturaReturnGeneral=detallefacturaLogic.procesarEventosDetalleFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaLogic.getDetalleFacturas(),this.detallefactura,this.detallefacturaParameterGeneral,this.isEsNuevoDetalleFactura,classes);//this.detallefacturaLogic.getDetalleFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleFactura(this.detallefacturaReturnGeneral,this.detallefacturaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleFactura(classes,this.detallefacturaReturnGeneral,this.detallefacturaBean,false);
					}
						
					if(this.detallefacturaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura());	
					}
						
					if(this.detallefacturaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura(),classes);//this.detallefacturaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleFactura(this.detallefactura,classes);//this.detallefacturaBean);									
				}
			
				if(DetalleFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleFactura(this.detallefactura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFactura(this.detallefactura);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallefacturaAnterior!=null) {
						this.detallefactura=this.detallefacturaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallefacturaReturnGeneral=detallefacturaLogic.procesarEventosDetalleFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaLogic.getDetalleFacturas(),this.detallefactura,this.detallefacturaParameterGeneral,this.isEsNuevoDetalleFactura,classes);//this.detallefacturaLogic.getDetalleFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallefacturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallefacturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallefacturaReturnGeneral.getDetalleFactura(),detallefacturaLogic.getDetalleFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallefacturaReturnGeneral.getDetalleFactura(),this.detallefacturas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleFactura.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleFactura.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleFactura();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleFactura() throws Exception {
		
		DetalleFacturaModel detallefacturaModel=(DetalleFacturaModel)this.jTableDatosDetalleFactura.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefacturaModel.detallefacturas=this.detallefacturaLogic.getDetalleFacturas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallefacturaModel.detallefacturas=this.detallefacturas;
		}
		
		
		((DetalleFacturaModel) this.jTableDatosDetalleFactura.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleFactura() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallefacturaAnterior(),this.detallefacturaLogic.getDetalleFacturas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallefacturaAnterior(),this.detallefacturas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleFactura();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleFactura(DetalleFactura detallefactura,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefactura,new Object(),generalEntityParameterGeneral,this.detallefacturaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallefacturaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsOfDetalleFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleFacturaConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleFactura(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefactura,new Object(),generalEntityParameterGeneral,this.detallefacturaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleFactura(DetalleFacturaBean detallefacturaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleFactura(ArrayList<Classe> classes,DetalleFacturaReturnGeneral detallefacturaReturnGeneral,DetalleFacturaBean detallefacturaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleFactura(DetalleFactura detallefactura,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallefactura)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleFactura = new DetalleFacturaDetalleFormJInternalFrame(jDesktopPane,this.detallefacturaSessionBean.getConGuardarRelaciones(),this.detallefacturaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.setVisible(false);
		this.jInternalFrameDetalleFormDetalleFactura.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleFactura.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleFactura.detallefacturaLogic=this.detallefacturaLogic;
		
		this.cargarCombosFrameForeignKeyDetalleFactura("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleFactura();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleFactura();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleFactura("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleFactura();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleFactura"));
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarDetalleFactura.addActionListener(new ButtonActionListener(this,"ModificarDetalleFactura"));

		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleFactura"));
					
		this.jInternalFrameDetalleFormDetalleFactura.jMenuItemModificarDetalleFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleFactura"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.addActionListener (new ButtonActionListener(this,"ActualizarDetalleFactura"));
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleFactura"));
						
		this.jInternalFrameDetalleFormDetalleFactura.jMenuItemActualizarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleFactura"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.addActionListener (new ButtonActionListener(this,"EliminarDetalleFactura"));
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleFactura"));
								
		this.jInternalFrameDetalleFormDetalleFactura.jMenuItemEliminarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleFactura"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.addActionListener (new ButtonActionListener(this,"CancelarDetalleFactura"));
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleFactura"));
					
		this.jInternalFrameDetalleFormDetalleFactura.jMenuItemCancelarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleFactura"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jMenuItemDetalleCerrarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleFactura"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFactura"));
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFactura"));
		
		
		
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleFactura"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonidDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaBusqueda"));
		//jButtonid_facturaDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFactura.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaBusqueda"));
		//jButtonid_productoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_productoDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncodigo_loteDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_loteDetalleFacturaBusqueda"));
		//jButtonid_centro_costoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFactura"));
		//jButtonid_centro_costoDetalleFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonfechaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescripcionDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncantidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonprecioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonivaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniva_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniceDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonice_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuentoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento2DetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonsub_totalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtontotalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonmontoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"montoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonnombreDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombreDetalleFacturaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleFactura"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleFactura"));
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleFactura"));
		}
		
		this.jTableDatosDetalleFactura.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleFactura"));
		
		this.jTableDatosDetalleFactura.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleFactura"));
		
		this.jButtonNuevoDetalleFactura.addActionListener(new ButtonActionListener(this,"NuevoDetalleFactura"));
		
		this.jButtonDuplicarDetalleFactura.addActionListener(new ButtonActionListener(this,"DuplicarDetalleFactura"));
		
		this.jButtonCopiarDetalleFactura.addActionListener(new ButtonActionListener(this,"CopiarDetalleFactura"));
		
		this.jButtonVerFormDetalleFactura.addActionListener(new ButtonActionListener(this,"VerFormDetalleFactura"));
		
		
		this.jButtonNuevoToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleFactura"));
			
		this.jButtonDuplicarToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleFactura"));
			
		this.jMenuItemNuevoDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleFactura"));
			
		this.jMenuItemDuplicarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleFactura"));		
		
		
		this.jButtonNuevoRelacionesDetalleFactura.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleFactura"));
		
		
		this.jButtonNuevoRelacionesToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleFactura"));
			
		this.jMenuItemNuevoRelacionesDetalleFactura.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleFactura"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarDetalleFactura.addActionListener(new ButtonActionListener(this,"ModificarDetalleFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonModificarToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleFactura"));
			
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemModificarDetalleFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarDetalleFactura.addActionListener (new ButtonActionListener(this,"ActualizarDetalleFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonActualizarToolBarDetalleFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleFactura"));
				
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemActualizarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarDetalleFactura.addActionListener (new ButtonActionListener(this,"EliminarDetalleFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonEliminarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleFactura"));
						
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemEliminarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarDetalleFactura.addActionListener (new ButtonActionListener(this,"CancelarDetalleFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonCancelarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleFactura"));
			
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemCancelarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleFactura"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleFactura"));		
		
		
		this.jButtonCerrarDetalleFactura.addActionListener (new ButtonActionListener(this,"CerrarDetalleFactura"));
		
		
		this.jButtonCerrarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleFactura"));
			
		this.jMenuItemCerrarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleFactura"));
			
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jMenuItemDetalleCerrarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFactura"));
		}
		
		this.jButtonCopiarToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleFactura"));
			
		this.jButtonVerFormToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleFactura"));
		
		this.jMenuItemGuardarCambiosDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleFactura"));
			
		this.jMenuItemCopiarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleFactura"));		
		
		this.jMenuItemVerFormDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleFactura"));		
		
		
		this.jButtonGuardarCambiosTablaDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleFactura"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleFactura"));
			
		this.jMenuItemGuardarCambiosTablaDetalleFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleFactura"));		
		
		
		
		this.jButtonRecargarInformacionDetalleFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleFactura"));
					
		this.jButtonRecargarInformacionToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleFactura"));
		
		this.jMenuItemRecargarInformacionDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleFactura"));		
		
		
		
		this.jButtonAnterioresDetalleFactura.addActionListener (new ButtonActionListener(this,"AnterioresDetalleFactura"));
		
		
		this.jButtonAnterioresToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleFactura"));
		
		this.jMenuItemAnterioresDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleFactura"));		
		
		
		this.jButtonSiguientesDetalleFactura.addActionListener (new ButtonActionListener(this,"SiguientesDetalleFactura"));
		
		
		this.jButtonSiguientesToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleFactura"));
			
		this.jMenuItemSiguientesDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleFactura"));
			
		this.jMenuItemAbrirOrderByDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleFactura"));
			
		this.jMenuItemMostrarOcultarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleFactura"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleFactura"));
			
		this.jMenuItemDetalleMostarOcultarDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleFactura"));		
		
		
		this.jButtonNuevoGuardarCambiosDetalleFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleFactura"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleFactura"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleFactura"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleFactura"));

		this.jCheckBoxSeleccionadosDetalleFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleFactura"));
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleFactura"));
		}
		
		
		this.jComboBoxTiposRelacionesDetalleFactura.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleFactura"));
			
		this.jComboBoxTiposAccionesDetalleFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleFactura"));
					
		this.jComboBoxTiposSeleccionarDetalleFactura.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleFactura"));
			
		this.jTextFieldValorCampoGeneralDetalleFactura.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleFactura"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonidDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaBusqueda"));
		//jButtonid_facturaDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFactura.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaBusqueda"));
		//jButtonid_productoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_productoDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncodigo_loteDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_loteDetalleFacturaBusqueda"));
		//jButtonid_centro_costoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFactura"));
		//jButtonid_centro_costoDetalleFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonfechaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescripcionDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncantidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonprecioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonivaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniva_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniceDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonice_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuentoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento2DetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonsub_totalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtontotalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonmontoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"montoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonnombreDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombreDetalleFacturaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleFactura"));

			this.jButtonFK_IdCentroCostoDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleFactura"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFactura"));

			this.jButtonFK_IdFacturaDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdFacturaDetalleFactura"));

			this.jButtonBuscarFK_IdFacturaid_facturaDetalleFactura.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFactura"));

			this.jButtonFK_IdProductoDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleFactura"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_productoDetalleFactura"));

			this.jButtonFK_IdUnidadDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleFactura"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetalleFactura!=null) {
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFactura"));
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFactura"));
				this.jInternalFrameReporteDinamicoDetalleFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFactura"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleFactura.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFactura"));				
			//this.jButtonGenerarReporteDinamicoDetalleFactura.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFactura"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleFactura.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFactura"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleFactura!=null) {
				this.jInternalFrameImportacionDetalleFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleFactura"));
				this.jInternalFrameImportacionDetalleFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleFactura"));
				this.jInternalFrameImportacionDetalleFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleFactura"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleFactura"));
			
			this.jButtonAbrirOrderByToolBarDetalleFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleFactura"));			
			
			if(this.jInternalFrameOrderByDetalleFactura!=null) {
				this.jInternalFrameOrderByDetalleFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleFactura"));				
			}
			
			
		}
		
		this.jButtonAbrirTotalesDetalleFactura.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetalleFactura"));
		
		if(this.jInternalFrameTotalesDetalleFactura!=null) {
			this.jInternalFrameTotalesDetalleFactura.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleFactura"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFactura.jTabbedPaneRelacionesDetalleFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleFactura"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleFactura();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleFactura.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleFactura = (JInternalFrameBase)event.getSource();
	            	
	            DetalleFacturaBeanSwingJInternalFrame jInternalFrameParent=(DetalleFacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleFactura.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleFacturaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleFactura.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleFactura.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleFactura.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleFactura";
		inputMap = this.jButtonNuevoDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleFacturaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleFactura";
		inputMap = this.jButtonNuevoRelacionesDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleFacturaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleFactura";
		inputMap = this.jButtonModificarDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleFactura";
		inputMap = this.jButtonActualizarDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleFactura";
		inputMap = this.jButtonEliminarDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleFactura";
		inputMap = this.jButtonCancelarDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleFactura";
		inputMap = this.jButtonCerrarDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleFactura";
		inputMap = this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleFactura.jButtonGuardarCambiosDetalleFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleFactura.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleFacturaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonidDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_empresaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_sucursalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_ejercicioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_periodoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_anioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_mesDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaBusqueda"));
		//jButtonid_facturaDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFactura.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_bodegaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaBusqueda"));
		//jButtonid_productoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_productoDetalleFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_unidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncodigo_loteDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_loteDetalleFacturaBusqueda"));
		//jButtonid_centro_costoDetalleFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFactura"));
		//jButtonid_centro_costoDetalleFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonfechaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescripcionDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoncantidadDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonprecioDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonivaDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniva_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtoniceDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonice_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuentoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento_valorDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtondescuento2DetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonsub_totalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtontotalDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonmontoDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"montoDetalleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFactura.jButtonnombreDetalleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombreDetalleFacturaBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleFactura"));

		this.jButtonFK_IdCentroCostoDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleFactura"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFactura"));

		this.jButtonFK_IdFacturaDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdFacturaDetalleFactura"));

		this.jButtonBuscarFK_IdFacturaid_facturaDetalleFactura.addActionListener(new ButtonActionListener(this,"id_facturaDetalleFactura"));

		this.jButtonFK_IdProductoDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleFactura"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleFactura.addActionListener(new ButtonActionListener(this,"id_productoDetalleFactura"));

		this.jButtonFK_IdUnidadDetalleFactura.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleFactura"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetalleFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleFactura.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetalleFactura(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
					detallefacturaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFactura detallefacturaAux:detallefacturas) {
					detallefacturaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
						detallefacturaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFactura detallefacturaAux:detallefacturas) {
						detallefacturaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFactura detallefacturaAux:detallefacturas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleFactura.getSelectedRows();
			
			DetalleFactura detallefacturaLocal=new DetalleFactura();
			
			//this.seleccionarTodosDetalleFactura(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaLocal =(DetalleFactura) this.detallefacturaLogic.getDetalleFacturas().toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallefacturaLocal =(DetalleFactura) this.detallefacturas.toArray()[this.jTableDatosDetalleFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallefacturaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
						detallefacturaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFactura detallefacturaAux:detallefacturas) {
						detallefacturaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleFactura(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleFacturaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleFacturaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleFactura.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleFactura detallefacturaAux:this.detallefacturaLogic.getDetalleFacturas()) {
				
						if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE)) {
							existe=true;
							detallefacturaAux.setcodigo_lote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							detallefacturaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallefacturaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallefacturaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detallefacturaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallefacturaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallefacturaAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallefacturaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallefacturaAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallefacturaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detallefacturaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallefacturaAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							detallefacturaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detallefacturaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_MONTO)) {
							existe=true;
							detallefacturaAux.setmonto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							detallefacturaAux.setnombre(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFactura detallefacturaAux:detallefacturas) {
					
						if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE)) {
							existe=true;
							detallefacturaAux.setcodigo_lote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							detallefacturaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallefacturaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallefacturaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detallefacturaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallefacturaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallefacturaAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallefacturaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallefacturaAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallefacturaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detallefacturaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallefacturaAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							detallefacturaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detallefacturaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_MONTO)) {
							existe=true;
							detallefacturaAux.setmonto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							detallefacturaAux.setnombre(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleFacturaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleFactura=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleFactura.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleFactura) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleFactura(conSplash);
				
					this.generarReporteDetalleFacturasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleFacturasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleFacturasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleFacturasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleFactura();
				
				this.exportarDetalleFacturasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleFacturas();
				//this.importarDetalleFacturas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleFactura();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleFacturasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleFactura();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleFactura)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleFactura(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleFacturaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleFactura) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleFactura(conSplash);
					
						//this.actualizarParametrosGeneralDetalleFactura();
						
						this.generarReporteProcesoAccionDetalleFacturasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleFacturaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle FacturaS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleFactura();
				
						this.actualizarParametrosGeneralDetalleFactura();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallefacturaReturnGeneral=detallefacturaLogic.procesarAccionDetalleFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallefacturaLogic.getDetalleFacturas(),this.detallefacturaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleFactura();
					
					DetalleFacturaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleFactura.jComboBoxTiposAccionesFormularioDetalleFactura.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleFactura(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleFacturaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleFactura();
			
			if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
			DetalleFactura detallefactura=new DetalleFactura();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleFactura.getSelectedItem();
			
			
			
			
			detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallefacturasSeleccionados.size()==1) {
				for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
					detallefactura=detallefacturaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleFactura();
			
      		//this.finishProcessDetalleFactura(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleFacturaReturnGeneral() throws Exception {
		if(this.detallefacturaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallefacturaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallefacturaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallefacturaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallefacturaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallefacturaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleFactura(false);
		}
		
		if(this.detallefacturaReturnGeneral.getConRetornoLista() || this.detallefacturaReturnGeneral.getConRetornoObjeto()) {
			if(this.detallefacturaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallefacturaLogic.setDetalleFacturas(this.detallefacturaReturnGeneral.getDetalleFacturas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallefacturaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallefacturaLogic.setDetalleFactura(this.detallefacturaReturnGeneral.getDetalleFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleFactura(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleFactura() throws Exception {
		
		
	}
	
	public ArrayList<DetalleFactura> getDetalleFacturasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleFactura) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleFactura detallefacturaAux:detallefacturaLogic.getDetalleFacturas()) {
					if(detallefacturaAux.getIsSelected()) {
						detallefacturasSeleccionados.add(detallefacturaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFactura detallefacturaAux:this.detallefacturas) {
					if(detallefacturaAux.getIsSelected()) {
						detallefacturasSeleccionados.add(detallefacturaAux);				
					}
				}
			}
			
			if(detallefacturasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallefacturasSeleccionados.addAll(this.detallefacturaLogic.getDetalleFacturas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallefacturasSeleccionados.addAll(this.detallefacturas);				
					}
				}
			}
		} else {
			detallefacturasSeleccionados.add(this.detallefactura);
		}
		
		return detallefacturasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleFacturasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleFacturasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleFacturasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetalleFactura();
		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetalleFactura();
		
		
		//this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados ,detallefacturaImplementable,detallefacturaImplementableHome);
	}
	
	public void mostrarImportacionDetalleFacturas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetalleFactura();
		
		this.abrirFrameImportacionDetalleFactura();		
		
			
		//this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados ,detallefacturaImplementable,detallefacturaImplementableHome);
	}
	
	public void importarDetalleFacturas() throws Exception {		
	
	}
	
	public void exportarDetalleFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleFacturasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleFacturasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleFacturasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleFactura(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleFactura(detallefacturaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallefacturaAux.setsDetalleGeneralEntityReporte(detallefacturaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleFactura(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_PRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_IVAVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_ICEVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_MONTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaConstantesFunciones.LABEL_NOMBRE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleFactura(DetalleFactura detallefactura,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallefactura.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getcodigo_lote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getprecio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getiva_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getice_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getdescuento2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getmonto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefactura.getnombre();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleFacturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleFactura(row);				
				iRow++;
			}				
			
			for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleFactura(detallefacturaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleFacturasSeleccionados() throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();		
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefactura.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallefacturas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallefactura");
			//elementRoot.appendChild(element);
		
			for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
				element = document.createElement("detallefactura");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleFactura(detallefacturaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleFactura(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_PRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_IVAVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_ICEVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_DESCUENTO2);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_MONTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaConstantesFunciones.LABEL_NOMBRE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleFactura(DetalleFactura detallefactura,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getcodigo_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getprecio());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getiva_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getice_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getdescuento2());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getmonto());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefactura.getnombre());				
	}
	
	public void setFilaDatosExportarXmlDetalleFactura(DetalleFactura detallefactura,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleFacturaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallefactura.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleFacturaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallefactura.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallefactura.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallefactura.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detallefactura.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detallefactura.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detallefactura.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detallefactura.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementfactura_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(detallefactura.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallefactura.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallefactura.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallefactura.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementcodigo_lote = document.createElement(DetalleFacturaConstantesFunciones.CODIGOLOTE);
		elementcodigo_lote.appendChild(document.createTextNode(detallefactura.getcodigo_lote().trim()));
		element.appendChild(elementcodigo_lote);

		Element elementcentrocosto_descripcion = document.createElement(DetalleFacturaConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detallefactura.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementfecha = document.createElement(DetalleFacturaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(detallefactura.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementdescripcion = document.createElement(DetalleFacturaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallefactura.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcantidad = document.createElement(DetalleFacturaConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detallefactura.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementprecio = document.createElement(DetalleFacturaConstantesFunciones.PRECIO);
		elementprecio.appendChild(document.createTextNode(detallefactura.getprecio().toString().trim()));
		element.appendChild(elementprecio);

		Element elementiva = document.createElement(DetalleFacturaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detallefactura.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementiva_valor = document.createElement(DetalleFacturaConstantesFunciones.IVAVALOR);
		elementiva_valor.appendChild(document.createTextNode(detallefactura.getiva_valor().toString().trim()));
		element.appendChild(elementiva_valor);

		Element elementice = document.createElement(DetalleFacturaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detallefactura.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementice_valor = document.createElement(DetalleFacturaConstantesFunciones.ICEVALOR);
		elementice_valor.appendChild(document.createTextNode(detallefactura.getice_valor().toString().trim()));
		element.appendChild(elementice_valor);

		Element elementdescuento = document.createElement(DetalleFacturaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detallefactura.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementdescuento_valor = document.createElement(DetalleFacturaConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(detallefactura.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementdescuento2 = document.createElement(DetalleFacturaConstantesFunciones.DESCUENTO2);
		elementdescuento2.appendChild(document.createTextNode(detallefactura.getdescuento2().toString().trim()));
		element.appendChild(elementdescuento2);

		Element elementsub_total = document.createElement(DetalleFacturaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(detallefactura.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal = document.createElement(DetalleFacturaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(detallefactura.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementmonto = document.createElement(DetalleFacturaConstantesFunciones.MONTO);
		elementmonto.appendChild(document.createTextNode(detallefactura.getmonto().toString().trim()));
		element.appendChild(elementmonto);

		Element elementnombre = document.createElement(DetalleFacturaConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(detallefactura.getnombre().trim()));
		element.appendChild(elementnombre);
	}
	
	public void generarReporteGroupGenericoDetalleFacturasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleFactura> detallefacturasSeleccionados=new ArrayList<DetalleFactura>();
		
		detallefacturasSeleccionados=this.getDetalleFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleFactura(detallefacturasSeleccionados);
		
		this.generarReporteDetalleFacturas("Todos",detallefacturasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleFactura(ArrayList<DetalleFactura> detallefacturasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleFactura detallefacturaAux:detallefacturasSeleccionados) {
				detallefacturaAux.setsDetalleGeneralEntityReporte(detallefacturaAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CODIGOLOTE)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getcodigo_lote());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallefacturaAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					detallefacturaAux.setsDescripcionGeneralEntityReporte1(detallefacturaAux.getnombre());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleFactura(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleFactura=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleFactura=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=true;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=true;
			this.isVisibilidadCeldaEliminarDetalleFactura=true;
			this.isVisibilidadCeldaCancelarDetalleFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=true;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=true;
			this.isVisibilidadCeldaModificarDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
			this.isVisibilidadCeldaModificarDetalleFactura=true;
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
			this.isVisibilidadCeldaCancelarDetalleFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFactura=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleFacturaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=true;
		} else {
			this.actualizarEstadoPanelsDetalleFactura(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleFactura=false;
			//this.isVisibilidadCeldaVerFormDetalleFactura=false;
			this.isVisibilidadCeldaDuplicarDetalleFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallefacturaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleFactura=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallefacturaSessionBean.getEsGuardarRelacionado()) {
			if(!detallefacturaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;												
			}
			
			this.jButtonCerrarDetalleFactura.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleFactura=false;
		}
		
		if(!this.permiteMantenimiento(this.detallefactura)) {
			this.isVisibilidadCeldaActualizarDetalleFactura=false;
			this.isVisibilidadCeldaEliminarDetalleFactura=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleFactura() {
	}
	
	public void actualizarEstadoPanelsDetalleFactura(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleFactura!=null) {
				this.jScrollPanelDatosEdicionDetalleFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFactura!=null) {
				this.jScrollPanelDatosDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFactura!=null) {
				this.jPanelPaginacionDetalleFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
					this.jTabbedPaneBusquedasDetalleFactura.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallefacturaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFactura!=null) {
				this.jTabbedPaneBusquedasDetalleFactura.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetalleFactura!=null) {
				this.jPanelParametrosReportesDetalleFactura.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdBodega=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdBodegaDetalleFactura);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdCentroCostoDetalleFactura);}

			this.isVisibilidadFK_IdFactura=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdFacturaDetalleFactura);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdProductoDetalleFactura);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFactura.remove(jPanelFK_IdUnidadDetalleFactura);}
		}
		
	}
	
	
	
	

	public String registrarSesionDetalleFacturaParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(detallefacturaSessionBean==null) {
				detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(detallefacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.detallefacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(DetalleFacturaConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionDetalleFactura(true);
			//facturaSessionBean.setlidDetalleFacturaActual(this.idDetalleFacturaActual);

			detallefacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleFactura(true);
			detallefacturaSessionBean.setlIdDetalleFacturaActualForeignKey(this.idDetalleFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleFacturaParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallefacturaSessionBean==null) {
				detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallefacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallefacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleFacturaConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleFactura(true);
			//productoSessionBean.setlidDetalleFacturaActual(this.idDetalleFacturaActual);

			detallefacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleFactura(true);
			detallefacturaSessionBean.setlIdDetalleFacturaActualForeignKey(this.idDetalleFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleFacturaParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(detallefacturaSessionBean==null) {
				detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(detallefacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallefacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(DetalleFacturaConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleFactura(true);
			//centrocostoSessionBean.setlidDetalleFacturaActual(this.idDetalleFacturaActual);

			detallefacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleFactura(true);
			detallefacturaSessionBean.setlIdDetalleFacturaActualForeignKey(this.idDetalleFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleFacturaSessionBean detallefacturaSessionBean=new DetalleFacturaSessionBean();
		
		if(this.detallefacturaSessionBean==null) {
			this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
		}
		
		this.detallefacturaSessionBean.setsUltimaBusquedaDetalleFactura(this.getsAccionBusqueda());
		this.detallefacturaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallefacturaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallefacturaSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detallefacturaSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detallefacturaSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallefacturaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			detallefacturaSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detallefacturaSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallefacturaSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallefacturaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallefacturaSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleFacturaSessionBean detallefacturaSessionBean=new DetalleFacturaSessionBean();
		
		if(this.detallefacturaSessionBean==null) {
			this.detallefacturaSessionBean=new DetalleFacturaSessionBean();
		}
		
		if(this.detallefacturaSessionBean.getsUltimaBusquedaDetalleFactura()!=null&&!this.detallefacturaSessionBean.getsUltimaBusquedaDetalleFactura().equals("")) {
			this.setsAccionBusqueda(detallefacturaSessionBean.getsUltimaBusquedaDetalleFactura());
			this.setiNumeroPaginacion(detallefacturaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallefacturaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallefacturaSessionBean.getid_bodega());
				detallefacturaSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detallefacturaSessionBean.getid_centro_costo());
				detallefacturaSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detallefacturaSessionBean.getid_ejercicio());
				detallefacturaSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallefacturaSessionBean.getid_empresa());
				detallefacturaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(detallefacturaSessionBean.getid_factura());
				detallefacturaSessionBean.setid_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detallefacturaSessionBean.getid_periodo());
				detallefacturaSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallefacturaSessionBean.getid_producto());
				detallefacturaSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallefacturaSessionBean.getid_sucursal());
				detallefacturaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallefacturaSessionBean.getid_unidad());
				detallefacturaSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallefacturaSessionBean.setsUltimaBusquedaDetalleFactura("");
		this.detallefacturaSessionBean.setiNumeroPaginacion(DetalleFacturaConstantesFunciones.INUMEROPAGINACION);
		this.detallefacturaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleFactura(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleFactura() {
		this.updateBorderResaltarBusquedasFormularioDetalleFactura();
		this.updateVisibilidadBusquedasFormularioDetalleFactura();
		this.updateHabilitarBusquedasFormularioDetalleFactura();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleFactura() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleFactura.getComponents().length>0) {
	

		if(this.detallefacturaConstantesFunciones.resaltarFK_IdBodegaDetalleFactura!=null) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdBodegaDetalleFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdBodegaDetalleFactura);
			}
		}

		if(this.detallefacturaConstantesFunciones.resaltarFK_IdCentroCostoDetalleFactura!=null) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdCentroCostoDetalleFactura);
			}
		}

		if(this.detallefacturaConstantesFunciones.resaltarFK_IdFacturaDetalleFactura!=null) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdFacturaDetalleFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdFacturaDetalleFactura);
			}
		}

		if(this.detallefacturaConstantesFunciones.resaltarFK_IdProductoDetalleFactura!=null) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdProductoDetalleFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdProductoDetalleFactura);
			}
		}

		if(this.detallefacturaConstantesFunciones.resaltarFK_IdUnidadDetalleFactura!=null) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdUnidadDetalleFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdUnidadDetalleFactura);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleFactura() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdBodegaDetalleFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaConstantesFunciones.mostrarFK_IdBodegaDetalleFactura);
			if(!this.detallefacturaConstantesFunciones.mostrarFK_IdBodegaDetalleFactura && index>-1) {
				this.jTabbedPaneBusquedasDetalleFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaConstantesFunciones.mostrarFK_IdCentroCostoDetalleFactura);
			if(!this.detallefacturaConstantesFunciones.mostrarFK_IdCentroCostoDetalleFactura && index>-1) {
				this.jTabbedPaneBusquedasDetalleFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdFacturaDetalleFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaConstantesFunciones.mostrarFK_IdFacturaDetalleFactura);
			if(!this.detallefacturaConstantesFunciones.mostrarFK_IdFacturaDetalleFactura && index>-1) {
				this.jTabbedPaneBusquedasDetalleFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdProductoDetalleFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaConstantesFunciones.mostrarFK_IdProductoDetalleFactura);
			if(!this.detallefacturaConstantesFunciones.mostrarFK_IdProductoDetalleFactura && index>-1) {
				this.jTabbedPaneBusquedasDetalleFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdUnidadDetalleFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaConstantesFunciones.mostrarFK_IdUnidadDetalleFactura);
			if(!this.detallefacturaConstantesFunciones.mostrarFK_IdUnidadDetalleFactura && index>-1) {
				this.jTabbedPaneBusquedasDetalleFactura.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetalleFactura() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdBodegaDetalleFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaConstantesFunciones.activarFK_IdBodegaDetalleFactura);
				this.jTabbedPaneBusquedasDetalleFactura.setEnabledAt(index,this.detallefacturaConstantesFunciones.activarFK_IdBodegaDetalleFactura);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaConstantesFunciones.activarFK_IdCentroCostoDetalleFactura);
				this.jTabbedPaneBusquedasDetalleFactura.setEnabledAt(index,this.detallefacturaConstantesFunciones.activarFK_IdCentroCostoDetalleFactura);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdFacturaDetalleFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaConstantesFunciones.activarFK_IdFacturaDetalleFactura);
				this.jTabbedPaneBusquedasDetalleFactura.setEnabledAt(index,this.detallefacturaConstantesFunciones.activarFK_IdFacturaDetalleFactura);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdProductoDetalleFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaConstantesFunciones.activarFK_IdProductoDetalleFactura);
				this.jTabbedPaneBusquedasDetalleFactura.setEnabledAt(index,this.detallefacturaConstantesFunciones.activarFK_IdProductoDetalleFactura);
			}

			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdUnidadDetalleFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaConstantesFunciones.activarFK_IdUnidadDetalleFactura);
				this.jTabbedPaneBusquedasDetalleFactura.setEnabledAt(index,this.detallefacturaConstantesFunciones.activarFK_IdUnidadDetalleFactura);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetalleFactura(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdBodegaDetalleFactura);

			this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);

			this.detallefacturaConstantesFunciones.setResaltarFK_IdBodegaDetalleFactura(resaltar);

			jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdBodegaDetalleFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFactura);

			this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);

			this.detallefacturaConstantesFunciones.setResaltarFK_IdCentroCostoDetalleFactura(resaltar);

			jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdCentroCostoDetalleFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdFacturaDetalleFactura);

			this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);

			this.detallefacturaConstantesFunciones.setResaltarFK_IdFacturaDetalleFactura(resaltar);

			jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdFacturaDetalleFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdProductoDetalleFactura);

			this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);

			this.detallefacturaConstantesFunciones.setResaltarFK_IdProductoDetalleFactura(resaltar);

			jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdProductoDetalleFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleFactura.indexOfComponent(this.jPanelFK_IdUnidadDetalleFactura);

			this.jTabbedPaneBusquedasDetalleFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFactura.getComponent(index);

			this.detallefacturaConstantesFunciones.setResaltarFK_IdUnidadDetalleFactura(resaltar);

			jPanel.setBorder(this.detallefacturaConstantesFunciones.resaltarFK_IdUnidadDetalleFactura);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetalleFactura.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleFactura() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleFactura();
		this.updateVisibilidadResaltarControlesFormularioDetalleFactura();
		this.updateHabilitarResaltarControlesFormularioDetalleFactura();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleFactura() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallefacturaConstantesFunciones.resaltaridDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltaridDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_empresaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_empresaDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_sucursalDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_sucursalDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_ejercicioDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_ejercicioDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_periodoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_periodoDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_anioDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_anioDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_mesDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_mesDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_facturaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_facturaDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_bodegaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_bodegaDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_productoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_productoDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_unidadDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_unidadDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarcodigo_loteDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarcodigo_loteDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarid_centro_costoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarid_centro_costoDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarfechaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarfechaDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltardescripcionDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltardescripcionDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarcantidadDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarcantidadDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarprecioDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarprecioDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarivaDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarivaDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltariva_valorDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltariva_valorDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltariceDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltariceDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarice_valorDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarice_valorDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltardescuentoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltardescuentoDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltardescuento_valorDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltardescuento_valorDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltardescuento2DetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltardescuento2DetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarsub_totalDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarsub_totalDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltartotalDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltartotalDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarmontoDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextFieldmontoDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarmontoDetalleFactura);}
		if(this.detallefacturaConstantesFunciones.resaltarnombreDetalleFactura!=null && this.jInternalFrameDetalleFormDetalleFactura!=null) {this.jInternalFrameDetalleFormDetalleFactura.jTextAreanombreDetalleFactura.setBorder(this.detallefacturaConstantesFunciones.resaltarnombreDetalleFactura);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleFactura() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
	
		//this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostraridDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelidDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostraridDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_empresaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_empresaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_empresaDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_sucursalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_sucursalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_sucursalDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_ejercicioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_ejercicioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_ejercicioDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_periodoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_periodoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_periodoDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_anioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_anioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_anioDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_mesDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_mesDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_mesDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_facturaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_facturaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_facturaDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_facturaDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_bodegaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_bodegaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_bodegaDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_productoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_productoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_productoDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_productoDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_unidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_unidadDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_unidadDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarcodigo_loteDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelcodigo_loteDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarcodigo_loteDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_centro_costoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelid_centro_costoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_centro_costoDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarid_centro_costoDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarfechaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelfechaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarfechaDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescripcionDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneldescripcionDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescripcionDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarcantidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelcantidadDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarcantidadDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarprecioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelprecioDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarprecioDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarivaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelivaDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarivaDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrariva_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneliva_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrariva_valorDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrariceDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneliceDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrariceDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarice_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelice_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarice_valorDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuentoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneldescuentoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuentoDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuento_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneldescuento_valorDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuento_valorDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuento2DetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneldescuento2DetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrardescuento2DetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarsub_totalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelsub_totalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarsub_totalDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrartotalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPaneltotalDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrartotalDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextFieldmontoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarmontoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelmontoDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarmontoDetalleFactura);
		//this.jInternalFrameDetalleFormDetalleFactura.jTextAreanombreDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarnombreDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jPanelnombreDetalleFactura.setVisible(this.detallefacturaConstantesFunciones.mostrarnombreDetalleFactura);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleFactura() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleFactura!=null) {
	
		this.jInternalFrameDetalleFormDetalleFactura.jLabelidDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activaridDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_empresaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_empresaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_sucursalDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_sucursalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_ejercicioDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_ejercicioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_periodoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_periodoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_anioDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_anioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_mesDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_mesDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_facturaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_facturaDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_facturaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_facturaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_bodegaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_bodegaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_productoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_productoDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_productoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_productoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_unidadDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_unidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcodigo_loteDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarcodigo_loteDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jComboBoxid_centro_costoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_centro_costoDetalleFactura);
			this.jInternalFrameDetalleFormDetalleFactura.jButtonid_centro_costoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarid_centro_costoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jDateChooserfechaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarfechaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextAreadescripcionDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activardescripcionDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldcantidadDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarcantidadDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldprecioDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarprecioDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldivaDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarivaDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiva_valorDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activariva_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldiceDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activariceDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldice_valorDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarice_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuentoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activardescuentoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento_valorDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activardescuento_valorDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFielddescuento2DetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activardescuento2DetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldsub_totalDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarsub_totalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldtotalDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activartotalDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextFieldmontoDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarmontoDetalleFactura);
		this.jInternalFrameDetalleFormDetalleFactura.jTextAreanombreDetalleFactura.setEnabled(this.detallefacturaConstantesFunciones.activarnombreDetalleFactura);
		}
	}
	
		
}