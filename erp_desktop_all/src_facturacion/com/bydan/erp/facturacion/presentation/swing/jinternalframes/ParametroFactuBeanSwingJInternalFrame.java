/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.ParametroFactuConstantesFunciones;
import com.bydan.erp.facturacion.util.ParametroFactuParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.ParametroFactuParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.ParametroFactuBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ParametroFactuBeanSwingJInternalFrame extends ParametroFactuJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ParametroFactuBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ParametroFactu> parametrofactuValidator = new ClassValidator<ParametroFactu>(ParametroFactu.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ParametroFactu parametrofactu;	
	public ParametroFactu parametrofactuAux;
	public ParametroFactu parametrofactuAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ParametroFactu parametrofactuTotales;
	public Long idParametroFactuActual;
	public Long iIdNuevoParametroFactu=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboCuentaContableFactu="";

	public List<CuentaContable> cuentacontablefactusForeignKey;

	public List<CuentaContable> getcuentacontablefactusForeignKey() {
		return cuentacontablefactusForeignKey;
	}

	public void setcuentacontablefactusForeignKey(List<CuentaContable> cuentacontablefactusForeignKey) {
		this.cuentacontablefactusForeignKey = cuentacontablefactusForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablefactuForeignKey;

	public CuentaContable getcuentacontablefactuForeignKey() {
		return cuentacontablefactuForeignKey;
	}

	public void setcuentacontablefactuForeignKey(CuentaContable cuentacontablefactuForeignKey) {
		this.cuentacontablefactuForeignKey = cuentacontablefactuForeignKey;
	}

	public String sFinalQueryComboCuentaContableFinan="";

	public List<CuentaContable> cuentacontablefinansForeignKey;

	public List<CuentaContable> getcuentacontablefinansForeignKey() {
		return cuentacontablefinansForeignKey;
	}

	public void setcuentacontablefinansForeignKey(List<CuentaContable> cuentacontablefinansForeignKey) {
		this.cuentacontablefinansForeignKey = cuentacontablefinansForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablefinanForeignKey;

	public CuentaContable getcuentacontablefinanForeignKey() {
		return cuentacontablefinanForeignKey;
	}

	public void setcuentacontablefinanForeignKey(CuentaContable cuentacontablefinanForeignKey) {
		this.cuentacontablefinanForeignKey = cuentacontablefinanForeignKey;
	}

	public String sFinalQueryComboCuentaContableOtro="";

	public List<CuentaContable> cuentacontableotrosForeignKey;

	public List<CuentaContable> getcuentacontableotrosForeignKey() {
		return cuentacontableotrosForeignKey;
	}

	public void setcuentacontableotrosForeignKey(List<CuentaContable> cuentacontableotrosForeignKey) {
		this.cuentacontableotrosForeignKey = cuentacontableotrosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableotroForeignKey;

	public CuentaContable getcuentacontableotroForeignKey() {
		return cuentacontableotroForeignKey;
	}

	public void setcuentacontableotroForeignKey(CuentaContable cuentacontableotroForeignKey) {
		this.cuentacontableotroForeignKey = cuentacontableotroForeignKey;
	}

	public String sFinalQueryComboFormatoProforma="";

	public List<Formato> formatoproformasForeignKey;

	public List<Formato> getformatoproformasForeignKey() {
		return formatoproformasForeignKey;
	}

	public void setformatoproformasForeignKey(List<Formato> formatoproformasForeignKey) {
		this.formatoproformasForeignKey = formatoproformasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoproformaForeignKey;

	public Formato getformatoproformaForeignKey() {
		return formatoproformaForeignKey;
	}

	public void setformatoproformaForeignKey(Formato formatoproformaForeignKey) {
		this.formatoproformaForeignKey = formatoproformaForeignKey;
	}

	public String sFinalQueryComboFormatoPedido="";

	public List<Formato> formatopedidosForeignKey;

	public List<Formato> getformatopedidosForeignKey() {
		return formatopedidosForeignKey;
	}

	public void setformatopedidosForeignKey(List<Formato> formatopedidosForeignKey) {
		this.formatopedidosForeignKey = formatopedidosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatopedidoForeignKey;

	public Formato getformatopedidoForeignKey() {
		return formatopedidoForeignKey;
	}

	public void setformatopedidoForeignKey(Formato formatopedidoForeignKey) {
		this.formatopedidoForeignKey = formatopedidoForeignKey;
	}

	public String sFinalQueryComboFormatoFactura="";

	public List<Formato> formatofacturasForeignKey;

	public List<Formato> getformatofacturasForeignKey() {
		return formatofacturasForeignKey;
	}

	public void setformatofacturasForeignKey(List<Formato> formatofacturasForeignKey) {
		this.formatofacturasForeignKey = formatofacturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatofacturaForeignKey;

	public Formato getformatofacturaForeignKey() {
		return formatofacturaForeignKey;
	}

	public void setformatofacturaForeignKey(Formato formatofacturaForeignKey) {
		this.formatofacturaForeignKey = formatofacturaForeignKey;
	}

	public String sFinalQueryComboFormatoNotaCredito="";

	public List<Formato> formatonotacreditosForeignKey;

	public List<Formato> getformatonotacreditosForeignKey() {
		return formatonotacreditosForeignKey;
	}

	public void setformatonotacreditosForeignKey(List<Formato> formatonotacreditosForeignKey) {
		this.formatonotacreditosForeignKey = formatonotacreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatonotacreditoForeignKey;

	public Formato getformatonotacreditoForeignKey() {
		return formatonotacreditoForeignKey;
	}

	public void setformatonotacreditoForeignKey(Formato formatonotacreditoForeignKey) {
		this.formatonotacreditoForeignKey = formatonotacreditoForeignKey;
	}

	public String sFinalQueryComboFormatoInventario="";

	public List<Formato> formatoinventariosForeignKey;

	public List<Formato> getformatoinventariosForeignKey() {
		return formatoinventariosForeignKey;
	}

	public void setformatoinventariosForeignKey(List<Formato> formatoinventariosForeignKey) {
		this.formatoinventariosForeignKey = formatoinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoinventarioForeignKey;

	public Formato getformatoinventarioForeignKey() {
		return formatoinventarioForeignKey;
	}

	public void setformatoinventarioForeignKey(Formato formatoinventarioForeignKey) {
		this.formatoinventarioForeignKey = formatoinventarioForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCuentaContableFactuActual=0L;

	public Long getidCuentaContableFactuActual() {
		return idCuentaContableFactuActual;
	}

	public void setidCuentaContableFactuActual(Long idCuentaContableFactuActual) {
		this.idCuentaContableFactuActual= idCuentaContableFactuActual;
	}
	public Long idCuentaContableFinanActual=0L;

	public Long getidCuentaContableFinanActual() {
		return idCuentaContableFinanActual;
	}

	public void setidCuentaContableFinanActual(Long idCuentaContableFinanActual) {
		this.idCuentaContableFinanActual= idCuentaContableFinanActual;
	}
	public Long idCuentaContableOtroActual=0L;

	public Long getidCuentaContableOtroActual() {
		return idCuentaContableOtroActual;
	}

	public void setidCuentaContableOtroActual(Long idCuentaContableOtroActual) {
		this.idCuentaContableOtroActual= idCuentaContableOtroActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoParametroFactu;
	public Boolean isPermisoNuevoParametroFactu;
	public Boolean isPermisoActualizarParametroFactu;
	public Boolean isPermisoActualizarOriginalParametroFactu;
	public Boolean isPermisoEliminarParametroFactu;
	public Boolean isPermisoGuardarCambiosParametroFactu;
	public Boolean isPermisoConsultaParametroFactu;
	public Boolean isPermisoBusquedaParametroFactu;
	public Boolean isPermisoReporteParametroFactu;
	public Boolean isPermisoPaginacionMedioParametroFactu;
	public Boolean isPermisoPaginacionAltoParametroFactu;
	public Boolean isPermisoPaginacionTodoParametroFactu;
	public Boolean isPermisoCopiarParametroFactu;
	public Boolean isPermisoVerFormParametroFactu;
	public Boolean isPermisoDuplicarParametroFactu;
	public Boolean isPermisoOrdenParametroFactu;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ParametroFactuParameterReturnGeneral parametrofactuReturnGeneral;
	public ParametroFactuParameterReturnGeneral parametrofactuParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoParametroFactu=false;
	public Boolean esParaAccionDesdeFormularioParametroFactu=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ParametroFactuSessionBeanAdditional parametrofactuSessionBeanAdditional=null;
	
	public ParametroFactuSessionBeanAdditional getParametroFactuSessionBeanAdditional() {
		return this.parametrofactuSessionBeanAdditional;
	}
	
	public void setParametroFactuSessionBeanAdditional(ParametroFactuSessionBeanAdditional parametrofactuSessionBeanAdditional) {
		try {
			this.parametrofactuSessionBeanAdditional=parametrofactuSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ParametroFactuBeanSwingJInternalFrameAdditional parametrofactuBeanSwingJInternalFrameAdditional=null;
	//public class ParametroFactuBeanSwingJInternalFrame
	
	public ParametroFactuBeanSwingJInternalFrameAdditional getParametroFactuBeanSwingJInternalFrameAdditional() {
		return this.parametrofactuBeanSwingJInternalFrameAdditional;
	}
	
	public void setParametroFactuBeanSwingJInternalFrameAdditional(ParametroFactuBeanSwingJInternalFrameAdditional parametrofactuBeanSwingJInternalFrameAdditional) {
		try {
			this.parametrofactuBeanSwingJInternalFrameAdditional=parametrofactuBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ParametroFactuLogic parametrofactuLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ParametroFactu parametrofactuBean;
	public ParametroFactuConstantesFunciones parametrofactuConstantesFunciones;
	//public ParametroFactuParameterReturnGeneral parametrofactuReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public CuentaContableLogic cuentacontablefactuLogic;
	public CuentaContableLogic cuentacontablefinanLogic;
	public CuentaContableLogic cuentacontableotroLogic;
	public FormatoLogic formatoproformaLogic;
	public FormatoLogic formatopedidoLogic;
	public FormatoLogic formatofacturaLogic;
	public FormatoLogic formatonotacreditoLogic;
	public FormatoLogic formatoinventarioLogic;
	
	//PARAMETROS
	
	
	//public List<ParametroFactu> parametrofactus;	
	//public List<ParametroFactu> parametrofactusEliminados;
	//public List<ParametroFactu> parametrofactusAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoParametroFactu=false;
	public Boolean isVisibilidadCeldaDuplicarParametroFactu=true;
	public Boolean isVisibilidadCeldaCopiarParametroFactu=true;
	public Boolean isVisibilidadCeldaVerFormParametroFactu=true;
	public Boolean isVisibilidadCeldaOrdenParametroFactu=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
	public Boolean isVisibilidadCeldaModificarParametroFactu=false;
	public Boolean isVisibilidadCeldaActualizarParametroFactu=false;
	public Boolean isVisibilidadCeldaEliminarParametroFactu=false;
	public Boolean isVisibilidadCeldaCancelarParametroFactu=false;
	public Boolean isVisibilidadCeldaGuardarParametroFactu=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosParametroFactu=false;	
	
	
	public Boolean isVisibilidadFK_IdCuentaContableFactu=false;
	public Boolean isVisibilidadFK_IdCuentaContableFinan=false;
	public Boolean isVisibilidadFK_IdCuentaContableOtro=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFormatoFactura=false;
	public Boolean isVisibilidadFK_IdFormatoInventario=false;
	public Boolean isVisibilidadFK_IdFormatoNotaCredito=false;
	public Boolean isVisibilidadFK_IdFormatoPedo=false;
	public Boolean isVisibilidadFK_IdFormatoProforma=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	
	public Long getiIdNuevoParametroFactu() {
		return this.iIdNuevoParametroFactu;
	}

	public void setiIdNuevoParametroFactu(Long iIdNuevoParametroFactu) {
		this.iIdNuevoParametroFactu = iIdNuevoParametroFactu;
	}
	
	public Long getidParametroFactuActual() {
		return this.idParametroFactuActual;
	}

	public void setidParametroFactuActual(Long idParametroFactuActual) {
		this.idParametroFactuActual = idParametroFactuActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ParametroFactu getparametrofactu() {
		return this.parametrofactu;
	}

	public void setparametrofactu(ParametroFactu parametrofactu) {
		this.parametrofactu = parametrofactu;
	}
	
	public ParametroFactu getparametrofactuAux() {
		return this.parametrofactuAux;
	}

	public void setparametrofactuAux(ParametroFactu parametrofactuAux) {
		this.parametrofactuAux = parametrofactuAux;
	}				
	
	public ParametroFactu getparametrofactuAnterior() {
		return this.parametrofactuAnterior;
	}

	public void setparametrofactuAnterior(ParametroFactu parametrofactuAnterior) {
		this.parametrofactuAnterior = parametrofactuAnterior;
	}	
	
	public ParametroFactu getparametrofactuTotales() {
		return this.parametrofactuTotales;
	}

	public void setparametrofactuTotales(ParametroFactu parametrofactuTotales) {
		this.parametrofactuTotales = parametrofactuTotales;
	}	
	
	public ParametroFactu getparametrofactuBean() {
		return this.parametrofactuBean;
	}

	public void setparametrofactuBean(ParametroFactu parametrofactuBean) {
		this.parametrofactuBean = parametrofactuBean;
	}	
	
	public ParametroFactuParameterReturnGeneral getparametrofactuReturnGeneral() {
		return this.parametrofactuReturnGeneral;
	}

	public void setparametrofactuReturnGeneral(ParametroFactuParameterReturnGeneral parametrofactuReturnGeneral) {
		this.parametrofactuReturnGeneral = parametrofactuReturnGeneral;
	}	
	
	
	public Long id_cuenta_contable_factuFK_IdCuentaContableFactu=-1L;

	public Long getid_cuenta_contable_factuFK_IdCuentaContableFactu() {
		return this.id_cuenta_contable_factuFK_IdCuentaContableFactu;
	}

	public void setid_cuenta_contable_factuFK_IdCuentaContableFactu(Long id_cuenta_contable_factuFK_IdCuentaContableFactu) {
		this.id_cuenta_contable_factuFK_IdCuentaContableFactu = id_cuenta_contable_factuFK_IdCuentaContableFactu;
	}

	public Long id_cuenta_contable_finanFK_IdCuentaContableFinan=-1L;

	public Long getid_cuenta_contable_finanFK_IdCuentaContableFinan() {
		return this.id_cuenta_contable_finanFK_IdCuentaContableFinan;
	}

	public void setid_cuenta_contable_finanFK_IdCuentaContableFinan(Long id_cuenta_contable_finanFK_IdCuentaContableFinan) {
		this.id_cuenta_contable_finanFK_IdCuentaContableFinan = id_cuenta_contable_finanFK_IdCuentaContableFinan;
	}

	public Long id_cuenta_contable_otroFK_IdCuentaContableOtro=-1L;

	public Long getid_cuenta_contable_otroFK_IdCuentaContableOtro() {
		return this.id_cuenta_contable_otroFK_IdCuentaContableOtro;
	}

	public void setid_cuenta_contable_otroFK_IdCuentaContableOtro(Long id_cuenta_contable_otroFK_IdCuentaContableOtro) {
		this.id_cuenta_contable_otroFK_IdCuentaContableOtro = id_cuenta_contable_otroFK_IdCuentaContableOtro;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_formato_facturaFK_IdFormatoFactura=-1L;

	public Long getid_formato_facturaFK_IdFormatoFactura() {
		return this.id_formato_facturaFK_IdFormatoFactura;
	}

	public void setid_formato_facturaFK_IdFormatoFactura(Long id_formato_facturaFK_IdFormatoFactura) {
		this.id_formato_facturaFK_IdFormatoFactura = id_formato_facturaFK_IdFormatoFactura;
	}

	public Long id_formato_inventarioFK_IdFormatoInventario=-1L;

	public Long getid_formato_inventarioFK_IdFormatoInventario() {
		return this.id_formato_inventarioFK_IdFormatoInventario;
	}

	public void setid_formato_inventarioFK_IdFormatoInventario(Long id_formato_inventarioFK_IdFormatoInventario) {
		this.id_formato_inventarioFK_IdFormatoInventario = id_formato_inventarioFK_IdFormatoInventario;
	}

	public Long id_formato_nota_creditoFK_IdFormatoNotaCredito=-1L;

	public Long getid_formato_nota_creditoFK_IdFormatoNotaCredito() {
		return this.id_formato_nota_creditoFK_IdFormatoNotaCredito;
	}

	public void setid_formato_nota_creditoFK_IdFormatoNotaCredito(Long id_formato_nota_creditoFK_IdFormatoNotaCredito) {
		this.id_formato_nota_creditoFK_IdFormatoNotaCredito = id_formato_nota_creditoFK_IdFormatoNotaCredito;
	}

	public Long id_formato_pedidoFK_IdFormatoPedo=-1L;

	public Long getid_formato_pedidoFK_IdFormatoPedo() {
		return this.id_formato_pedidoFK_IdFormatoPedo;
	}

	public void setid_formato_pedidoFK_IdFormatoPedo(Long id_formato_pedidoFK_IdFormatoPedo) {
		this.id_formato_pedidoFK_IdFormatoPedo = id_formato_pedidoFK_IdFormatoPedo;
	}

	public Long id_formato_proformaFK_IdFormatoProforma=-1L;

	public Long getid_formato_proformaFK_IdFormatoProforma() {
		return this.id_formato_proformaFK_IdFormatoProforma;
	}

	public void setid_formato_proformaFK_IdFormatoProforma(Long id_formato_proformaFK_IdFormatoProforma) {
		this.id_formato_proformaFK_IdFormatoProforma = id_formato_proformaFK_IdFormatoProforma;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ParametroFactuLogic getParametroFactuLogic()	{		
		return parametrofactuLogic;
	}

	public void setParametroFactuLogic(ParametroFactuLogic parametrofactuLogic) {
		this.parametrofactuLogic = parametrofactuLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoParametroFactu() {
		return isEsNuevoParametroFactu;
	}

	public void setIsEsNuevoParametroFactu(Boolean isEsNuevoParametroFactu) {
		this.isEsNuevoParametroFactu = isEsNuevoParametroFactu;
	}

	public Boolean getEsParaAccionDesdeFormularioParametroFactu() {
		return esParaAccionDesdeFormularioParametroFactu;
	}
	
	public void setEsParaAccionDesdeFormularioParametroFactu(Boolean esParaAccionDesdeFormularioParametroFactu) {
		this.esParaAccionDesdeFormularioParametroFactu = esParaAccionDesdeFormularioParametroFactu;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(parametrofactuSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(parametrofactuSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableFactusForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablefactusForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFactu()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablefactuLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablefactusForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableFactu(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrofactuSessionBean.getlidCuentaContableFactuActual());
					this.cuentacontablefactusForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableFinansForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablefinansForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFinan()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablefinanLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablefinansForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableFinan(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrofactuSessionBean.getlidCuentaContableFinanActual());
					this.cuentacontablefinansForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableOtrosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableotrosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableOtro()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableotroLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableotrosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableOtro(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrofactuSessionBean.getlidCuentaContableOtroActual());
					this.cuentacontableotrosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoProformasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoproformasForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoProforma()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoproformaLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoproformasForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoProforma(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametrofactuSessionBean.getlidFormatoProformaActual());
					this.formatoproformasForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoPedidosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatopedidosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatopedidoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatopedidosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoPedido(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametrofactuSessionBean.getlidFormatoPedidoActual());
					this.formatopedidosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatofacturasForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatofacturaLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatofacturasForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametrofactuSessionBean.getlidFormatoFacturaActual());
					this.formatofacturasForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoNotaCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatonotacreditosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoNotaCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatonotacreditoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatonotacreditosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoNotaCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametrofactuSessionBean.getlidFormatoNotaCreditoActual());
					this.formatonotacreditosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoinventariosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoinventarioLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoinventariosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametrofactuSessionBean.getlidFormatoInventarioActual());
					this.formatoinventariosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaParametroFactu.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaParametroFactuGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaParametroFactuGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaParametroFactuGenerico!=null && jComboBoxid_empresaParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_empresaParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalParametroFactu.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalParametroFactuGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalParametroFactuGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalParametroFactuGenerico!=null && jComboBoxid_sucursalParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_sucursalParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableFactuForeignKey(Long idCuentaContableFactuSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefactuTemp=null;

			for(CuentaContable cuentacontablefactuAux:cuentacontablefactusForeignKey) {
				if(cuentacontablefactuAux.getId()!=null && cuentacontablefactuAux.getId().equals(idCuentaContableFactuSeleccionado)) {
					cuentacontablefactuTemp=cuentacontablefactuAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablefactuTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setCuentaContableFactu(cuentacontablefactuTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedItem(cuentacontablefactuTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedItem(cuentacontablefactuTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFactu") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablefactuTemp!=null && jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu!=null) {
						jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.setSelectedItem(cuentacontablefactuTemp);
					} else {
						if(jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu!=null) {
							//jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.setSelectedItem(cuentacontablefactuTemp);
							if(jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.getItemCount()>0) {
								jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableFactuForeignKeyDescripcion(Long idCuentaContableFactuSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablefactuTemp=null;

			for(CuentaContable cuentacontablefactuAux:cuentacontablefactusForeignKey) {
				if(cuentacontablefactuAux.getId()!=null && cuentacontablefactuAux.getId().equals(idCuentaContableFactuSeleccionado)) {
					cuentacontablefactuTemp=cuentacontablefactuAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablefactuTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableFactuForeignKeyGenerico(Long idCuentaContableFactuSeleccionado,JComboBox jComboBoxid_cuenta_contable_factuParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefactuTemp=null;

			for(CuentaContable cuentacontablefactuAux:cuentacontablefactusForeignKey) {
				if(cuentacontablefactuAux.getId()!=null && cuentacontablefactuAux.getId().equals(idCuentaContableFactuSeleccionado)) {
					cuentacontablefactuTemp=cuentacontablefactuAux;
					break;
				}
			}

			if(cuentacontablefactuTemp!=null) {
				jComboBoxid_cuenta_contable_factuParametroFactuGenerico.setSelectedItem(cuentacontablefactuTemp);
			} else {
				if(jComboBoxid_cuenta_contable_factuParametroFactuGenerico!=null && jComboBoxid_cuenta_contable_factuParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_factuParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableFinanForeignKey(Long idCuentaContableFinanSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefinanTemp=null;

			for(CuentaContable cuentacontablefinanAux:cuentacontablefinansForeignKey) {
				if(cuentacontablefinanAux.getId()!=null && cuentacontablefinanAux.getId().equals(idCuentaContableFinanSeleccionado)) {
					cuentacontablefinanTemp=cuentacontablefinanAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablefinanTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setCuentaContableFinan(cuentacontablefinanTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedItem(cuentacontablefinanTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedItem(cuentacontablefinanTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFinan") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablefinanTemp!=null && jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu!=null) {
						jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.setSelectedItem(cuentacontablefinanTemp);
					} else {
						if(jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu!=null) {
							//jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.setSelectedItem(cuentacontablefinanTemp);
							if(jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.getItemCount()>0) {
								jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableFinanForeignKeyDescripcion(Long idCuentaContableFinanSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablefinanTemp=null;

			for(CuentaContable cuentacontablefinanAux:cuentacontablefinansForeignKey) {
				if(cuentacontablefinanAux.getId()!=null && cuentacontablefinanAux.getId().equals(idCuentaContableFinanSeleccionado)) {
					cuentacontablefinanTemp=cuentacontablefinanAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablefinanTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableFinanForeignKeyGenerico(Long idCuentaContableFinanSeleccionado,JComboBox jComboBoxid_cuenta_contable_finanParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefinanTemp=null;

			for(CuentaContable cuentacontablefinanAux:cuentacontablefinansForeignKey) {
				if(cuentacontablefinanAux.getId()!=null && cuentacontablefinanAux.getId().equals(idCuentaContableFinanSeleccionado)) {
					cuentacontablefinanTemp=cuentacontablefinanAux;
					break;
				}
			}

			if(cuentacontablefinanTemp!=null) {
				jComboBoxid_cuenta_contable_finanParametroFactuGenerico.setSelectedItem(cuentacontablefinanTemp);
			} else {
				if(jComboBoxid_cuenta_contable_finanParametroFactuGenerico!=null && jComboBoxid_cuenta_contable_finanParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_finanParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableOtroForeignKey(Long idCuentaContableOtroSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableotroTemp=null;

			for(CuentaContable cuentacontableotroAux:cuentacontableotrosForeignKey) {
				if(cuentacontableotroAux.getId()!=null && cuentacontableotroAux.getId().equals(idCuentaContableOtroSeleccionado)) {
					cuentacontableotroTemp=cuentacontableotroAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableotroTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setCuentaContableOtro(cuentacontableotroTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedItem(cuentacontableotroTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedItem(cuentacontableotroTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableOtro") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableotroTemp!=null && jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu!=null) {
						jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.setSelectedItem(cuentacontableotroTemp);
					} else {
						if(jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu!=null) {
							//jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.setSelectedItem(cuentacontableotroTemp);
							if(jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.getItemCount()>0) {
								jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableOtroForeignKeyDescripcion(Long idCuentaContableOtroSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableotroTemp=null;

			for(CuentaContable cuentacontableotroAux:cuentacontableotrosForeignKey) {
				if(cuentacontableotroAux.getId()!=null && cuentacontableotroAux.getId().equals(idCuentaContableOtroSeleccionado)) {
					cuentacontableotroTemp=cuentacontableotroAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableotroTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableOtroForeignKeyGenerico(Long idCuentaContableOtroSeleccionado,JComboBox jComboBoxid_cuenta_contable_otroParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableotroTemp=null;

			for(CuentaContable cuentacontableotroAux:cuentacontableotrosForeignKey) {
				if(cuentacontableotroAux.getId()!=null && cuentacontableotroAux.getId().equals(idCuentaContableOtroSeleccionado)) {
					cuentacontableotroTemp=cuentacontableotroAux;
					break;
				}
			}

			if(cuentacontableotroTemp!=null) {
				jComboBoxid_cuenta_contable_otroParametroFactuGenerico.setSelectedItem(cuentacontableotroTemp);
			} else {
				if(jComboBoxid_cuenta_contable_otroParametroFactuGenerico!=null && jComboBoxid_cuenta_contable_otroParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_otroParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoProformaForeignKey(Long idFormatoProformaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoproformaTemp=null;

			for(Formato formatoproformaAux:formatoproformasForeignKey) {
				if(formatoproformaAux.getId()!=null && formatoproformaAux.getId().equals(idFormatoProformaSeleccionado)) {
					formatoproformaTemp=formatoproformaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoproformaTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setFormatoProforma(formatoproformaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setSelectedItem(formatoproformaTemp);
					}
				} else {
					//jComboBoxid_formato_proformaParametroFactu.setSelectedItem(formatoproformaTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoProforma") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoproformaTemp!=null && jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu!=null) {
						jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.setSelectedItem(formatoproformaTemp);
					} else {
						if(jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu!=null) {
							//jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.setSelectedItem(formatoproformaTemp);
							if(jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.getItemCount()>0) {
								jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoProformaForeignKeyDescripcion(Long idFormatoProformaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoproformaTemp=null;

			for(Formato formatoproformaAux:formatoproformasForeignKey) {
				if(formatoproformaAux.getId()!=null && formatoproformaAux.getId().equals(idFormatoProformaSeleccionado)) {
					formatoproformaTemp=formatoproformaAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoproformaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoProformaForeignKeyGenerico(Long idFormatoProformaSeleccionado,JComboBox jComboBoxid_formato_proformaParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoproformaTemp=null;

			for(Formato formatoproformaAux:formatoproformasForeignKey) {
				if(formatoproformaAux.getId()!=null && formatoproformaAux.getId().equals(idFormatoProformaSeleccionado)) {
					formatoproformaTemp=formatoproformaAux;
					break;
				}
			}

			if(formatoproformaTemp!=null) {
				jComboBoxid_formato_proformaParametroFactuGenerico.setSelectedItem(formatoproformaTemp);
			} else {
				if(jComboBoxid_formato_proformaParametroFactuGenerico!=null && jComboBoxid_formato_proformaParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_formato_proformaParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoPedidoForeignKey(Long idFormatoPedidoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatopedidoTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setFormatoPedido(formatopedidoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setSelectedItem(formatopedidoTemp);
					}
				} else {
					//jComboBoxid_formato_pedidoParametroFactu.setSelectedItem(formatopedidoTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoPedo") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatopedidoTemp!=null && jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu!=null) {
						jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.setSelectedItem(formatopedidoTemp);
					} else {
						if(jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu!=null) {
							//jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.setSelectedItem(formatopedidoTemp);
							if(jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.getItemCount()>0) {
								jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoPedidoForeignKeyDescripcion(Long idFormatoPedidoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatopedidoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoPedidoForeignKeyGenerico(Long idFormatoPedidoSeleccionado,JComboBox jComboBoxid_formato_pedidoParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}

			if(formatopedidoTemp!=null) {
				jComboBoxid_formato_pedidoParametroFactuGenerico.setSelectedItem(formatopedidoTemp);
			} else {
				if(jComboBoxid_formato_pedidoParametroFactuGenerico!=null && jComboBoxid_formato_pedidoParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_formato_pedidoParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoFacturaForeignKey(Long idFormatoFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatofacturaTemp=null;

			for(Formato formatofacturaAux:formatofacturasForeignKey) {
				if(formatofacturaAux.getId()!=null && formatofacturaAux.getId().equals(idFormatoFacturaSeleccionado)) {
					formatofacturaTemp=formatofacturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatofacturaTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setFormatoFactura(formatofacturaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setSelectedItem(formatofacturaTemp);
					}
				} else {
					//jComboBoxid_formato_facturaParametroFactu.setSelectedItem(formatofacturaTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatofacturaTemp!=null && jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu!=null) {
						jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.setSelectedItem(formatofacturaTemp);
					} else {
						if(jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu!=null) {
							//jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.setSelectedItem(formatofacturaTemp);
							if(jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.getItemCount()>0) {
								jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoFacturaForeignKeyDescripcion(Long idFormatoFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatofacturaTemp=null;

			for(Formato formatofacturaAux:formatofacturasForeignKey) {
				if(formatofacturaAux.getId()!=null && formatofacturaAux.getId().equals(idFormatoFacturaSeleccionado)) {
					formatofacturaTemp=formatofacturaAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatofacturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoFacturaForeignKeyGenerico(Long idFormatoFacturaSeleccionado,JComboBox jComboBoxid_formato_facturaParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatofacturaTemp=null;

			for(Formato formatofacturaAux:formatofacturasForeignKey) {
				if(formatofacturaAux.getId()!=null && formatofacturaAux.getId().equals(idFormatoFacturaSeleccionado)) {
					formatofacturaTemp=formatofacturaAux;
					break;
				}
			}

			if(formatofacturaTemp!=null) {
				jComboBoxid_formato_facturaParametroFactuGenerico.setSelectedItem(formatofacturaTemp);
			} else {
				if(jComboBoxid_formato_facturaParametroFactuGenerico!=null && jComboBoxid_formato_facturaParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_formato_facturaParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoNotaCreditoForeignKey(Long idFormatoNotaCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatonotacreditoTemp=null;

			for(Formato formatonotacreditoAux:formatonotacreditosForeignKey) {
				if(formatonotacreditoAux.getId()!=null && formatonotacreditoAux.getId().equals(idFormatoNotaCreditoSeleccionado)) {
					formatonotacreditoTemp=formatonotacreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatonotacreditoTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setFormatoNotaCredito(formatonotacreditoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setSelectedItem(formatonotacreditoTemp);
					}
				} else {
					//jComboBoxid_formato_nota_creditoParametroFactu.setSelectedItem(formatonotacreditoTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoNotaCredito") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatonotacreditoTemp!=null && jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu!=null) {
						jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.setSelectedItem(formatonotacreditoTemp);
					} else {
						if(jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu!=null) {
							//jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.setSelectedItem(formatonotacreditoTemp);
							if(jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.getItemCount()>0) {
								jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoNotaCreditoForeignKeyDescripcion(Long idFormatoNotaCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatonotacreditoTemp=null;

			for(Formato formatonotacreditoAux:formatonotacreditosForeignKey) {
				if(formatonotacreditoAux.getId()!=null && formatonotacreditoAux.getId().equals(idFormatoNotaCreditoSeleccionado)) {
					formatonotacreditoTemp=formatonotacreditoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatonotacreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoNotaCreditoForeignKeyGenerico(Long idFormatoNotaCreditoSeleccionado,JComboBox jComboBoxid_formato_nota_creditoParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatonotacreditoTemp=null;

			for(Formato formatonotacreditoAux:formatonotacreditosForeignKey) {
				if(formatonotacreditoAux.getId()!=null && formatonotacreditoAux.getId().equals(idFormatoNotaCreditoSeleccionado)) {
					formatonotacreditoTemp=formatonotacreditoAux;
					break;
				}
			}

			if(formatonotacreditoTemp!=null) {
				jComboBoxid_formato_nota_creditoParametroFactuGenerico.setSelectedItem(formatonotacreditoTemp);
			} else {
				if(jComboBoxid_formato_nota_creditoParametroFactuGenerico!=null && jComboBoxid_formato_nota_creditoParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_formato_nota_creditoParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoInventarioForeignKey(Long idFormatoInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoinventarioTemp=null;

			for(Formato formatoinventarioAux:formatoinventariosForeignKey) {
				if(formatoinventarioAux.getId()!=null && formatoinventarioAux.getId().equals(idFormatoInventarioSeleccionado)) {
					formatoinventarioTemp=formatoinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoinventarioTemp!=null) {

					if(this.parametrofactu!=null) {
						this.parametrofactu.setFormatoInventario(formatoinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setSelectedItem(formatoinventarioTemp);
					}
				} else {
					//jComboBoxid_formato_inventarioParametroFactu.setSelectedItem(formatoinventarioTemp);
					if(this.jInternalFrameDetalleFormParametroFactu!=null) {
						if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoinventarioTemp!=null && jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu!=null) {
						jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.setSelectedItem(formatoinventarioTemp);
					} else {
						if(jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu!=null) {
							//jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.setSelectedItem(formatoinventarioTemp);
							if(jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.getItemCount()>0) {
								jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoInventarioForeignKeyDescripcion(Long idFormatoInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoinventarioTemp=null;

			for(Formato formatoinventarioAux:formatoinventariosForeignKey) {
				if(formatoinventarioAux.getId()!=null && formatoinventarioAux.getId().equals(idFormatoInventarioSeleccionado)) {
					formatoinventarioTemp=formatoinventarioAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoInventarioForeignKeyGenerico(Long idFormatoInventarioSeleccionado,JComboBox jComboBoxid_formato_inventarioParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoinventarioTemp=null;

			for(Formato formatoinventarioAux:formatoinventariosForeignKey) {
				if(formatoinventarioAux.getId()!=null && formatoinventarioAux.getId().equals(idFormatoInventarioSeleccionado)) {
					formatoinventarioTemp=formatoinventarioAux;
					break;
				}
			}

			if(formatoinventarioTemp!=null) {
				jComboBoxid_formato_inventarioParametroFactuGenerico.setSelectedItem(formatoinventarioTemp);
			} else {
				if(jComboBoxid_formato_inventarioParametroFactuGenerico!=null && jComboBoxid_formato_inventarioParametroFactuGenerico.getItemCount()>0) {
					jComboBoxid_formato_inventarioParametroFactuGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_empresaParametroFactuGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaParametroFactuGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaParametroFactuGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				parametrofactu.setid_empresa(empresaAux.getId());
				parametrofactu.setempresa_descripcion(ParametroFactuConstantesFunciones.getEmpresaDescripcion(empresaAux));
				parametrofactu.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_sucursalParametroFactuGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalParametroFactuGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalParametroFactuGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				parametrofactu.setid_sucursal(sucursalAux.getId());
				parametrofactu.setsucursal_descripcion(ParametroFactuConstantesFunciones.getSucursalDescripcion(sucursalAux));
				parametrofactu.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableFactuForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_cuenta_contable_factuParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_factuParametroFactuGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_factuParametroFactuGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrofactu.setid_cuenta_contable_factu(cuentacontableAux.getId());
				parametrofactu.setcuentacontablefactu_descripcion(ParametroFactuConstantesFunciones.getCuentaContableFactuDescripcion(cuentacontableAux));
				parametrofactu.setCuentaContableFactu(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableFinanForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_cuenta_contable_finanParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_finanParametroFactuGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_finanParametroFactuGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrofactu.setid_cuenta_contable_finan(cuentacontableAux.getId());
				parametrofactu.setcuentacontablefinan_descripcion(ParametroFactuConstantesFunciones.getCuentaContableFinanDescripcion(cuentacontableAux));
				parametrofactu.setCuentaContableFinan(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableOtroForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_cuenta_contable_otroParametroFactuGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_otroParametroFactuGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_otroParametroFactuGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrofactu.setid_cuenta_contable_otro(cuentacontableAux.getId());
				parametrofactu.setcuentacontableotro_descripcion(ParametroFactuConstantesFunciones.getCuentaContableOtroDescripcion(cuentacontableAux));
				parametrofactu.setCuentaContableOtro(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoProformaForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_formato_proformaParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_proformaParametroFactuGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_proformaParametroFactuGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametrofactu.setid_formato_proforma(formatoAux.getId());
				parametrofactu.setformatoproforma_descripcion(ParametroFactuConstantesFunciones.getFormatoProformaDescripcion(formatoAux));
				parametrofactu.setFormatoProforma(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoPedidoForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_formato_pedidoParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_pedidoParametroFactuGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_pedidoParametroFactuGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametrofactu.setid_formato_pedido(formatoAux.getId());
				parametrofactu.setformatopedido_descripcion(ParametroFactuConstantesFunciones.getFormatoPedidoDescripcion(formatoAux));
				parametrofactu.setFormatoPedido(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoFacturaForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_formato_facturaParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_facturaParametroFactuGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_facturaParametroFactuGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametrofactu.setid_formato_factura(formatoAux.getId());
				parametrofactu.setformatofactura_descripcion(ParametroFactuConstantesFunciones.getFormatoFacturaDescripcion(formatoAux));
				parametrofactu.setFormatoFactura(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoNotaCreditoForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_formato_nota_creditoParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_nota_creditoParametroFactuGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_nota_creditoParametroFactuGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametrofactu.setid_formato_nota_credito(formatoAux.getId());
				parametrofactu.setformatonotacredito_descripcion(ParametroFactuConstantesFunciones.getFormatoNotaCreditoDescripcion(formatoAux));
				parametrofactu.setFormatoNotaCredito(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoInventarioForeignKey(ParametroFactu parametrofactu,JComboBox jComboBoxid_formato_inventarioParametroFactuGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_inventarioParametroFactuGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_inventarioParametroFactuGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametrofactu.setid_formato_inventario(formatoAux.getId());
				parametrofactu.setformatoinventario_descripcion(ParametroFactuConstantesFunciones.getFormatoInventarioDescripcion(formatoAux));
				parametrofactu.setFormatoInventario(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableFactusForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.removeAllItems();

							for(CuentaContable cuentacontablefactu:this.cuentacontablefactusForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.addItem(cuentacontablefactu);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFactu") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.removeAllItems();

							for(CuentaContable cuentacontablefactu:this.cuentacontablefactusForeignKey) {
								this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.addItem(cuentacontablefactu);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableFinansForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.removeAllItems();

							for(CuentaContable cuentacontablefinan:this.cuentacontablefinansForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.addItem(cuentacontablefinan);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFinan") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.removeAllItems();

							for(CuentaContable cuentacontablefinan:this.cuentacontablefinansForeignKey) {
								this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.addItem(cuentacontablefinan);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableOtrosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.removeAllItems();

							for(CuentaContable cuentacontableotro:this.cuentacontableotrosForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.addItem(cuentacontableotro);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableOtro") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.removeAllItems();

							for(CuentaContable cuentacontableotro:this.cuentacontableotrosForeignKey) {
								this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.addItem(cuentacontableotro);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoProformasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.removeAllItems();

							for(Formato formatoproforma:this.formatoproformasForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.addItem(formatoproforma);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoProforma") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.removeAllItems();

							for(Formato formatoproforma:this.formatoproformasForeignKey) {
								this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.addItem(formatoproforma);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoPedidosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.removeAllItems();

							for(Formato formatopedido:this.formatopedidosForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.addItem(formatopedido);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoPedo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.removeAllItems();

							for(Formato formatopedido:this.formatopedidosForeignKey) {
								this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.addItem(formatopedido);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.removeAllItems();

							for(Formato formatofactura:this.formatofacturasForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.addItem(formatofactura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.removeAllItems();

							for(Formato formatofactura:this.formatofacturasForeignKey) {
								this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.addItem(formatofactura);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoNotaCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.removeAllItems();

							for(Formato formatonotacredito:this.formatonotacreditosForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.addItem(formatonotacredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoNotaCredito") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.removeAllItems();

							for(Formato formatonotacredito:this.formatonotacreditosForeignKey) {
								this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.addItem(formatonotacredito);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.removeAllItems();

							for(Formato formatoinventario:this.formatoinventariosForeignKey) {
								this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.addItem(formatoinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroFactu!=null) { 
					}

					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.removeAllItems();

							for(Formato formatoinventario:this.formatoinventariosForeignKey) {
								this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.addItem(formatoinventario);
							}
						}

						if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableFactuForeignKey(CuentaContable cuentacontablefactu,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedItem(cuentacontablefactu);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.setSelectedItem(cuentacontablefactu);
						} else {
							this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableFinanForeignKey(CuentaContable cuentacontablefinan,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedItem(cuentacontablefinan);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.setSelectedItem(cuentacontablefinan);
						} else {
							this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableOtroForeignKey(CuentaContable cuentacontableotro,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedItem(cuentacontableotro);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.setSelectedItem(cuentacontableotro);
						} else {
							this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoProformaForeignKey(Formato formatoproforma,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setSelectedItem(formatoproforma);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.setSelectedItem(formatoproforma);
						} else {
							this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoPedidoForeignKey(Formato formatopedido,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setSelectedItem(formatopedido);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.setSelectedItem(formatopedido);
						} else {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoFacturaForeignKey(Formato formatofactura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setSelectedItem(formatofactura);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.setSelectedItem(formatofactura);
						} else {
							this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoNotaCreditoForeignKey(Formato formatonotacredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setSelectedItem(formatonotacredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.setSelectedItem(formatonotacredito);
						} else {
							this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoInventarioForeignKey(Formato formatoinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setSelectedItem(formatoinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroFactu!=null) {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.setSelectedItem(formatoinventario);
						} else {
							this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesParametroFactu() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ParametroFactuConstantesFunciones.refrescarForeignKeysDescripcionesParametroFactu(this.parametrofactuLogic.getParametroFactus());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ParametroFactuConstantesFunciones.refrescarForeignKeysDescripcionesParametroFactu(this.parametrofactus);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(Formato.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//parametrofactuLogic.setParametroFactus(this.parametrofactus);
			parametrofactuLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ParametroFactuParameterReturnGeneral getParametroFactuParameterGeneral() {
		return this.parametrofactuParameterGeneral;
	}
	
	public void setParametroFactuParameterGeneral(ParametroFactuParameterReturnGeneral parametrofactuParameterGeneral) {
		this.parametrofactuParameterGeneral = parametrofactuParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoParametroFactu() {
		return isPermisoTodoParametroFactu;
	}

	public void setIsPermisoTodoParametroFactu(Boolean isPermisoTodoParametroFactu) {
		this.isPermisoTodoParametroFactu = isPermisoTodoParametroFactu;
	}

	public Boolean getIsPermisoNuevoParametroFactu() {
		return isPermisoNuevoParametroFactu;
	}

	public void setIsPermisoNuevoParametroFactu(Boolean isPermisoNuevoParametroFactu) {
		this.isPermisoNuevoParametroFactu = isPermisoNuevoParametroFactu;
	}

	public Boolean getIsPermisoActualizarParametroFactu() {
		return isPermisoActualizarParametroFactu;
	}

	public void setIsPermisoActualizarParametroFactu(Boolean isPermisoActualizarParametroFactu) {
		this.isPermisoActualizarParametroFactu = isPermisoActualizarParametroFactu;
	}

	public Boolean getIsPermisoEliminarParametroFactu() {
		return isPermisoEliminarParametroFactu;
	}

	public void setIsPermisoEliminarParametroFactu(Boolean isPermisoEliminarParametroFactu) {
		this.isPermisoEliminarParametroFactu = isPermisoEliminarParametroFactu;
	}

	public Boolean getIsPermisoGuardarCambiosParametroFactu() {
		return isPermisoGuardarCambiosParametroFactu;
	}

	public void setIsPermisoGuardarCambiosParametroFactu(Boolean isPermisoGuardarCambiosParametroFactu) {
		this.isPermisoGuardarCambiosParametroFactu = isPermisoGuardarCambiosParametroFactu;
	}
	
	public Boolean getIsPermisoConsultaParametroFactu() {
		return isPermisoConsultaParametroFactu;
	}

	public void setIsPermisoConsultaParametroFactu(Boolean isPermisoConsultaParametroFactu) {
		this.isPermisoConsultaParametroFactu = isPermisoConsultaParametroFactu;
	}

	public Boolean getIsPermisoBusquedaParametroFactu() {
		return isPermisoBusquedaParametroFactu;
	}

	public void setIsPermisoBusquedaParametroFactu(Boolean isPermisoBusquedaParametroFactu) {
		this.isPermisoBusquedaParametroFactu = isPermisoBusquedaParametroFactu;
	}

	public Boolean getIsPermisoReporteParametroFactu() {
		return isPermisoReporteParametroFactu;
	}

	public void setIsPermisoReporteParametroFactu(Boolean isPermisoReporteParametroFactu) {
		this.isPermisoReporteParametroFactu = isPermisoReporteParametroFactu;
	}
	
	public Boolean getIsPermisoPaginacionMedioParametroFactu() {
		return isPermisoPaginacionMedioParametroFactu;
	}

	public void setIsPermisoPaginacionMedioParametroFactu(Boolean isPermisoPaginacionMedioParametroFactu) {
		this.isPermisoPaginacionMedioParametroFactu = isPermisoPaginacionMedioParametroFactu;
	}
	
	public Boolean getIsPermisoPaginacionTodoParametroFactu() {
		return isPermisoPaginacionTodoParametroFactu;
	}

	public void setIsPermisoPaginacionTodoParametroFactu(Boolean isPermisoPaginacionTodoParametroFactu) {
		this.isPermisoPaginacionTodoParametroFactu = isPermisoPaginacionTodoParametroFactu;
	}
	
	public Boolean getIsPermisoPaginacionAltoParametroFactu() {
		return isPermisoPaginacionAltoParametroFactu;
	}

	public void setIsPermisoPaginacionAltoParametroFactu(Boolean isPermisoPaginacionAltoParametroFactu) {
		this.isPermisoPaginacionAltoParametroFactu = isPermisoPaginacionAltoParametroFactu;
	}
	
	public Boolean getIsPermisoCopiarParametroFactu() {
		return isPermisoCopiarParametroFactu;
	}

	public void setIsPermisoCopiarParametroFactu(Boolean isPermisoCopiarParametroFactu) {
		this.isPermisoCopiarParametroFactu = isPermisoCopiarParametroFactu;
	}
	
	public Boolean getIsPermisoVerFormParametroFactu() {
		return isPermisoVerFormParametroFactu;
	}

	public void setIsPermisoVerFormParametroFactu(Boolean isPermisoVerFormParametroFactu) {
		this.isPermisoVerFormParametroFactu = isPermisoVerFormParametroFactu;
	}
	
	public Boolean getIsPermisoDuplicarParametroFactu() {
		return isPermisoDuplicarParametroFactu;
	}

	public void setIsPermisoDuplicarParametroFactu(Boolean isPermisoDuplicarParametroFactu) {
		this.isPermisoDuplicarParametroFactu = isPermisoDuplicarParametroFactu;
	}
	
	public Boolean getIsPermisoOrdenParametroFactu() {
		return isPermisoOrdenParametroFactu;
	}

	public void setIsPermisoOrdenParametroFactu(Boolean isPermisoOrdenParametroFactu) {
		this.isPermisoOrdenParametroFactu = isPermisoOrdenParametroFactu;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoParametroFactu() {
		return isVisibilidadCeldaNuevoParametroFactu;
	}

	public void setIsVisibilidadCeldaNuevoParametroFactu(Boolean isVisibilidadCeldaNuevoParametroFactu) {
		this.isVisibilidadCeldaNuevoParametroFactu = isVisibilidadCeldaNuevoParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarParametroFactu() {
		return isVisibilidadCeldaDuplicarParametroFactu;
	}

	public void setIsVisibilidadCeldaDuplicarParametroFactu(Boolean isVisibilidadCeldaDuplicarParametroFactu) {
		this.isVisibilidadCeldaDuplicarParametroFactu = isVisibilidadCeldaDuplicarParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarParametroFactu() {
		return isVisibilidadCeldaCopiarParametroFactu;
	}

	public void setIsVisibilidadCeldaCopiarParametroFactu(Boolean isVisibilidadCeldaCopiarParametroFactu) {
		this.isVisibilidadCeldaCopiarParametroFactu = isVisibilidadCeldaCopiarParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormParametroFactu() {
		return isVisibilidadCeldaVerFormParametroFactu;
	}

	public void setIsVisibilidadCeldaVerFormParametroFactu(Boolean isVisibilidadCeldaVerFormParametroFactu) {
		this.isVisibilidadCeldaVerFormParametroFactu = isVisibilidadCeldaVerFormParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenParametroFactu() {
		return isVisibilidadCeldaOrdenParametroFactu;
	}

	public void setIsVisibilidadCeldaOrdenParametroFactu(Boolean isVisibilidadCeldaOrdenParametroFactu) {
		this.isVisibilidadCeldaOrdenParametroFactu = isVisibilidadCeldaOrdenParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesParametroFactu() {
		return isVisibilidadCeldaNuevoRelacionesParametroFactu;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesParametroFactu(Boolean isVisibilidadCeldaNuevoRelacionesParametroFactu) {
		this.isVisibilidadCeldaNuevoRelacionesParametroFactu = isVisibilidadCeldaNuevoRelacionesParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaModificarParametroFactu() {
		return isVisibilidadCeldaModificarParametroFactu;
	}

	public void setIsVisibilidadCeldaModificarParametroFactu(Boolean isVisibilidadCeldaModificarParametroFactu) {
		this.isVisibilidadCeldaModificarParametroFactu = isVisibilidadCeldaModificarParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarParametroFactu() {
		return isVisibilidadCeldaActualizarParametroFactu;
	}

	public void setIsVisibilidadCeldaActualizarParametroFactu(Boolean isVisibilidadCeldaActualizarParametroFactu) {
		this.isVisibilidadCeldaActualizarParametroFactu = isVisibilidadCeldaActualizarParametroFactu;
	}

	public Boolean getIsVisibilidadCeldaEliminarParametroFactu() {
		return isVisibilidadCeldaEliminarParametroFactu;
	}

	public void setIsVisibilidadCeldaEliminarParametroFactu(Boolean isVisibilidadCeldaEliminarParametroFactu) {
		this.isVisibilidadCeldaEliminarParametroFactu = isVisibilidadCeldaEliminarParametroFactu;
	}

	public Boolean getIsVisibilidadCeldaCancelarParametroFactu() {
		return isVisibilidadCeldaCancelarParametroFactu;
	}

	public void setIsVisibilidadCeldaCancelarParametroFactu(Boolean isVisibilidadCeldaCancelarParametroFactu) {
		this.isVisibilidadCeldaCancelarParametroFactu = isVisibilidadCeldaCancelarParametroFactu;
	}

	public Boolean getIsVisibilidadCeldaGuardarParametroFactu() {
		return isVisibilidadCeldaGuardarParametroFactu;
	}

	public void setIsVisibilidadCeldaGuardarParametroFactu(Boolean isVisibilidadCeldaGuardarParametroFactu) {
		this.isVisibilidadCeldaGuardarParametroFactu = isVisibilidadCeldaGuardarParametroFactu;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosParametroFactu() {
		return isVisibilidadCeldaGuardarCambiosParametroFactu;
	}

	public void setIsVisibilidadCeldaGuardarCambiosParametroFactu(Boolean isVisibilidadCeldaGuardarCambiosParametroFactu) {
		this.isVisibilidadCeldaGuardarCambiosParametroFactu = isVisibilidadCeldaGuardarCambiosParametroFactu;
	}
		
	public ParametroFactuSessionBean getparametrofactuSessionBean() {
		return this.parametrofactuSessionBean;
	}
	
	public void setparametrofactuSessionBean(ParametroFactuSessionBean parametrofactuSessionBean) {
		this.parametrofactuSessionBean=parametrofactuSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCuentaContableFactu() {
		return this.isVisibilidadFK_IdCuentaContableFactu;
	}

	public void setisVisibilidadFK_IdCuentaContableFactu(Boolean isVisibilidadFK_IdCuentaContableFactu) {
		this.isVisibilidadFK_IdCuentaContableFactu=isVisibilidadFK_IdCuentaContableFactu;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableFinan() {
		return this.isVisibilidadFK_IdCuentaContableFinan;
	}

	public void setisVisibilidadFK_IdCuentaContableFinan(Boolean isVisibilidadFK_IdCuentaContableFinan) {
		this.isVisibilidadFK_IdCuentaContableFinan=isVisibilidadFK_IdCuentaContableFinan;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableOtro() {
		return this.isVisibilidadFK_IdCuentaContableOtro;
	}

	public void setisVisibilidadFK_IdCuentaContableOtro(Boolean isVisibilidadFK_IdCuentaContableOtro) {
		this.isVisibilidadFK_IdCuentaContableOtro=isVisibilidadFK_IdCuentaContableOtro;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormatoFactura() {
		return this.isVisibilidadFK_IdFormatoFactura;
	}

	public void setisVisibilidadFK_IdFormatoFactura(Boolean isVisibilidadFK_IdFormatoFactura) {
		this.isVisibilidadFK_IdFormatoFactura=isVisibilidadFK_IdFormatoFactura;
	}

	public Boolean getisVisibilidadFK_IdFormatoInventario() {
		return this.isVisibilidadFK_IdFormatoInventario;
	}

	public void setisVisibilidadFK_IdFormatoInventario(Boolean isVisibilidadFK_IdFormatoInventario) {
		this.isVisibilidadFK_IdFormatoInventario=isVisibilidadFK_IdFormatoInventario;
	}

	public Boolean getisVisibilidadFK_IdFormatoNotaCredito() {
		return this.isVisibilidadFK_IdFormatoNotaCredito;
	}

	public void setisVisibilidadFK_IdFormatoNotaCredito(Boolean isVisibilidadFK_IdFormatoNotaCredito) {
		this.isVisibilidadFK_IdFormatoNotaCredito=isVisibilidadFK_IdFormatoNotaCredito;
	}

	public Boolean getisVisibilidadFK_IdFormatoPedo() {
		return this.isVisibilidadFK_IdFormatoPedo;
	}

	public void setisVisibilidadFK_IdFormatoPedo(Boolean isVisibilidadFK_IdFormatoPedo) {
		this.isVisibilidadFK_IdFormatoPedo=isVisibilidadFK_IdFormatoPedo;
	}

	public Boolean getisVisibilidadFK_IdFormatoProforma() {
		return this.isVisibilidadFK_IdFormatoProforma;
	}

	public void setisVisibilidadFK_IdFormatoProforma(Boolean isVisibilidadFK_IdFormatoProforma) {
		this.isVisibilidadFK_IdFormatoProforma=isVisibilidadFK_IdFormatoProforma;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysParametroFactu(ParametroFactu parametrofactu)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(parametrofactu,null);
				this.setActualParaGuardarSucursalForeignKey(parametrofactu,null);
				this.setActualParaGuardarCuentaContableFactuForeignKey(parametrofactu,null);
				this.setActualParaGuardarCuentaContableFinanForeignKey(parametrofactu,null);
				this.setActualParaGuardarCuentaContableOtroForeignKey(parametrofactu,null);
				this.setActualParaGuardarFormatoProformaForeignKey(parametrofactu,null);
				this.setActualParaGuardarFormatoPedidoForeignKey(parametrofactu,null);
				this.setActualParaGuardarFormatoFacturaForeignKey(parametrofactu,null);
				this.setActualParaGuardarFormatoNotaCreditoForeignKey(parametrofactu,null);
				this.setActualParaGuardarFormatoInventarioForeignKey(parametrofactu,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ParametroFactu parametrofactu,ParametroFactu parametrofactuAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalParametroFactu(parametrofactu);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		parametrofactuAux.setId(parametrofactu.getId());
		parametrofactuAux.setVersionRow(parametrofactu.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessParametroFactu();
		
			int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = parametrofactuValidator.getInvalidValues(this.parametrofactu);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			parametrofactuLogic.setDatosCliente(datosCliente);
			parametrofactuLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				parametrofactuAux=new  ParametroFactu();
				
				parametrofactuAux.setIsNew(true);
				parametrofactuAux.setIsChanged(true);
				
				parametrofactuAux.setParametroFactuOriginal(this.parametrofactu);
				
				parametrofactuAux.setId(this.parametrofactu.getId());	
				parametrofactuAux.setVersionRow(this.parametrofactu.getVersionRow());	
				parametrofactuAux.setid_empresa(this.parametrofactu.getid_empresa());	
				parametrofactuAux.setid_sucursal(this.parametrofactu.getid_sucursal());	
				parametrofactuAux.setid_cuenta_contable_factu(this.parametrofactu.getid_cuenta_contable_factu());	
				parametrofactuAux.setid_cuenta_contable_finan(this.parametrofactu.getid_cuenta_contable_finan());	
				parametrofactuAux.setid_cuenta_contable_otro(this.parametrofactu.getid_cuenta_contable_otro());	
				parametrofactuAux.setid_formato_proforma(this.parametrofactu.getid_formato_proforma());	
				parametrofactuAux.setid_formato_pedido(this.parametrofactu.getid_formato_pedido());	
				parametrofactuAux.setid_formato_factura(this.parametrofactu.getid_formato_factura());	
				parametrofactuAux.setid_formato_nota_credito(this.parametrofactu.getid_formato_nota_credito());	
				parametrofactuAux.setid_formato_inventario(this.parametrofactu.getid_formato_inventario());	
				parametrofactuAux.setsecuencial_proforma(this.parametrofactu.getsecuencial_proforma());	
				parametrofactuAux.setsecuancial_pedido(this.parametrofactu.getsecuancial_pedido());	
				parametrofactuAux.setsecuencial_factura(this.parametrofactu.getsecuencial_factura());	
				parametrofactuAux.setsecuencial_nota_credito(this.parametrofactu.getsecuencial_nota_credito());	
				parametrofactuAux.setitem_proforma(this.parametrofactu.getitem_proforma());	
				parametrofactuAux.setitem_pedido(this.parametrofactu.getitem_pedido());	
				parametrofactuAux.setitem_factura(this.parametrofactu.getitem_factura());	
				parametrofactuAux.setitem_nota_credito(this.parametrofactu.getitem_nota_credito());	
				parametrofactuAux.setitem_inventario(this.parametrofactu.getitem_inventario());	
				parametrofactuAux.setcon_detalle_proforma(this.parametrofactu.getcon_detalle_proforma());	
				parametrofactuAux.setcon_detalle_pedido(this.parametrofactu.getcon_detalle_pedido());	
				parametrofactuAux.setcon_detalle_factura(this.parametrofactu.getcon_detalle_factura());	
				parametrofactuAux.setcon_detalle_nota_credito(this.parametrofactu.getcon_detalle_nota_credito());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrofactuAux,parametrofactus);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.saveParametroFactus();//WithConnection
						//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);
					
					this.refrescarForeignKeysDescripcionesParametroFactu();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrofactuLogic.saveParametroFactuRelaciones(parametrofactuAux);//WithConnection
								//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametrofactuAux,parametrofactus);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				parametrofactuAux=new  ParametroFactu();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.parametrofactuSessionBean.getEsGuardarRelacionado() 
					|| (this.parametrofactuSessionBean.getEsGuardarRelacionado() && this.parametrofactu.getId()>=0)) {
						
					parametrofactuAux.setIsNew(false);
				}
				
				parametrofactuAux.setIsDeleted(false);
			
				parametrofactuAux.setId(this.parametrofactu.getId());	
				parametrofactuAux.setVersionRow(this.parametrofactu.getVersionRow());	
				parametrofactuAux.setid_empresa(this.parametrofactu.getid_empresa());	
				parametrofactuAux.setid_sucursal(this.parametrofactu.getid_sucursal());	
				parametrofactuAux.setid_cuenta_contable_factu(this.parametrofactu.getid_cuenta_contable_factu());	
				parametrofactuAux.setid_cuenta_contable_finan(this.parametrofactu.getid_cuenta_contable_finan());	
				parametrofactuAux.setid_cuenta_contable_otro(this.parametrofactu.getid_cuenta_contable_otro());	
				parametrofactuAux.setid_formato_proforma(this.parametrofactu.getid_formato_proforma());	
				parametrofactuAux.setid_formato_pedido(this.parametrofactu.getid_formato_pedido());	
				parametrofactuAux.setid_formato_factura(this.parametrofactu.getid_formato_factura());	
				parametrofactuAux.setid_formato_nota_credito(this.parametrofactu.getid_formato_nota_credito());	
				parametrofactuAux.setid_formato_inventario(this.parametrofactu.getid_formato_inventario());	
				parametrofactuAux.setsecuencial_proforma(this.parametrofactu.getsecuencial_proforma());	
				parametrofactuAux.setsecuancial_pedido(this.parametrofactu.getsecuancial_pedido());	
				parametrofactuAux.setsecuencial_factura(this.parametrofactu.getsecuencial_factura());	
				parametrofactuAux.setsecuencial_nota_credito(this.parametrofactu.getsecuencial_nota_credito());	
				parametrofactuAux.setitem_proforma(this.parametrofactu.getitem_proforma());	
				parametrofactuAux.setitem_pedido(this.parametrofactu.getitem_pedido());	
				parametrofactuAux.setitem_factura(this.parametrofactu.getitem_factura());	
				parametrofactuAux.setitem_nota_credito(this.parametrofactu.getitem_nota_credito());	
				parametrofactuAux.setitem_inventario(this.parametrofactu.getitem_inventario());	
				parametrofactuAux.setcon_detalle_proforma(this.parametrofactu.getcon_detalle_proforma());	
				parametrofactuAux.setcon_detalle_pedido(this.parametrofactu.getcon_detalle_pedido());	
				parametrofactuAux.setcon_detalle_factura(this.parametrofactu.getcon_detalle_factura());	
				parametrofactuAux.setcon_detalle_nota_credito(this.parametrofactu.getcon_detalle_nota_credito());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrofactuAux,parametrofactus);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.saveParametroFactus();//WithConnection
						//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);
					
					this.refrescarForeignKeysDescripcionesParametroFactu();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrofactuLogic.saveParametroFactuRelaciones(parametrofactuAux);//WithConnection
								//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametrofactuAux,parametrofactus);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametrofactu,parametrofactuAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				parametrofactuAux=new  ParametroFactu();
				
				parametrofactuAux.setIsNew(false);
				parametrofactuAux.setIsChanged(false);
				
				parametrofactuAux.setIsDeleted(true);
				
				parametrofactuAux.setId(this.parametrofactu.getId());	
				parametrofactuAux.setVersionRow(this.parametrofactu.getVersionRow());	
				parametrofactuAux.setid_empresa(this.parametrofactu.getid_empresa());	
				parametrofactuAux.setid_sucursal(this.parametrofactu.getid_sucursal());	
				parametrofactuAux.setid_cuenta_contable_factu(this.parametrofactu.getid_cuenta_contable_factu());	
				parametrofactuAux.setid_cuenta_contable_finan(this.parametrofactu.getid_cuenta_contable_finan());	
				parametrofactuAux.setid_cuenta_contable_otro(this.parametrofactu.getid_cuenta_contable_otro());	
				parametrofactuAux.setid_formato_proforma(this.parametrofactu.getid_formato_proforma());	
				parametrofactuAux.setid_formato_pedido(this.parametrofactu.getid_formato_pedido());	
				parametrofactuAux.setid_formato_factura(this.parametrofactu.getid_formato_factura());	
				parametrofactuAux.setid_formato_nota_credito(this.parametrofactu.getid_formato_nota_credito());	
				parametrofactuAux.setid_formato_inventario(this.parametrofactu.getid_formato_inventario());	
				parametrofactuAux.setsecuencial_proforma(this.parametrofactu.getsecuencial_proforma());	
				parametrofactuAux.setsecuancial_pedido(this.parametrofactu.getsecuancial_pedido());	
				parametrofactuAux.setsecuencial_factura(this.parametrofactu.getsecuencial_factura());	
				parametrofactuAux.setsecuencial_nota_credito(this.parametrofactu.getsecuencial_nota_credito());	
				parametrofactuAux.setitem_proforma(this.parametrofactu.getitem_proforma());	
				parametrofactuAux.setitem_pedido(this.parametrofactu.getitem_pedido());	
				parametrofactuAux.setitem_factura(this.parametrofactu.getitem_factura());	
				parametrofactuAux.setitem_nota_credito(this.parametrofactu.getitem_nota_credito());	
				parametrofactuAux.setitem_inventario(this.parametrofactu.getitem_inventario());	
				parametrofactuAux.setcon_detalle_proforma(this.parametrofactu.getcon_detalle_proforma());	
				parametrofactuAux.setcon_detalle_pedido(this.parametrofactu.getcon_detalle_pedido());	
				parametrofactuAux.setcon_detalle_factura(this.parametrofactu.getcon_detalle_factura());	
				parametrofactuAux.setcon_detalle_nota_credito(this.parametrofactu.getcon_detalle_nota_credito());	
				
				if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.parametrofactuAux.getId()>=0) {	
						this.parametrofactusEliminados.add(parametrofactuAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrofactuAux,parametrofactus);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.saveParametroFactus();//WithConnection
						//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrofactuLogic.saveParametroFactuRelaciones(parametrofactuAux);//WithConnection
								//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
								|| this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(parametrofactuAux,parametrofactuLogic.getParametroFactus());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(parametrofactuAux,parametrofactus);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getParametroFactus().addAll(this.parametrofactusEliminados);
					
					parametrofactuLogic.saveParametroFactus();//WithConnection
					//parametrofactuLogic.getSetVersionRowParametroFactus();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesParametroFactu();
				
				this.parametrofactusEliminados= new ArrayList<ParametroFactu>();		
			}
			
			if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Parametro Factu GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.parametrofactu=parametrofactuAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessParametroFactu();
      	}
		
	}	
	
	public void actualizarRelaciones(ParametroFactu parametrofactuLocal) throws Exception {
		
		if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ParametroFactu parametrofactuLocal) throws Exception {	
		if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				parametrofactuLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				parametrofactuLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablefactuBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablefactuBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablefactuBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablefactuBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablefactuBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablefactusForeignKey);

				cuentacontablefactuBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablefactuBeanSwingJInternalFrameLocal.cuentacontable);

				parametrofactuLocal.setCuentaContableFactu(cuentacontablefactuBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableFactu();
				this.cargarCombosFrameCuentaContableFactusForeignKey("Formulario");
				this.setActualCuentaContableFactuForeignKey(cuentacontablefactuBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablefinanBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablefinanBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablefinanBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablefinanBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablefinanBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablefinansForeignKey);

				cuentacontablefinanBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablefinanBeanSwingJInternalFrameLocal.cuentacontable);

				parametrofactuLocal.setCuentaContableFinan(cuentacontablefinanBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableFinan();
				this.cargarCombosFrameCuentaContableFinansForeignKey("Formulario");
				this.setActualCuentaContableFinanForeignKey(cuentacontablefinanBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableotroBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableotroBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableotroBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableotroBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableotroBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableotrosForeignKey);

				cuentacontableotroBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableotroBeanSwingJInternalFrameLocal.cuentacontable);

				parametrofactuLocal.setCuentaContableOtro(cuentacontableotroBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableOtro();
				this.cargarCombosFrameCuentaContableOtrosForeignKey("Formulario");
				this.setActualCuentaContableOtroForeignKey(cuentacontableotroBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoproformaBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoproformaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoproformaBeanSwingJInternalFrameLocal.getformato(),true);
				formatoproformaBeanSwingJInternalFrameLocal.actualizarLista(formatoproformaBeanSwingJInternalFrameLocal.formato,this.formatoproformasForeignKey);

				formatoproformaBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoproformaBeanSwingJInternalFrameLocal.formato);

				parametrofactuLocal.setFormatoProforma(formatoproformaBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoProforma();
				this.cargarCombosFrameFormatoProformasForeignKey("Formulario");
				this.setActualFormatoProformaForeignKey(formatoproformaBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatopedidoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatopedidoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatopedidoBeanSwingJInternalFrameLocal.getformato(),true);
				formatopedidoBeanSwingJInternalFrameLocal.actualizarLista(formatopedidoBeanSwingJInternalFrameLocal.formato,this.formatopedidosForeignKey);

				formatopedidoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatopedidoBeanSwingJInternalFrameLocal.formato);

				parametrofactuLocal.setFormatoPedido(formatopedidoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoPedido();
				this.cargarCombosFrameFormatoPedidosForeignKey("Formulario");
				this.setActualFormatoPedidoForeignKey(formatopedidoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatofacturaBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatofacturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatofacturaBeanSwingJInternalFrameLocal.getformato(),true);
				formatofacturaBeanSwingJInternalFrameLocal.actualizarLista(formatofacturaBeanSwingJInternalFrameLocal.formato,this.formatofacturasForeignKey);

				formatofacturaBeanSwingJInternalFrameLocal.actualizarRelaciones(formatofacturaBeanSwingJInternalFrameLocal.formato);

				parametrofactuLocal.setFormatoFactura(formatofacturaBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoFactura();
				this.cargarCombosFrameFormatoFacturasForeignKey("Formulario");
				this.setActualFormatoFacturaForeignKey(formatofacturaBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatonotacreditoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatonotacreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatonotacreditoBeanSwingJInternalFrameLocal.getformato(),true);
				formatonotacreditoBeanSwingJInternalFrameLocal.actualizarLista(formatonotacreditoBeanSwingJInternalFrameLocal.formato,this.formatonotacreditosForeignKey);

				formatonotacreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatonotacreditoBeanSwingJInternalFrameLocal.formato);

				parametrofactuLocal.setFormatoNotaCredito(formatonotacreditoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoNotaCredito();
				this.cargarCombosFrameFormatoNotaCreditosForeignKey("Formulario");
				this.setActualFormatoNotaCreditoForeignKey(formatonotacreditoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoinventarioBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoinventarioBeanSwingJInternalFrameLocal.getformato(),true);
				formatoinventarioBeanSwingJInternalFrameLocal.actualizarLista(formatoinventarioBeanSwingJInternalFrameLocal.formato,this.formatoinventariosForeignKey);

				formatoinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoinventarioBeanSwingJInternalFrameLocal.formato);

				parametrofactuLocal.setFormatoInventario(formatoinventarioBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoInventario();
				this.cargarCombosFrameFormatoInventariosForeignKey("Formulario");
				this.setActualFormatoInventarioForeignKey(formatoinventarioBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarParametroFactuActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = parametrofactuValidator.getInvalidValues(this.parametrofactu);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ParametroFactu parametrofactu,List<ParametroFactu> parametrofactus) throws Exception {
		try	{		
			ParametroFactuConstantesFunciones.actualizarLista(parametrofactu,parametrofactus,this.parametrofactuSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ParametroFactu parametrofactu,List<ParametroFactu> parametrofactus) throws Exception {
		try	{			
			ParametroFactuConstantesFunciones.actualizarSelectedLista(parametrofactu,parametrofactus);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ParametroFactu> parametrofactusLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				parametrofactusLocal=this.parametrofactuLogic.getParametroFactus();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				parametrofactusLocal=this.parametrofactus;
			}
			//ARCHITECTURE
		
			for(ParametroFactu parametrofactuLocal:parametrofactusLocal) {
				if(this.permiteMantenimiento(parametrofactuLocal) && parametrofactuLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ParametroFactuConstantesFunciones.getParametroFactuLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_empresaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_sucursalParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDCUENTACONTABLEFACTU)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_factuParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDCUENTACONTABLEFINAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_finanParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDCUENTACONTABLEOTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_otroParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDFORMATOPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_proformaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDFORMATOPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_pedidoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDFORMATOFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_facturaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDFORMATONOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_nota_creditoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.IDFORMATOINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_inventarioParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.SECUENCIALPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_proformaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.SECUANCIALPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuancial_pedidoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.SECUENCIALFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_facturaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.SECUENCIALNOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_nota_creditoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.ITEMPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_proformaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.ITEMPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_pedidoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.ITEMFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_facturaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.ITEMNOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_nota_creditoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.ITEMINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_inventarioParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.CONDETALLEPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_proformaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.CONDETALLEPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_pedidoParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.CONDETALLEFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_facturaParametroFactu,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroFactuConstantesFunciones.CONDETALLENOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_nota_creditoParametroFactu,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_empresaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_sucursalParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_factuParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_finanParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_cuenta_contable_otroParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_proformaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_pedidoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_facturaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_nota_creditoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelid_formato_inventarioParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_proformaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuancial_pedidoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_facturaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_nota_creditoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_proformaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_pedidoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_facturaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_nota_creditoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_inventarioParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_proformaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_pedidoParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_facturaParametroFactu,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_nota_creditoParametroFactu,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoParametroFactu--;	
		
		
		this.parametrofactuAux=new ParametroFactu();
		
		this.parametrofactuAux.setId(this.iIdNuevoParametroFactu);
		this.parametrofactuAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametrofactuLogic.getParametroFactus().add(this.parametrofactuAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.parametrofactus.add(this.parametrofactuAux);
		}
		//ARCHITECTURE
		
		this.parametrofactu=this.parametrofactuAux;
		
		if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioParametroFactu(this.parametrofactu);
			this.setVariablesObjetoActualToFormularioForeignKeyParametroFactu(this.parametrofactu);
		}
				
		//this.setDefaultControlesParametroFactu();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyParametroFactu();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyParametroFactu();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroFactu();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroFactu(this.parametrofactuBean,this.parametrofactu,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ParametroFactuConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
			classes=ParametroFactuConstantesFunciones.getClassesRelationshipsOfParametroFactu(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.parametrofactuReturnGeneral=parametrofactuLogic.procesarEventosParametroFactusWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrofactuLogic.getParametroFactus(),this.parametrofactu,this.parametrofactuParameterGeneral,this.isEsNuevoParametroFactu,classes);//this.parametrofactuLogic.getParametroFactu()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanParametroFactu(this.parametrofactuReturnGeneral,this.parametrofactuBean,false);
		
		if(this.parametrofactuReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu());
		}
		
		if(this.parametrofactuReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu(),classes);//this.parametrofactuBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyParametroFactu();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyParametroFactu();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroFactuBeanSwingJInternalFrameAdditional.RecargarFormParametroFactu(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingParametroFactu(false);
						
			if(parametrofactuSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroFactu();
			}
			
			this.actualizarVisualTableDatosParametroFactu();
			
			this.jTableDatosParametroFactu.setRowSelectionInterval(this.getIndiceNuevoParametroFactu(), this.getIndiceNuevoParametroFactu());
			
			this.seleccionarFilaTablaParametroFactuActual();
						
			this.actualizarEstadoCeldasBotonesParametroFactu("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesParametroFactu(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarsecuencial_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarsecuancial_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarsecuencial_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarsecuencial_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activaritem_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activaritem_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activaritem_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activaritem_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activaritem_inventarioParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarcon_detalle_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarcon_detalle_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarcon_detalle_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarcon_detalle_nota_creditoParametroFactu);	
		//
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_empresaParametroFactu);//
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_sucursalParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_cuenta_contable_factuParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_cuenta_contable_finanParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_cuenta_contable_otroParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_formato_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_formato_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_formato_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_formato_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setEnabled(isHabilitar && this.parametrofactuConstantesFunciones.activarid_formato_inventarioParametroFactu);
	};
	
	public void setDefaultControlesParametroFactu() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoParametroFactu(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.parametrofactuSessionBean.setConGuardarRelaciones(true);			
			this.parametrofactuSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.setVisible(true);
			
					
		} else {
			//this.parametrofactuSessionBean.setConGuardarRelaciones(false);			
			this.parametrofactuSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoParametroFactu() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
				if(parametrofactuAux.getId().equals(this.iIdNuevoParametroFactu)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroFactu parametrofactuAux:this.parametrofactus) {
				if(parametrofactuAux.getId().equals(this.iIdNuevoParametroFactu)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualParametroFactu(ParametroFactu parametrofactu,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
				if(parametrofactuAux.getId().equals(parametrofactu.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroFactu parametrofactuAux:this.parametrofactus) {
				if(parametrofactuAux.getId().equals(parametrofactu.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalParametroFactu(ParametroFactu parametrofactuOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
				if(parametrofactuAux.getParametroFactuOriginal().getId().equals(parametrofactuOriginal.getId())) {
					existe=true;
					parametrofactuOriginal.setId(parametrofactuAux.getId());
					parametrofactuOriginal.setVersionRow(parametrofactuAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroFactu parametrofactuAux:this.parametrofactus) {
				if(parametrofactuAux.getParametroFactuOriginal().getId().equals(parametrofactuOriginal.getId())) {
					existe=true;
					parametrofactuOriginal.setId(parametrofactuAux.getId());
					parametrofactuOriginal.setVersionRow(parametrofactuAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosParametroFactu(Boolean esParaCancelar) throws Exception {
		parametrofactusAux=new ArrayList<ParametroFactu>();
		parametrofactuAux=new ParametroFactu();
		
		if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
					if(parametrofactuAux.getId()<0) {
						parametrofactusAux.add(parametrofactuAux);
					}		
				}
				this.iIdNuevoParametroFactu=0L;
				this.parametrofactuLogic.getParametroFactus().removeAll(parametrofactusAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroFactu parametrofactuAux:this.parametrofactus) {
					if(parametrofactuAux.getId()<0) {
						parametrofactusAux.add(parametrofactuAux);
					}		
				}
				this.iIdNuevoParametroFactu=0L;
				this.parametrofactus.removeAll(parametrofactusAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoParametroFactu 
					&& this.parametrofactuLogic.getParametroFactus().size()>0
					) {
					parametrofactuAux=this.parametrofactuLogic.getParametroFactus().get(this.parametrofactuLogic.getParametroFactus().size() - 1);
				
					if(parametrofactuAux.getId()<0) {
						this.parametrofactuLogic.getParametroFactus().remove(parametrofactuAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoParametroFactu && this.parametrofactus.size()>0) {
					parametrofactuAux=this.parametrofactus.get(this.parametrofactus.size() - 1);
				
					if(parametrofactuAux.getId()<0) {
						this.parametrofactus.remove(parametrofactuAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoParametroFactu(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(parametrofactu.getId()<0) {
				this.parametrofactuLogic.getParametroFactus().remove(this.parametrofactu);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(parametrofactu.getId()<0) {
				this.parametrofactus.remove(this.parametrofactu);
			}
		}			
	}
	
	public void setEstadosInicialesParametroFactu(List<ParametroFactu> parametrofactusAux) throws Exception {
		ParametroFactuConstantesFunciones.setEstadosInicialesParametroFactu(parametrofactusAux);
	}
	
	public void setEstadosInicialesParametroFactu(ParametroFactu parametrofactuAux) throws Exception {
		ParametroFactuConstantesFunciones.setEstadosInicialesParametroFactu(parametrofactuAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarParametroFactuActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarParametroFactuActual()) {
				if(!this.isEsNuevoParametroFactu) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoParametroFactu=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarParametroFactuActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Parametro Factu ?", "MANTENIMIENTO DE Parametro Factu", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ParametroFactu parametrofactu) throws Exception {
		ParametroFactuConstantesFunciones.seleccionarAsignar(this.parametrofactu,parametrofactu);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarParametroFactu=this.isPermisoActualizarOriginalParametroFactu;
			
			
			this.seleccionarAsignar(parametrofactu);
			
			

			idCuentaContableFactuActual=parametrofactu.getid_cuenta_contable_factu();
			this.seleccionarCuentaContableFactuActual();

			idCuentaContableFinanActual=parametrofactu.getid_cuenta_contable_finan();
			this.seleccionarCuentaContableFinanActual();

			idCuentaContableOtroActual=parametrofactu.getid_cuenta_contable_otro();
			this.seleccionarCuentaContableOtroActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroFactuConstantesFunciones.quitarEspaciosParametroFactu(this.parametrofactu,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesParametroFactu("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.parametrofactuSessionBean.setsFuncionBusquedaRapida(this.parametrofactuSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableFactuActual() throws Exception {
		try	{
			CuentaContable cuentacontablefactuAux=new CuentaContable();

			if(this.idCuentaContableFactuActual != null && this.idCuentaContableFactuActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablefactuLogic.getEntityWithConnection(this.idCuentaContableFactuActual);
					cuentacontablefactuAux= cuentacontablefactuLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablefactusForeignKey=new ArrayList<CuentaContable>();
				cuentacontablefactusForeignKey.add(cuentacontablefactuAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableFinanActual() throws Exception {
		try	{
			CuentaContable cuentacontablefinanAux=new CuentaContable();

			if(this.idCuentaContableFinanActual != null && this.idCuentaContableFinanActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablefinanLogic.getEntityWithConnection(this.idCuentaContableFinanActual);
					cuentacontablefinanAux= cuentacontablefinanLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablefinansForeignKey=new ArrayList<CuentaContable>();
				cuentacontablefinansForeignKey.add(cuentacontablefinanAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableOtroActual() throws Exception {
		try	{
			CuentaContable cuentacontableotroAux=new CuentaContable();

			if(this.idCuentaContableOtroActual != null && this.idCuentaContableOtroActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableotroLogic.getEntityWithConnection(this.idCuentaContableOtroActual);
					cuentacontableotroAux= cuentacontableotroLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableotrosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableotrosForeignKey.add(cuentacontableotroAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoParametroFactu) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosParametroFactu(esParaCancelar);				
				this.cancelarNuevoParametroFactu(esParaCancelar);								
			}
			
			this.parametrofactu=new ParametroFactu();
			
			this.inicializarParametroFactu();
			
			this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarParametroFactu() throws Exception {
		try {
			ParametroFactuConstantesFunciones.inicializarParametroFactu(this.parametrofactu);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.parametrofactuLogic.getParametroFactus().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteParametroFactus(String sAccionBusqueda,List<ParametroFactu> parametrofactusParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ParametroFactu"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ParametroFactuMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ParametroFactuMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ParametroFactu"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Parametro Factus");		
		parameters.put("busquedapor", ParametroFactuConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceParametroFactu=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ParametroFactuConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ParametroFactuConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceParametroFactu=new JRBeanArrayDataSource(ParametroFactuJInternalFrame.TraerParametroFactuBeans(parametrofactusParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceParametroFactu);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ParametroFactuConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ParametroFactuConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ParametroFactuBean.TraerParametroFactuBeans(parametrofactusParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoParametroFactuActionPerformed(null);
					//this.generarExcelReporteParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesParametroFactus(sAccionBusqueda,sTipoArchivoReporte,parametrofactusParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteParametroFactus(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroFactu> parametrofactusParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroFactus");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroFactu("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ParametroFactu parametrofactu : parametrofactusParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ParametroFactuConstantesFunciones.generarExcelReporteDataParametroFactu("NORMAL",row,workbook,parametrofactu,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderParametroFactu(String sTipo,Row row,Workbook workbook) {
		
		ParametroFactuConstantesFunciones.generarExcelReporteHeaderParametroFactu(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalParametroFactus(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroFactu> parametrofactusParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroFactus");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ParametroFactu parametrofactu : parametrofactusParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ParametroFactuConstantesFunciones.getParametroFactuDescripcion(parametrofactu));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getcuentacontablefactu_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getcuentacontablefinan_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getcuentacontableotro_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getformatoproforma_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getformatopedido_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getformatofactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getformatonotacredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getformatoinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getsecuencial_proforma());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getsecuancial_pedido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getsecuencial_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getsecuencial_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getitem_proforma());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getitem_pedido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getitem_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getitem_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrofactu.getitem_inventario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametrofactu.getcon_detalle_proforma()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametrofactu.getcon_detalle_pedido()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametrofactu.getcon_detalle_factura()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametrofactu.getcon_detalle_nota_credito()));


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesParametroFactus(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroFactu> parametrofactusParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ParametroFactu> parametrofactusRespaldo=null;
		
		classes=ParametroFactuConstantesFunciones.getClassesRelationshipsOfParametroFactu(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.parametrofactuLogic.setDatosCliente(this.datosCliente);
		this.parametrofactuLogic.setDatosDeep(this.datosDeep);
		this.parametrofactuLogic.setIsConDeep(true);
		
		parametrofactusRespaldo=this.parametrofactuLogic.getParametroFactus();
		
		this.parametrofactuLogic.setParametroFactus(parametrofactusParaReportes);	
		this.parametrofactuLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		parametrofactusParaReportes=this.parametrofactuLogic.getParametroFactus();
		this.parametrofactuLogic.setParametroFactus(parametrofactusRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroFactus");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroFactu("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ParametroFactu parametrofactu : parametrofactusParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderParametroFactu("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ParametroFactuConstantesFunciones.generarExcelReporteDataParametroFactu("NORMAL",row,workbook,parametrofactu,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ParametroFactuConstantesFunciones.getParametroFactuDescripcion(parametrofactu));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroFactu.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessParametroFactu() throws Exception {		
		this.startProcessParametroFactu(true);
	}
	
	public void startProcessParametroFactu(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasParametroFactu ,this.jPanelParametrosReportesParametroFactu, this.jScrollPanelDatosParametroFactu,this.jPanelPaginacionParametroFactu, this.jScrollPanelDatosEdicionParametroFactu, this.jPanelAccionesParametroFactu,this.jPanelAccionesFormularioParametroFactu,this.jmenuBarParametroFactu,this.jmenuBarDetalleParametroFactu,this.jTtoolBarParametroFactu,this.jTtoolBarDetalleParametroFactu);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroFactu=this.jTabbedPaneBusquedasParametroFactu; 
		
		final JPanel jPanelParametrosReportesParametroFactu=this.jPanelParametrosReportesParametroFactu;
		//final JScrollPane jScrollPanelDatosParametroFactu=this.jScrollPanelDatosParametroFactu;
		final JTable jTableDatosParametroFactu=this.jTableDatosParametroFactu;		
		final JPanel jPanelPaginacionParametroFactu=this.jPanelPaginacionParametroFactu;
		//final JScrollPane jScrollPanelDatosEdicionParametroFactu=this.jScrollPanelDatosEdicionParametroFactu;
		final JPanel jPanelAccionesParametroFactu=this.jPanelAccionesParametroFactu;
		
		JPanel jPanelCamposAuxiliarParametroFactu=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarParametroFactu=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			jPanelCamposAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jPanelCamposParametroFactu;
			jPanelAccionesFormularioAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jPanelAccionesFormularioParametroFactu;
		}
		
		final JPanel jPanelCamposParametroFactu=jPanelCamposAuxiliarParametroFactu;
		final JPanel jPanelAccionesFormularioParametroFactu=jPanelAccionesFormularioAuxiliarParametroFactu;
		
		
		final JMenuBar jmenuBarParametroFactu=this.jmenuBarParametroFactu;
		final JToolBar jTtoolBarParametroFactu=this.jTtoolBarParametroFactu;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarParametroFactu=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroFactu=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			jmenuBarDetalleAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jmenuBarDetalleParametroFactu;
			jTtoolBarDetalleAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jTtoolBarDetalleParametroFactu;
		}
		
		final JMenuBar jmenuBarDetalleParametroFactu=jmenuBarDetalleAuxiliarParametroFactu;
		final JToolBar jTtoolBarDetalleParametroFactu=jTtoolBarDetalleAuxiliarParametroFactu;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroFactu;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroFactu;
			processRunnable.jTableDatos=jTableDatosParametroFactu;
			processRunnable.jPanelCampos=jPanelCamposParametroFactu;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroFactu;
			processRunnable.jPanelAcciones=jPanelAccionesParametroFactu;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroFactu;
			
			
			processRunnable.jmenuBar=jmenuBarParametroFactu;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroFactu;
			processRunnable.jTtoolBar=jTtoolBarParametroFactu;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroFactu;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroFactu ,jPanelParametrosReportesParametroFactu,jTableDatosParametroFactu, /*jScrollPanelDatosParametroFactu,*/jPanelCamposParametroFactu,jPanelPaginacionParametroFactu, /*jScrollPanelDatosEdicionParametroFactu,*/ jPanelAccionesParametroFactu,jPanelAccionesFormularioParametroFactu,jmenuBarParametroFactu,jmenuBarDetalleParametroFactu,jTtoolBarParametroFactu,jTtoolBarDetalleParametroFactu);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroFactu ,jPanelParametrosReportesParametroFactu, jScrollPanelDatosParametroFactu,jPanelPaginacionParametroFactu, jScrollPanelDatosEdicionParametroFactu, jPanelAccionesParametroFactu,jPanelAccionesFormularioParametroFactu,jmenuBarParametroFactu,jmenuBarDetalleParametroFactu,jTtoolBarParametroFactu,jTtoolBarDetalleParametroFactu);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessParametroFactu() {// throws Exception 
		this.finishProcessParametroFactu(true);
	}
	
	public void finishProcessParametroFactu(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasParametroFactu ,this.jPanelParametrosReportesParametroFactu, this.jScrollPanelDatosParametroFactu,this.jPanelPaginacionParametroFactu, this.jScrollPanelDatosEdicionParametroFactu, this.jPanelAccionesParametroFactu,this.jPanelAccionesFormularioParametroFactu,this.jmenuBarParametroFactu,this.jmenuBarDetalleParametroFactu,this.jTtoolBarParametroFactu,this.jTtoolBarDetalleParametroFactu);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroFactu=this.jTabbedPaneBusquedasParametroFactu; 
		
		final JPanel jPanelParametrosReportesParametroFactu=this.jPanelParametrosReportesParametroFactu;
		//final JScrollPane jScrollPanelDatosParametroFactu=this.jScrollPanelDatosParametroFactu;
		final JTable jTableDatosParametroFactu=this.jTableDatosParametroFactu;		
		final JPanel jPanelPaginacionParametroFactu=this.jPanelPaginacionParametroFactu;
		//final JScrollPane jScrollPanelDatosEdicionParametroFactu=this.jScrollPanelDatosEdicionParametroFactu;
		final JPanel jPanelAccionesParametroFactu=this.jPanelAccionesParametroFactu;
		
		JPanel jPanelCamposAuxiliarParametroFactu=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarParametroFactu=new JPanel();
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			jPanelCamposAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jPanelCamposParametroFactu;
			jPanelAccionesFormularioAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jPanelAccionesFormularioParametroFactu;
		}
		
		final JPanel jPanelCamposParametroFactu=jPanelCamposAuxiliarParametroFactu;
		final JPanel jPanelAccionesFormularioParametroFactu=jPanelAccionesFormularioAuxiliarParametroFactu;
		
		
		final JMenuBar jmenuBarParametroFactu=this.jmenuBarParametroFactu;		
		final JToolBar jTtoolBarParametroFactu=this.jTtoolBarParametroFactu;
				
		JMenuBar jmenuBarDetalleAuxiliarParametroFactu=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroFactu=new JToolBar();
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			jmenuBarDetalleAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jmenuBarDetalleParametroFactu;
			jTtoolBarDetalleAuxiliarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jTtoolBarDetalleParametroFactu;		
		}
		
		final JMenuBar jmenuBarDetalleParametroFactu=jmenuBarDetalleAuxiliarParametroFactu;
		final JToolBar jTtoolBarDetalleParametroFactu=jTtoolBarDetalleAuxiliarParametroFactu;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroFactu;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroFactu;
			processRunnable.jTableDatos=jTableDatosParametroFactu;
			processRunnable.jPanelCampos=jPanelCamposParametroFactu;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroFactu;
			processRunnable.jPanelAcciones=jPanelAccionesParametroFactu;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroFactu;
			
			
			processRunnable.jmenuBar=jmenuBarParametroFactu;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroFactu;
			processRunnable.jTtoolBar=jTtoolBarParametroFactu;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroFactu;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasParametroFactu ,jPanelParametrosReportesParametroFactu, jTableDatosParametroFactu,/*jScrollPanelDatosParametroFactu,*/jPanelCamposParametroFactu,jPanelPaginacionParametroFactu, /*jScrollPanelDatosEdicionParametroFactu,*/ jPanelAccionesParametroFactu,jPanelAccionesFormularioParametroFactu,jmenuBarParametroFactu,jmenuBarDetalleParametroFactu,jTtoolBarParametroFactu,jTtoolBarDetalleParametroFactu));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesParametroFactu(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarParametroFactu(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuParametroFactu(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarParametroFactu(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarParametroFactu,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleParametroFactu,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuParametroFactu(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarParametroFactu,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleParametroFactu,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.parametrofactuConstantesFunciones.getsFinalQueryParametroFactu();
		String  finalQueryPaginacionTodos=this.parametrofactuConstantesFunciones.getsFinalQueryParametroFactu();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ParametroFactuConstantesFunciones.getArrayColumnasGlobalesNoParametroFactu(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ParametroFactuConstantesFunciones.getArrayColumnasGlobalesParametroFactu(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ParametroFactuConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.parametrofactusEliminados= new ArrayList<ParametroFactu>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessParametroFactu();
		
				///*ParametroFactuSessionBean*/this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			
			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ParametroFactuConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ParametroFactuConstantesFunciones.getClassesForeignKeysOfParametroFactu(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/parametrofactu."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			parametrofactusAux= new ArrayList<ParametroFactu>();
			
				
			parametrofactuLogic.setDatosCliente(this.datosCliente);
			parametrofactuLogic.setDatosDeep(this.datosDeep);
			parametrofactuLogic.setIsConDeep(true);
			
			
			parametrofactuLogic.getParametroFactuDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					parametrofactuLogic.getTodosParametroFactus(finalQueryGlobal,pagination);
					
					//parametrofactuLogic.getTodosParametroFactusWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(parametrofactuLogic.getParametroFactus()==null|| parametrofactuLogic.getParametroFactus().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrofactusAux= new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux= new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrofactuLogic.getTodosParametroFactus(finalQueryGlobal+"",this.pagination);												
							
							//parametrofactuLogic.getTodosParametroFactusWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteParametroFactus("Todos",parametrofactuLogic.getParametroFactus() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());					
							parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idParametroFactu=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idParametroFactu=this.idActual;
				
				} else if(this.idParametroFactuActual!=null && this.idParametroFactuActual!=0L) {
					idParametroFactu=idParametroFactuActual;
				}
				
					
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndicePorId(idParametroFactu);
				
				this.parametrofactus=new ArrayList<ParametroFactu>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					parametrofactuLogic.getEntity(idParametroFactu);
					
					//parametrofactuLogic.getEntityWithConnection(idParametroFactu);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
					parametrofactuLogic.getParametroFactus().add(parametrofactuLogic.getParametroFactu());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactus=new ArrayList<ParametroFactu>();
					this.parametrofactus.add(parametrofactu);
				}
				
				if(parametrofactuLogic.getParametroFactu()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCuentaContableFactu")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFactu(id_cuenta_contable_factuFK_IdCuentaContableFactu);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdCuentaContableFactu(finalQueryGlobal,pagination,id_cuenta_contable_factuFK_IdCuentaContableFactu);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFactu(id_cuenta_contable_factuFK_IdCuentaContableFactu);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFactu(id_cuenta_contable_factuFK_IdCuentaContableFactu);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdCuentaContableFactu(finalQueryGlobal,pagination,id_cuenta_contable_factuFK_IdCuentaContableFactu);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFactu(id_cuenta_contable_factuFK_IdCuentaContableFactu);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFactu(id_cuenta_contable_factuFK_IdCuentaContableFactu);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdCuentaContableFactu",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdCuentaContableFactu",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableFinan")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFinan(id_cuenta_contable_finanFK_IdCuentaContableFinan);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdCuentaContableFinan(finalQueryGlobal,pagination,id_cuenta_contable_finanFK_IdCuentaContableFinan);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFinan(id_cuenta_contable_finanFK_IdCuentaContableFinan);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFinan(id_cuenta_contable_finanFK_IdCuentaContableFinan);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdCuentaContableFinan(finalQueryGlobal,pagination,id_cuenta_contable_finanFK_IdCuentaContableFinan);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFinan(id_cuenta_contable_finanFK_IdCuentaContableFinan);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFinan(id_cuenta_contable_finanFK_IdCuentaContableFinan);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdCuentaContableFinan",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdCuentaContableFinan",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableOtro")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableOtro(id_cuenta_contable_otroFK_IdCuentaContableOtro);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdCuentaContableOtro(finalQueryGlobal,pagination,id_cuenta_contable_otroFK_IdCuentaContableOtro);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableOtro(id_cuenta_contable_otroFK_IdCuentaContableOtro);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableOtro(id_cuenta_contable_otroFK_IdCuentaContableOtro);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdCuentaContableOtro(finalQueryGlobal,pagination,id_cuenta_contable_otroFK_IdCuentaContableOtro);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableOtro(id_cuenta_contable_otroFK_IdCuentaContableOtro);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdCuentaContableOtro(id_cuenta_contable_otroFK_IdCuentaContableOtro);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdCuentaContableOtro",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdCuentaContableOtro",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdEmpresa",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdEmpresa",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoFactura")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoFactura(id_formato_facturaFK_IdFormatoFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdFormatoFactura(finalQueryGlobal,pagination,id_formato_facturaFK_IdFormatoFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoFactura(id_formato_facturaFK_IdFormatoFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoFactura(id_formato_facturaFK_IdFormatoFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdFormatoFactura(finalQueryGlobal,pagination,id_formato_facturaFK_IdFormatoFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoFactura(id_formato_facturaFK_IdFormatoFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoFactura(id_formato_facturaFK_IdFormatoFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdFormatoFactura",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdFormatoFactura",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoInventario")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoInventario(id_formato_inventarioFK_IdFormatoInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdFormatoInventario(finalQueryGlobal,pagination,id_formato_inventarioFK_IdFormatoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoInventario(id_formato_inventarioFK_IdFormatoInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoInventario(id_formato_inventarioFK_IdFormatoInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdFormatoInventario(finalQueryGlobal,pagination,id_formato_inventarioFK_IdFormatoInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoInventario(id_formato_inventarioFK_IdFormatoInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoInventario(id_formato_inventarioFK_IdFormatoInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdFormatoInventario",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdFormatoInventario",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoNotaCredito")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoNotaCredito(id_formato_nota_creditoFK_IdFormatoNotaCredito);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdFormatoNotaCredito(finalQueryGlobal,pagination,id_formato_nota_creditoFK_IdFormatoNotaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoNotaCredito(id_formato_nota_creditoFK_IdFormatoNotaCredito);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoNotaCredito(id_formato_nota_creditoFK_IdFormatoNotaCredito);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdFormatoNotaCredito(finalQueryGlobal,pagination,id_formato_nota_creditoFK_IdFormatoNotaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoNotaCredito(id_formato_nota_creditoFK_IdFormatoNotaCredito);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoNotaCredito(id_formato_nota_creditoFK_IdFormatoNotaCredito);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdFormatoNotaCredito",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdFormatoNotaCredito",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoPedo")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdFormatoPedo(finalQueryGlobal,pagination,id_formato_pedidoFK_IdFormatoPedo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdFormatoPedo(finalQueryGlobal,pagination,id_formato_pedidoFK_IdFormatoPedo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdFormatoPedo",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdFormatoPedo",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoProforma")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoProforma(id_formato_proformaFK_IdFormatoProforma);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdFormatoProforma(finalQueryGlobal,pagination,id_formato_proformaFK_IdFormatoProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoProforma(id_formato_proformaFK_IdFormatoProforma);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoProforma(id_formato_proformaFK_IdFormatoProforma);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdFormatoProforma(finalQueryGlobal,pagination,id_formato_proformaFK_IdFormatoProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoProforma(id_formato_proformaFK_IdFormatoProforma);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdFormatoProforma(id_formato_proformaFK_IdFormatoProforma);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdFormatoProforma",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdFormatoProforma",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrofactuLogic.getParametroFactusFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrofactuLogic.getParametroFactus()==null||parametrofactuLogic.getParametroFactus().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrofactus==null|| parametrofactus.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactusAux=new ArrayList<ParametroFactu>();
						parametrofactusAux.addAll(parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactusAux=new ArrayList<ParametroFactu>();
							parametrofactusAux.addAll(parametrofactus);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrofactuLogic.getParametroFactusFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroFactuConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroFactus("FK_IdSucursal",parametrofactuLogic.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroFactus("FK_IdSucursal",parametrofactus);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuLogic.setParametroFactus(new ArrayList<ParametroFactu>());
						parametrofactuLogic.getParametroFactus().addAll(parametrofactusAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactus=new ArrayList<ParametroFactu>();
							parametrofactus.addAll(parametrofactusAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesParametroFactu();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessParametroFactu();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametrofactuLogic.getParametroFactus().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametrofactus.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametrofactuLogic.getParametroFactus().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametrofactus.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ParametroFactu parametrofactu) {
		Boolean permite=true;
		
		if(this.parametrofactu.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ParametroFactuConstantesFunciones.getOrderByListaParametroFactu();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ParametroFactuConstantesFunciones.getOrderByListaParametroFactu();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroFactu parametrofactu:parametrofactuLogic.getParametroFactus()) {
				if(parametrofactu.getsType().equals(Constantes2.S_TOTALES)) {
					parametrofactuTotales=parametrofactu;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroFactu parametrofactu:this.parametrofactus) {
				if(parametrofactu.getsType().equals(Constantes2.S_TOTALES)) {
					parametrofactuTotales=parametrofactu;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.parametrofactuAux=new ParametroFactu();
			this.parametrofactuAux.setsType(Constantes2.S_TOTALES);
			this.parametrofactuAux.setIsNew(false);
			this.parametrofactuAux.setIsChanged(false);
			this.parametrofactuAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ParametroFactuConstantesFunciones.TotalizarValoresFilaParametroFactu(this.parametrofactuLogic.getParametroFactus(),this.parametrofactuAux);
				
				this.parametrofactuLogic.getParametroFactus().add(this.parametrofactuAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ParametroFactuConstantesFunciones.TotalizarValoresFilaParametroFactu(this.parametrofactus,this.parametrofactuAux);
				
				this.parametrofactus.add(this.parametrofactuAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		parametrofactuTotales=new ParametroFactu();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametrofactuLogic.getParametroFactus().remove(parametrofactuTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametrofactus.remove(parametrofactuTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		parametrofactuTotales=new ParametroFactu();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroFactu parametrofactu:parametrofactuLogic.getParametroFactus()) {
				if(parametrofactu.getsType().equals(Constantes2.S_TOTALES)) {
					parametrofactuTotales=parametrofactu;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroFactuConstantesFunciones.TotalizarValoresFilaParametroFactu(this.parametrofactuLogic.getParametroFactus(),parametrofactuTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroFactu parametrofactu:this.parametrofactus) {
				if(parametrofactu.getsType().equals(Constantes2.S_TOTALES)) {
					parametrofactuTotales=parametrofactu;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroFactuConstantesFunciones.TotalizarValoresFilaParametroFactu(this.parametrofactus,parametrofactuTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getParametroFactusFK_IdCuentaContableFactu()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableFactu";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdCuentaContableFinan()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableFinan";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdCuentaContableOtro()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableOtro";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdFormatoFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdFormatoInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdFormatoNotaCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoNotaCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdFormatoPedo()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoPedo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdFormatoProforma()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoProforma";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroFactusFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getParametroFactusFK_IdCuentaContableFactu(String sFinalQuery,Long id_cuenta_contable_factu)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdCuentaContableFactu(sFinalQuery,this.pagination,id_cuenta_contable_factu);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdCuentaContableFinan(String sFinalQuery,Long id_cuenta_contable_finan)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdCuentaContableFinan(sFinalQuery,this.pagination,id_cuenta_contable_finan);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdCuentaContableOtro(String sFinalQuery,Long id_cuenta_contable_otro)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdCuentaContableOtro(sFinalQuery,this.pagination,id_cuenta_contable_otro);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdFormatoFactura(String sFinalQuery,Long id_formato_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdFormatoFactura(sFinalQuery,this.pagination,id_formato_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdFormatoInventario(String sFinalQuery,Long id_formato_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdFormatoInventario(sFinalQuery,this.pagination,id_formato_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdFormatoNotaCredito(String sFinalQuery,Long id_formato_nota_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdFormatoNotaCredito(sFinalQuery,this.pagination,id_formato_nota_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdFormatoPedo(String sFinalQuery,Long id_formato_pedido)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdFormatoPedo(sFinalQuery,this.pagination,id_formato_pedido);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdFormatoProforma(String sFinalQuery,Long id_formato_proforma)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdFormatoProforma(sFinalQuery,this.pagination,id_formato_proforma);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroFactusFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLogic.getParametroFactusFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosParametroFactu() {
		this.isPermisoTodoParametroFactu=false;
		this.isPermisoNuevoParametroFactu=false;
		this.isPermisoActualizarParametroFactu=false;
		this.isPermisoActualizarOriginalParametroFactu=false;
		this.isPermisoEliminarParametroFactu=false;
		this.isPermisoGuardarCambiosParametroFactu=false;
		this.isPermisoConsultaParametroFactu=false;
		this.isPermisoBusquedaParametroFactu=false;
		this.isPermisoReporteParametroFactu=false;		
		this.isPermisoOrdenParametroFactu=false;		
		this.isPermisoPaginacionMedioParametroFactu=false;		
		this.isPermisoPaginacionAltoParametroFactu=false;
		this.isPermisoPaginacionTodoParametroFactu=false;
		this.isPermisoCopiarParametroFactu=false;		
		this.isPermisoVerFormParametroFactu=false;		
		this.isPermisoDuplicarParametroFactu=false;		
		this.isPermisoOrdenParametroFactu=false;		
	}
	
	public void setPermisosUsuarioParametroFactu(Boolean isPermiso) {
		this.isPermisoTodoParametroFactu=isPermiso;
		this.isPermisoNuevoParametroFactu=isPermiso;
		this.isPermisoActualizarParametroFactu=isPermiso;
		this.isPermisoActualizarOriginalParametroFactu=isPermiso;
		this.isPermisoEliminarParametroFactu=isPermiso;
		this.isPermisoGuardarCambiosParametroFactu=isPermiso;
		this.isPermisoConsultaParametroFactu=isPermiso;
		this.isPermisoBusquedaParametroFactu=isPermiso;
		this.isPermisoReporteParametroFactu=isPermiso;
		this.isPermisoOrdenParametroFactu=isPermiso;		
		this.isPermisoPaginacionMedioParametroFactu=isPermiso;		
		this.isPermisoPaginacionAltoParametroFactu=isPermiso;		
		this.isPermisoPaginacionTodoParametroFactu=isPermiso;		
		this.isPermisoCopiarParametroFactu=isPermiso;		
		this.isPermisoVerFormParametroFactu=isPermiso;		
		this.isPermisoDuplicarParametroFactu=isPermiso;
		this.isPermisoOrdenParametroFactu=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioParametroFactu(Boolean isPermiso) {
		//this.isPermisoTodoParametroFactu=isPermiso;
		this.isPermisoNuevoParametroFactu=isPermiso;
		this.isPermisoActualizarParametroFactu=isPermiso;
		this.isPermisoActualizarOriginalParametroFactu=isPermiso;
		this.isPermisoEliminarParametroFactu=isPermiso;
		this.isPermisoGuardarCambiosParametroFactu=isPermiso;
		//this.isPermisoConsultaParametroFactu=isPermiso;
		//this.isPermisoBusquedaParametroFactu=isPermiso;
		//this.isPermisoReporteParametroFactu=isPermiso;
		//this.isPermisoOrdenParametroFactu=isPermiso;		
		//this.isPermisoPaginacionMedioParametroFactu=isPermiso;		
		//this.isPermisoPaginacionAltoParametroFactu=isPermiso;		
		//this.isPermisoPaginacionTodoParametroFactu=isPermiso;		
		//this.isPermisoCopiarParametroFactu=isPermiso;		
		//this.isPermisoDuplicarParametroFactu=isPermiso;
		//this.isPermisoOrdenParametroFactu=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioParametroFactuClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ParametroFactuJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebParametroFactu(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioParametroFactuClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioParametroFactuClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionParametroFactuClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioParametroFactuClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioParametroFactu() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ParametroFactuJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ParametroFactuConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoParametroFactu=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarParametroFactu=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalParametroFactu=this.isPermisoActualizarParametroFactu;
			this.isPermisoEliminarParametroFactu=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosParametroFactu=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaParametroFactu=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaParametroFactu=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoParametroFactu=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteParametroFactu=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroFactu=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioParametroFactu=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoParametroFactu=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoParametroFactu=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarParametroFactu=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormParametroFactu=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarParametroFactu=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroFactu=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosParametroFactu.setToolTipText(this.jTableDatosParametroFactu.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioParametroFactu(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioParametroFactu(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ParametroFactuJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ParametroFactuJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioParametroFactu() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyParametroFactuListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.cuentacontablefactusForeignKey=new ArrayList();
				this.cuentacontablefinansForeignKey=new ArrayList();
				this.cuentacontableotrosForeignKey=new ArrayList();
				this.formatoproformasForeignKey=new ArrayList();
				this.formatopedidosForeignKey=new ArrayList();
				this.formatofacturasForeignKey=new ArrayList();
				this.formatonotacreditosForeignKey=new ArrayList();
				this.formatoinventariosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyParametroFactuListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ParametroFactuJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyParametroFactuListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableFactuListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableFinanListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableOtroListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoProformaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoNotaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFactuListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablefactusForeignKey==null||this.cuentacontablefactusForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableFactusForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFinanListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablefinansForeignKey==null||this.cuentacontablefinansForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableFinansForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableOtroListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableotrosForeignKey==null||this.cuentacontableotrosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableOtrosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoProformaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoproformasForeignKey==null||this.formatoproformasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoProformasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoPedidoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatopedidosForeignKey==null||this.formatopedidosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoPedidosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatofacturasForeignKey==null||this.formatofacturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoNotaCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatonotacreditosForeignKey==null||this.formatonotacreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoNotaCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoinventariosForeignKey==null||this.formatoinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyParametroFactuListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ParametroFactuParameterReturnGeneral parametrofactuReturnGeneral=new ParametroFactuParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_empresaParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_empresaParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_sucursalParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_sucursalParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalCuentaContableFactu="";

				if(((this.cuentacontablefactusForeignKey==null||this.cuentacontablefactusForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_factuParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_factuParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFactu()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableFactu=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableFactu=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableFactu, "");
						finalQueryGlobalCuentaContableFactu+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableFactusForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableFactu=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidCuentaContableFactuActual();
					}
				} else {
					finalQueryGlobalCuentaContableFactu="NONE";
				}


				String finalQueryGlobalCuentaContableFinan="";

				if(((this.cuentacontablefinansForeignKey==null||this.cuentacontablefinansForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_finanParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_finanParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFinan()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableFinan=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableFinan=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableFinan, "");
						finalQueryGlobalCuentaContableFinan+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableFinansForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableFinan=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidCuentaContableFinanActual();
					}
				} else {
					finalQueryGlobalCuentaContableFinan="NONE";
				}


				String finalQueryGlobalCuentaContableOtro="";

				if(((this.cuentacontableotrosForeignKey==null||this.cuentacontableotrosForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_otroParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_otroParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableOtro()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableOtro=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableOtro=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableOtro, "");
						finalQueryGlobalCuentaContableOtro+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableOtrosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableOtro=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidCuentaContableOtroActual();
					}
				} else {
					finalQueryGlobalCuentaContableOtro="NONE";
				}


				String finalQueryGlobalFormatoProforma="";

				if(((this.formatoproformasForeignKey==null||this.formatoproformasForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_formato_proformaParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_formato_proformaParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoProforma()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoProforma=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoProforma=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoProforma, "");
						finalQueryGlobalFormatoProforma+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoProformasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoProforma=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidFormatoProformaActual();
					}
				} else {
					finalQueryGlobalFormatoProforma="NONE";
				}


				String finalQueryGlobalFormatoPedido="";

				if(((this.formatopedidosForeignKey==null||this.formatopedidosForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_formato_pedidoParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_formato_pedidoParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoPedido=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoPedido=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoPedido, "");
						finalQueryGlobalFormatoPedido+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoPedidosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoPedido=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidFormatoPedidoActual();
					}
				} else {
					finalQueryGlobalFormatoPedido="NONE";
				}


				String finalQueryGlobalFormatoFactura="";

				if(((this.formatofacturasForeignKey==null||this.formatofacturasForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_formato_facturaParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_formato_facturaParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoFactura, "");
						finalQueryGlobalFormatoFactura+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoFactura=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidFormatoFacturaActual();
					}
				} else {
					finalQueryGlobalFormatoFactura="NONE";
				}


				String finalQueryGlobalFormatoNotaCredito="";

				if(((this.formatonotacreditosForeignKey==null||this.formatonotacreditosForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_formato_nota_creditoParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_formato_nota_creditoParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoNotaCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoNotaCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoNotaCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoNotaCredito, "");
						finalQueryGlobalFormatoNotaCredito+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoNotaCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoNotaCredito=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidFormatoNotaCreditoActual();
					}
				} else {
					finalQueryGlobalFormatoNotaCredito="NONE";
				}


				String finalQueryGlobalFormatoInventario="";

				if(((this.formatoinventariosForeignKey==null||this.formatoinventariosForeignKey.size()<=0) && this.parametrofactuConstantesFunciones.cargarid_formato_inventarioParametroFactu)
					 || (this.esRecargarFks && this.parametrofactuConstantesFunciones.cargarid_formato_inventarioParametroFactu)) {

					if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoInventario, "");
						finalQueryGlobalFormatoInventario+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoInventario=" WHERE " + ConstantesSql.ID + "="+parametrofactuSessionBean.getlidFormatoInventarioActual();
					}
				} else {
					finalQueryGlobalFormatoInventario="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				parametrofactuReturnGeneral=parametrofactuLogic.cargarCombosLoteForeignKeyParametroFactu(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalCuentaContableFactu,finalQueryGlobalCuentaContableFinan,finalQueryGlobalCuentaContableOtro,finalQueryGlobalFormatoProforma,finalQueryGlobalFormatoPedido,finalQueryGlobalFormatoFactura,finalQueryGlobalFormatoNotaCredito,finalQueryGlobalFormatoInventario);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=parametrofactuReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=parametrofactuReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableFactu.equals("NONE")) {
				this.cuentacontablefactusForeignKey=parametrofactuReturnGeneral.getcuentacontablefactusForeignKey();
			}

			if(!finalQueryGlobalCuentaContableFinan.equals("NONE")) {
				this.cuentacontablefinansForeignKey=parametrofactuReturnGeneral.getcuentacontablefinansForeignKey();
			}

			if(!finalQueryGlobalCuentaContableOtro.equals("NONE")) {
				this.cuentacontableotrosForeignKey=parametrofactuReturnGeneral.getcuentacontableotrosForeignKey();
			}

			if(!finalQueryGlobalFormatoProforma.equals("NONE")) {
				this.formatoproformasForeignKey=parametrofactuReturnGeneral.getformatoproformasForeignKey();
			}

			if(!finalQueryGlobalFormatoPedido.equals("NONE")) {
				this.formatopedidosForeignKey=parametrofactuReturnGeneral.getformatopedidosForeignKey();
			}

			if(!finalQueryGlobalFormatoFactura.equals("NONE")) {
				this.formatofacturasForeignKey=parametrofactuReturnGeneral.getformatofacturasForeignKey();
			}

			if(!finalQueryGlobalFormatoNotaCredito.equals("NONE")) {
				this.formatonotacreditosForeignKey=parametrofactuReturnGeneral.getformatonotacreditosForeignKey();
			}

			if(!finalQueryGlobalFormatoInventario.equals("NONE")) {
				this.formatoinventariosForeignKey=parametrofactuReturnGeneral.getformatoinventariosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyParametroFactu()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyCuentaContableFactu();
			this.addItemDefectoCombosForeignKeyCuentaContableFinan();
			this.addItemDefectoCombosForeignKeyCuentaContableOtro();
			this.addItemDefectoCombosForeignKeyFormatoProforma();
			this.addItemDefectoCombosForeignKeyFormatoPedido();
			this.addItemDefectoCombosForeignKeyFormatoFactura();
			this.addItemDefectoCombosForeignKeyFormatoNotaCredito();
			this.addItemDefectoCombosForeignKeyFormatoInventario();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.parametrofactuSessionBean==null) {
				this.parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableFactu()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFactu()) {
				CuentaContable cuentacontablefactu=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablefactu,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablefactu.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablefactusForeignKey,cuentacontablefactu,true)) {

					this.cuentacontablefactusForeignKey.add(0,cuentacontablefactu);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableFinan()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFinan()) {
				CuentaContable cuentacontablefinan=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablefinan,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablefinan.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablefinansForeignKey,cuentacontablefinan,true)) {

					this.cuentacontablefinansForeignKey.add(0,cuentacontablefinan);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableOtro()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableOtro()) {
				CuentaContable cuentacontableotro=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableotro,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableotro.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableotrosForeignKey,cuentacontableotro,true)) {

					this.cuentacontableotrosForeignKey.add(0,cuentacontableotro);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoProforma()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoProforma()) {
				Formato formatoproforma=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoproforma,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoproforma.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoproformasForeignKey,formatoproforma,true)) {

					this.formatoproformasForeignKey.add(0,formatoproforma);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoPedido()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {
				Formato formatopedido=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatopedido,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatopedido.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatopedidosForeignKey,formatopedido,true)) {

					this.formatopedidosForeignKey.add(0,formatopedido);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoFactura()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoFactura()) {
				Formato formatofactura=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatofactura,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatofactura.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatofacturasForeignKey,formatofactura,true)) {

					this.formatofacturasForeignKey.add(0,formatofactura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoNotaCredito()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoNotaCredito()) {
				Formato formatonotacredito=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatonotacredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatonotacredito.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatonotacreditosForeignKey,formatonotacredito,true)) {

					this.formatonotacreditosForeignKey.add(0,formatonotacredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoInventario()throws Exception {
		try {

			if(!this.parametrofactuSessionBean.getisBusquedaDesdeForeignKeySesionFormatoInventario()) {
				Formato formatoinventario=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoinventario.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoinventariosForeignKey,formatoinventario,true)) {

					this.formatoinventariosForeignKey.add(0,formatoinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyParametroFactu()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyParametroFactu(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyParametroFactu()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroFactu();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyParametroFactu(ParametroFactu parametrofactu)throws Exception {	
		try {
			
			this.setActualCuentaContableFactuForeignKey(parametrofactu.getid_cuenta_contable_factu(),false,"Formulario");
			this.setActualCuentaContableFinanForeignKey(parametrofactu.getid_cuenta_contable_finan(),false,"Formulario");
			this.setActualCuentaContableOtroForeignKey(parametrofactu.getid_cuenta_contable_otro(),false,"Formulario");
			this.setActualFormatoProformaForeignKey(parametrofactu.getid_formato_proforma(),false,"Formulario");
			this.setActualFormatoPedidoForeignKey(parametrofactu.getid_formato_pedido(),false,"Formulario");
			this.setActualFormatoFacturaForeignKey(parametrofactu.getid_formato_factura(),false,"Formulario");
			this.setActualFormatoNotaCreditoForeignKey(parametrofactu.getid_formato_nota_credito(),false,"Formulario");
			this.setActualFormatoInventarioForeignKey(parametrofactu.getid_formato_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyParametroFactu(ParametroFactu parametrofactu,String sTipoEvento)throws Exception {	
		try {
			
			

				if(parametrofactu.getCuentaContableFactu()!=null && !sTipoEvento.equals("id_cuenta_contable_factuParametroFactu")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablefactusForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablefactusForeignKey.add(parametrofactu.getCuentaContableFactu());

					this.addItemDefectoCombosForeignKeyCuentaContableFactu();
					this.cargarCombosFrameCuentaContableFactusForeignKey("Todos");
				}

				if(parametrofactu.getCuentaContableFinan()!=null && !sTipoEvento.equals("id_cuenta_contable_finanParametroFactu")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablefinansForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablefinansForeignKey.add(parametrofactu.getCuentaContableFinan());

					this.addItemDefectoCombosForeignKeyCuentaContableFinan();
					this.cargarCombosFrameCuentaContableFinansForeignKey("Todos");
				}

				if(parametrofactu.getCuentaContableOtro()!=null && !sTipoEvento.equals("id_cuenta_contable_otroParametroFactu")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableotrosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableotrosForeignKey.add(parametrofactu.getCuentaContableOtro());

					this.addItemDefectoCombosForeignKeyCuentaContableOtro();
					this.cargarCombosFrameCuentaContableOtrosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyParametroFactu()throws Exception {	
		try {
			
			this.setActualCuentaContableFactuForeignKey(this.parametrofactuConstantesFunciones.getid_cuenta_contable_factu(),false,"Formulario");
			this.setActualCuentaContableFinanForeignKey(this.parametrofactuConstantesFunciones.getid_cuenta_contable_finan(),false,"Formulario");
			this.setActualCuentaContableOtroForeignKey(this.parametrofactuConstantesFunciones.getid_cuenta_contable_otro(),false,"Formulario");
			this.setActualFormatoProformaForeignKey(this.parametrofactuConstantesFunciones.getid_formato_proforma(),false,"Formulario");
			this.setActualFormatoPedidoForeignKey(this.parametrofactuConstantesFunciones.getid_formato_pedido(),false,"Formulario");
			this.setActualFormatoFacturaForeignKey(this.parametrofactuConstantesFunciones.getid_formato_factura(),false,"Formulario");
			this.setActualFormatoNotaCreditoForeignKey(this.parametrofactuConstantesFunciones.getid_formato_nota_credito(),false,"Formulario");
			this.setActualFormatoInventarioForeignKey(this.parametrofactuConstantesFunciones.getid_formato_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyParametroFactu()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyParametroFactu()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyParametroFactu()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroParametroFactu()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyParametroFactu()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableFactusForeignKey("Todos");
			this.cargarCombosFrameCuentaContableFinansForeignKey("Todos");
			this.cargarCombosFrameCuentaContableOtrosForeignKey("Todos");
			this.cargarCombosFrameFormatoProformasForeignKey("Todos");
			this.cargarCombosFrameFormatoPedidosForeignKey("Todos");
			this.cargarCombosFrameFormatoFacturasForeignKey("Todos");
			this.cargarCombosFrameFormatoNotaCreditosForeignKey("Todos");
			this.cargarCombosFrameFormatoInventariosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyParametroFactu(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableFactusForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableFinansForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableOtrosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoProformasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoPedidosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoNotaCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoInventariosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyParametroFactu()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




















	
	

	public ParametroFactuBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ParametroFactuBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ParametroFactuBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.parametrofactuSessionBean=new ParametroFactuSessionBean(); 
		this.parametrofactuConstantesFunciones=new ParametroFactuConstantesFunciones(); 
		this.parametrofactuBean=new ParametroFactu();//(this.parametrofactuConstantesFunciones); 		
		this.parametrofactuReturnGeneral=new ParametroFactuParameterReturnGeneral(); 
		
		this.parametrofactuSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.parametrofactuSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ParametroFactuBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ParametroFactuBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ParametroFactuBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessParametroFactu(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.parametrofactuConstantesFunciones=new ParametroFactuConstantesFunciones(); 
			this.parametrofactuBean=new ParametroFactu();//this.parametrofactuConstantesFunciones); 			
			this.parametrofactuReturnGeneral=new ParametroFactuParameterReturnGeneral(); 
		
			ParametroFactuBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Parametro Factu Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.parametrofactu=new ParametroFactu();
			this.parametrofactus = new ArrayList<ParametroFactu>();
			this.parametrofactusAux = new ArrayList<ParametroFactu>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic=new ParametroFactuLogic();
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			//this.parametrofactuSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.parametrofactuSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormParametroFactu);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroFactu);	
					}
					
					if(this.jInternalFrameImportacionParametroFactu!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroFactu);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByParametroFactu!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByParametroFactu);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormParametroFactu!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroFactu);
				this.jInternalFrameDetalleFormParametroFactu.setVisible(false);
				this.jInternalFrameDetalleFormParametroFactu.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroFactu);
					this.jInternalFrameReporteDinamicoParametroFactu.setVisible(false);
					this.jInternalFrameReporteDinamicoParametroFactu.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionParametroFactu!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionParametroFactu);
					this.jInternalFrameImportacionParametroFactu.setVisible(false);
					this.jInternalFrameImportacionParametroFactu.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByParametroFactu!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByParametroFactu);
					this.jInternalFrameOrderByParametroFactu.setVisible(false);
					this.jInternalFrameOrderByParametroFactu.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idParametroFactuActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ParametroFactuConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.parametrofactuReturnGeneral=new ParametroFactuParameterReturnGeneral();
			
			this.parametrofactuParameterGeneral=new ParametroFactuParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.parametrofactuLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ParametroFactuJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroFactuConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametrofactuSessionBean.getEsGuardarRelacionado(),this.parametrofactuSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroFactuConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametrofactuSessionBean.getEsGuardarRelacionado(),this.parametrofactuSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaDuplicarParametroFactu=true;
			this.isVisibilidadCeldaCopiarParametroFactu=true;
			this.isVisibilidadCeldaVerFormParametroFactu=true;
			this.isVisibilidadCeldaOrdenParametroFactu=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=false;
			this.isVisibilidadCeldaGuardarParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			
			
			this.isVisibilidadFK_IdCuentaContableFactu=true;
			this.isVisibilidadFK_IdCuentaContableFinan=true;
			this.isVisibilidadFK_IdCuentaContableOtro=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFormatoFactura=true;
			this.isVisibilidadFK_IdFormatoInventario=true;
			this.isVisibilidadFK_IdFormatoNotaCredito=true;
			this.isVisibilidadFK_IdFormatoPedo=true;
			this.isVisibilidadFK_IdFormatoProforma=true;
			this.isVisibilidadFK_IdSucursal=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosParametroFactu();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioParametroFactu(false);
			
			this.setPermisosUsuarioParametroFactu();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrofactuSessionBean.getEsGuardarRelacionado() 
				|| (this.parametrofactuSessionBean.getEsGuardarRelacionado() && this.parametrofactuSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioParametroFactuClasesRelacionadas();
			}
			
			if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioParametroFactuClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosParametroFactu();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualParametroFactu();
			}
			
			if(!this.isPermisoBusquedaParametroFactu) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasParametroFactu.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioParametroFactu,this.isPermisoPaginacionMedioParametroFactu,this.isPermisoPaginacionTodoParametroFactu);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ParametroFactuConstantesFunciones.getTiposSeleccionarParametroFactu());
				
				this.tiposColumnasSelect=ParametroFactuConstantesFunciones.getTiposSeleccionarParametroFactu(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioParametroFactu();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioParametroFactu(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioParametroFactu(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroFactu() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.cuentacontablefactuLogic=new CuentaContableLogic();
			this.cuentacontablefinanLogic=new CuentaContableLogic();
			this.cuentacontableotroLogic=new CuentaContableLogic();
			this.formatoproformaLogic=new FormatoLogic();
			this.formatopedidoLogic=new FormatoLogic();
			this.formatofacturaLogic=new FormatoLogic();
			this.formatonotacreditoLogic=new FormatoLogic();
			this.formatoinventarioLogic=new FormatoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				parametrofactuImplementable= (ParametroFactuImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroFactuConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				parametrofactuImplementableHome= (ParametroFactuImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroFactuConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.parametrofactus= new ArrayList<ParametroFactu>();
			this.parametrofactusEliminados= new ArrayList<ParametroFactu>();
						
			this.isEsNuevoParametroFactu=false;
			this.esParaAccionDesdeFormularioParametroFactu=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableFactuActual=0L;
			this.idCuentaContableFinanActual=0L;
			this.idCuentaContableOtroActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.cuentacontablefactusForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablefinansForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableotrosForeignKey=new ArrayList<CuentaContable>() ;
			this.formatoproformasForeignKey=new ArrayList<Formato>() ;
			this.formatopedidosForeignKey=new ArrayList<Formato>() ;
			this.formatofacturasForeignKey=new ArrayList<Formato>() ;
			this.formatonotacreditosForeignKey=new ArrayList<Formato>() ;
			this.formatoinventariosForeignKey=new ArrayList<Formato>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyParametroFactu(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroParametroFactu();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ParametroFactuBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ParametroFactuConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesParametroFactu("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingParametroFactu(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioParametroFactu();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioParametroFactu();
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasParametroFactu.getTabCount(); i++) {
					this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessParametroFactu(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ParametroFactu: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectParametroFactu() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesParametroFactu")) {
				iIndex=this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessParametroFactu();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyParametroFactu(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyParametroFactu(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyParametroFactu(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyParametroFactuListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyParametroFactu();
		
		this.cargarCombosFrameForeignKeyParametroFactu();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyParametroFactu();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyParametroFactu();
		}
	}
	
	

	public void cargarCombosForeignKeyCuentaContableFactu(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableFactuListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableFactu();
				this.cargarCombosFrameCuentaContableFactusForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableFactu(this.cuentacontablefactusForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFinan(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableFinanListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableFinan();
				this.cargarCombosFrameCuentaContableFinansForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableFinan(this.cuentacontablefinansForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableOtro(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableOtroListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableOtro();
				this.cargarCombosFrameCuentaContableOtrosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableOtro(this.cuentacontableotrosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoProforma(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoProformaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoProforma();
				this.cargarCombosFrameFormatoProformasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoProforma(this.formatoproformasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoPedido(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoPedido();
				this.cargarCombosFrameFormatoPedidosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoPedido(this.formatopedidosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoFactura();
				this.cargarCombosFrameFormatoFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoFactura(this.formatofacturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoNotaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoNotaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoNotaCredito();
				this.cargarCombosFrameFormatoNotaCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoNotaCredito(this.formatonotacreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoInventario();
				this.cargarCombosFrameFormatoInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoInventario(this.formatoinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoParametroFactuActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			
			if(jTableDatosParametroFactu.getRowCount()>=1) {
				jTableDatosParametroFactu.removeRowSelectionInterval(0, jTableDatosParametroFactu.getRowCount()-1);						
			}
			
			this.isEsNuevoParametroFactu=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoParametroFactu(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesParametroFactu(true);			
			//this.parametrofactu=new ParametroFactu();
			//this.parametrofactu.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroFactu(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroFactu() ;
			
			if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroFactu(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.parametrofactu);	
			this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);				
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ParametroFactu: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarParametroFactuActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosParametroFactu.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosParametroFactu.getSelectedRows().length;			
			}
			
			parametrofactusSeleccionados=this.getParametroFactusSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoParametroFactu--;			
				//ParametroFactu parametrofactuAux= new ParametroFactu();			
				//parametrofactuAux.setId(this.iIdNuevoParametroFactu);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ParametroFactu parametrofactuOrigen=new ParametroFactu();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ParametroFactu parametrofactuOrigen : parametrofactusSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							parametrofactuOrigen =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrofactuOrigen =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaParametroFactu();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.parametrofactu.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosParametroFactu(parametrofactuOrigen,this.parametrofactu,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametrofactuLogic.getParametroFactus().add(this.parametrofactuAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametrofactus.add(this.parametrofactuAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaParametroFactu(false);
				
				this.jTableDatosParametroFactu.setRowSelectionInterval(this.getIndiceNuevoParametroFactu(), this.getIndiceNuevoParametroFactu());
				
				int iLastRow =  this.jTableDatosParametroFactu.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroFactu.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroFactu.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroFactu(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();									
		
			ParametroFactu parametrofactuOrigen=new ParametroFactu();
			ParametroFactu parametrofactuDestino=new ParametroFactu();
				
			parametrofactusSeleccionados=this.getParametroFactusSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosParametroFactu.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || parametrofactusSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosParametroFactu.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuOrigen =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametrofactuOrigen =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrofactuDestino =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametrofactuDestino =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				parametrofactuOrigen =parametrofactusSeleccionados.get(0);
				parametrofactuDestino =parametrofactusSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosParametroFactu(parametrofactuOrigen,parametrofactuDestino,true,false);
				
				parametrofactuDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametrofactuDestino,parametrofactuLogic.getParametroFactus());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrofactuDestino,parametrofactus);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaParametroFactu(false);
				
				//this.jTableDatosParametroFactu.setRowSelectionInterval(this.getIndiceNuevoParametroFactu(), this.getIndiceNuevoParametroFactu());
				
				int iLastRow =  this.jTableDatosParametroFactu.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroFactu.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroFactu.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroFactu(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormParametroFactu.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesParametroFactu.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasParametroFactu.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesParametroFactu.setVisible(!isVisible);
			this.jPanelPaginacionParametroFactu.setVisible(!isVisible);
			this.jPanelAccionesParametroFactu.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameParametroFactu();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoParametroFactu();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionParametroFactu();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByParametroFactu();
			
			this.abrirFrameOrderByParametroFactu();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByParametroFactu();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleParametroFactu(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroFactu);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormParametroFactu.isMaximum()) {
					this.jInternalFrameDetalleFormParametroFactu.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormParametroFactu.setSize(this.jInternalFrameDetalleFormParametroFactu.iWidthFormulario,this.jInternalFrameDetalleFormParametroFactu.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormParametroFactu.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormParametroFactu.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormParametroFactu.isMaximum()) {
						this.jInternalFrameDetalleFormParametroFactu.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormParametroFactu.jContentPaneDetalleParametroFactu.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormParametroFactu.jContentPaneDetalleParametroFactu.getWidth(),ParametroFactuConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormParametroFactu.jContentPaneDetalleParametroFactu.getWidth(),ParametroFactuConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormParametroFactu.jContentPaneDetalleParametroFactu.getWidth(),ParametroFactuConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormParametroFactu.setVisible(true);
	        this.jInternalFrameDetalleFormParametroFactu.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByParametroFactu() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByParametroFactu==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByParametroFactu=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroFactu,false,this);
				} else {
					this.jInternalFrameOrderByParametroFactu=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroFactu,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByParametroFactu);
				this.jInternalFrameOrderByParametroFactu.setVisible(false);
				this.jInternalFrameOrderByParametroFactu.setSelected(false);
				
				this.jInternalFrameOrderByParametroFactu.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroFactu"));
				
				this.inicializarActualizarBindingTablaOrderByParametroFactu();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionParametroFactu() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionParametroFactu==null) {
				
				this.jInternalFrameImportacionParametroFactu=new ImportacionJInternalFrame(ParametroFactuConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroFactu);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionParametroFactu);
				this.jInternalFrameImportacionParametroFactu.setVisible(false);
				this.jInternalFrameImportacionParametroFactu.setSelected(false);


				this.jInternalFrameImportacionParametroFactu.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroFactu"));
				this.jInternalFrameImportacionParametroFactu.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroFactu"));
				this.jInternalFrameImportacionParametroFactu.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroFactu"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoParametroFactu() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoParametroFactu==null) {
				this.jInternalFrameReporteDinamicoParametroFactu=new ReporteDinamicoJInternalFrame(ParametroFactuConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroFactu);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroFactu);
				this.jInternalFrameReporteDinamicoParametroFactu.setVisible(false);
				this.jInternalFrameReporteDinamicoParametroFactu.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroFactu"));
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroFactu"));
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroFactu"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroFactu();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleParametroFactu() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroFactu);
			
	       	this.jInternalFrameDetalleFormParametroFactu.setVisible(false);
	        this.jInternalFrameDetalleFormParametroFactu.setSelected(false);
			
			//this.jInternalFrameDetalleFormParametroFactu.dispose();
			//this.jInternalFrameDetalleFormParametroFactu=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoParametroFactu() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoParametroFactu.setVisible(true);
	        this.jInternalFrameReporteDinamicoParametroFactu.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionParametroFactu() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionParametroFactu.setVisible(true);
	        this.jInternalFrameImportacionParametroFactu.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByParametroFactu() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByParametroFactu.setVisible(true);
	        this.jInternalFrameOrderByParametroFactu.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByParametroFactu() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByParametroFactu.setVisible(false);
	        this.jInternalFrameOrderByParametroFactu.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoParametroFactu() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoParametroFactu.setVisible(false);
	        this.jInternalFrameReporteDinamicoParametroFactu.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionParametroFactu() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionParametroFactu.setVisible(false);
	        this.jInternalFrameImportacionParametroFactu.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableFactu(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableFactu";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
						TitledBorder titledBorderCuentaContableFactu=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableFactu.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableFactu(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableFinan(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableFinan";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
						TitledBorder titledBorderCuentaContableFinan=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableFinan.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableFinan(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableOtro(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableOtro";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
						TitledBorder titledBorderCuentaContableOtro=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableOtro.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableOtro(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarParametroFactu(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarParametroFactu(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesParametroFactu(true);
			//this.isEsNuevoParametroFactu=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesParametroFactu("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroFactu(false) ;
			
			if(parametrofactuSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroFactu(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroFactu(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaParametroFactuActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarParametroFactu(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesParametroFactu(true);
			//this.isEsNuevoParametroFactu=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.parametrofactu.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesParametroFactu("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesParametroFactu(false) ;
			
			if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroFactu(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroFactu(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContableFactu")) {
				if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_factuParametroFactu) {
					this.cargarCombosCuentaContableFactusForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroFactu(false,false);
					this.cargarCombosFrameCuentaContableFactusForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_factu (id);

				this.recargarComboTablaCuentaContableFactu(this.cuentacontablefactusForeignKey);

			}
			
			if(sType.equals("CuentaContableFinan")) {
				if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_finanParametroFactu) {
					this.cargarCombosCuentaContableFinansForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroFactu(false,false);
					this.cargarCombosFrameCuentaContableFinansForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_finan (id);

				this.recargarComboTablaCuentaContableFinan(this.cuentacontablefinansForeignKey);

			}
			
			if(sType.equals("CuentaContableOtro")) {
				if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_otroParametroFactu) {
					this.cargarCombosCuentaContableOtrosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroFactu(false,false);
					this.cargarCombosFrameCuentaContableOtrosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_otro (id);

				this.recargarComboTablaCuentaContableOtro(this.cuentacontableotrosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaCuentaContableFactu(List<CuentaContable> cuentacontablefactusForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableFactu=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU));
		TableCellEditor tableCellEditorCuentaContableFactu =tableColumnCuentaContableFactu.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableFactu;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablefactusForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablefactusForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableFinan(List<CuentaContable> cuentacontablefinansForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableFinan=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN));
		TableCellEditor tableCellEditorCuentaContableFinan =tableColumnCuentaContableFinan.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableFinan;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablefinansForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablefinansForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableOtro(List<CuentaContable> cuentacontableotrosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableOtro=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO));
		TableCellEditor tableCellEditorCuentaContableOtro =tableColumnCuentaContableOtro.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableOtro;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableotrosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableotrosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoProforma(List<Formato> formatoproformasForeignKey)throws Exception{
		TableColumn tableColumnFormatoProforma=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA));
		TableCellEditor tableCellEditorFormatoProforma =tableColumnFormatoProforma.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoProforma;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoproformasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoproformasForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoPedido(List<Formato> formatopedidosForeignKey)throws Exception{
		TableColumn tableColumnFormatoPedido=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO));
		TableCellEditor tableCellEditorFormatoPedido =tableColumnFormatoPedido.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoPedido;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatopedidosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatopedidosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoFactura(List<Formato> formatofacturasForeignKey)throws Exception{
		TableColumn tableColumnFormatoFactura=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA));
		TableCellEditor tableCellEditorFormatoFactura =tableColumnFormatoFactura.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoFactura;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatofacturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatofacturasForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoNotaCredito(List<Formato> formatonotacreditosForeignKey)throws Exception{
		TableColumn tableColumnFormatoNotaCredito=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO));
		TableCellEditor tableCellEditorFormatoNotaCredito =tableColumnFormatoNotaCredito.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoNotaCredito;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatonotacreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatonotacreditosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoInventario(List<Formato> formatoinventariosForeignKey)throws Exception{
		TableColumn tableColumnFormatoInventario=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO));
		TableCellEditor tableCellEditorFormatoInventario =tableColumnFormatoInventario.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoInventario;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoinventariosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_factu (Long id) throws Exception {
		this.setActualCuentaContableFactuForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_finan (Long id) throws Exception {
		this.setActualCuentaContableFinanForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_otro (Long id) throws Exception {
		this.setActualCuentaContableOtroForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesParametroFactu(false);
			
			//if(!this.isEsNuevoParametroFactu) {								
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				
			}
			
			if(this.permiteMantenimiento(this.parametrofactu)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoParametroFactu=true;
					this.inicializarActualizarBindingTablaParametroFactu(false);
					this.isEsNuevoParametroFactu=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoParametroFactu=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoParametroFactu=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroFactu(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroFactu(false);
				
				this.habilitarDeshabilitarControlesParametroFactu(false);
			
												
				
				if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleParametroFactu();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoParametroFactuActionPerformed(evt,parametrofactuSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualParametroFactu(this.parametrofactu,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,parametrofactuSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.parametrofactu.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarParametroFactuActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				this.parametrofactu.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				this.parametrofactu.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.parametrofactu)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ParametroFactuModel) this.jTableDatosParametroFactu.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoParametroFactu=true;
				this.inicializarActualizarBindingTablaParametroFactu(false);
				this.isEsNuevoParametroFactu=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroFactu(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroFactu(false);
				
				this.habilitarDeshabilitarControlesParametroFactu(false);
				
				
				
				if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleParametroFactu();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarParametroFactuActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosParametroFactu.getRowCount()>=1) {
				jTableDatosParametroFactu.removeRowSelectionInterval(0, jTableDatosParametroFactu.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesParametroFactu(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaParametroFactu(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroFactu(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroFactu(false) ;
			
			this.isEsNuevoParametroFactu=false;
			
			if(ParametroFactuJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleParametroFactu();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingParametroFactu(false);
				
				//SI ES MANUAL
				if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualParametroFactu();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoParametroFactu--;			
			//ParametroFactu parametrofactuAux= new ParametroFactu();			
			//parametrofactuAux.setId(this.iIdNuevoParametroFactu);
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaParametroFactu();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
			
			this.parametrofactu.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.parametrofactuLogic.getParametroFactus().add(this.parametrofactuAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.parametrofactus.add(this.parametrofactuAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaParametroFactu(false);
			
			this.jTableDatosParametroFactu.setRowSelectionInterval(this.getIndiceNuevoParametroFactu(), this.getIndiceNuevoParametroFactu());
			
			int iLastRow =  this.jTableDatosParametroFactu.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosParametroFactu.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosParametroFactu.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaParametroFactu(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametroFactu(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroFactu(false);
			
			//SI ES MANUAL
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroFactu();
			}
			
			//this.abrirFrameTreeParametroFactu();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionParametroFactuActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Parametro FactuS ?", "MANTENIMIENTO DE Parametro Factu", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionParametroFactu.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralParametroFactu();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.parametrofactuReturnGeneral=parametrofactuLogic.procesarImportacionParametroFactusWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.parametrofactuParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarParametroFactuReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionParametroFactuActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionParametroFactu.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionParametroFactu.setFileImportacion(this.jInternalFrameImportacionParametroFactu.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionParametroFactu.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionParametroFactu.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionParametroFactu.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionParametroFactu.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		

		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ParametroFactuBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ParametroFactuBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroFactuConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableFactu_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableFactu_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableFactu_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableFactu_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableFinan_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableFinan_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableFinan_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableFinan_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableOtro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableOtro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableOtro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableOtro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoProforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoProforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoProforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoProforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialProforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialProforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialProforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialProforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuancialPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuancialPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuancialPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuancialPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_emProforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_emProforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_emProforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_emProforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_emPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_emPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_emPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_emPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_emFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_emFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_emFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_emFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_emNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_emNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_emNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_emNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_emInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_emInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_emInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_emInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDetalleProforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDetalleProforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDetalleProforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDetalleProforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDetallePedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDetallePedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDetallePedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDetallePedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDetalleFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDetalleFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDetalleFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDetalleFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDetalleNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDetalleNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDetalleNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDetalleNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoParametroFactu.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ParametroFactuConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU:
					sNombreCampoCategoria="id_cuenta_contable_factu";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN:
					sNombreCampoCategoria="id_cuenta_contable_finan";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO:
					sNombreCampoCategoria="id_cuenta_contable_otro";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA:
					sNombreCampoCategoria="id_formato_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					sNombreCampoCategoria="id_formato_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA:
					sNombreCampoCategoria="id_formato_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO:
					sNombreCampoCategoria="id_formato_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO:
					sNombreCampoCategoria="id_formato_inventario";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA:
					sNombreCampoCategoria="secuencial_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO:
					sNombreCampoCategoria="secuancial_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA:
					sNombreCampoCategoria="secuencial_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO:
					sNombreCampoCategoria="secuencial_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA:
					sNombreCampoCategoria="item_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO:
					sNombreCampoCategoria="item_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA:
					sNombreCampoCategoria="item_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO:
					sNombreCampoCategoria="item_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO:
					sNombreCampoCategoria="item_inventario";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA:
					sNombreCampoCategoria="con_detalle_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO:
					sNombreCampoCategoria="con_detalle_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA:
					sNombreCampoCategoria="con_detalle_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO:
					sNombreCampoCategoria="con_detalle_nota_credito";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ParametroFactuConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU:
					sNombreCampoCategoriaValor="id_cuenta_contable_factu";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN:
					sNombreCampoCategoriaValor="id_cuenta_contable_finan";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO:
					sNombreCampoCategoriaValor="id_cuenta_contable_otro";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA:
					sNombreCampoCategoriaValor="id_formato_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					sNombreCampoCategoriaValor="id_formato_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA:
					sNombreCampoCategoriaValor="id_formato_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO:
					sNombreCampoCategoriaValor="id_formato_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO:
					sNombreCampoCategoriaValor="id_formato_inventario";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA:
					sNombreCampoCategoriaValor="secuencial_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO:
					sNombreCampoCategoriaValor="secuancial_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA:
					sNombreCampoCategoriaValor="secuencial_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO:
					sNombreCampoCategoriaValor="secuencial_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA:
					sNombreCampoCategoriaValor="item_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO:
					sNombreCampoCategoriaValor="item_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA:
					sNombreCampoCategoriaValor="item_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO:
					sNombreCampoCategoriaValor="item_nota_credito";
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO:
					sNombreCampoCategoriaValor="item_inventario";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA:
					sNombreCampoCategoriaValor="con_detalle_proforma";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO:
					sNombreCampoCategoriaValor="con_detalle_pedido";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA:
					sNombreCampoCategoriaValor="con_detalle_factura";
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO:
					sNombreCampoCategoriaValor="con_detalle_nota_credito";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroFactuConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Factu",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_factu");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Finan",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_finan");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_otro");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Proforma",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_proforma");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Pedo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_pedido");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_factura");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Nota Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_nota_credito");
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_inventario");
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Proforma",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_proforma");
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuancial Pedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuancial_pedido");
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_factura");
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Nota Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_nota_credito");
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Item Proforma",sNombreCampoCategoria,sNombreCampoCategoriaValor,"item_proforma");
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Item Pedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"item_pedido");
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Item Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"item_factura");
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Item Nota Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"item_nota_credito");
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Item Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"item_inventario");
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Detalle Proforma",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_detalle_proforma");
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Detalle Pedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_detalle_pedido");
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Detalle Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_detalle_factura");
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Detalle Nota Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_detalle_nota_credito");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoParametroFactuActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ParametroFactus");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ParametroFactuConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcuentacontablefactu_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcuentacontablefinan_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcuentacontableotro_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getformatoproforma_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getformatopedido_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getformatofactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getformatonotacredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getformatoinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getsecuencial_proforma());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getsecuancial_pedido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getsecuencial_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getsecuencial_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getitem_proforma());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getitem_pedido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getitem_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getitem_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getitem_inventario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcon_detalle_proforma());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcon_detalle_pedido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcon_detalle_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO);
					iRow++;

					for(ParametroFactu parametrofactu:parametrofactusSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrofactu.getcon_detalle_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelParametroFactu(row);				
			//	iRow++;
			//}				
			
			//for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelParametroFactu(parametrofactuAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroFactu(false);
			
			//SI ES MANUAL
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroFactu();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroFactu(false);
			
			//SI ES MANUAL
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroFactu();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesParametroFactuActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroFactu(false);
			
			//SI ES MANUAL
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroFactu();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaParametroFactu() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosParametroFactu.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosParametroFactu.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosParametroFactu.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosParametroFactu.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosParametroFactu.setMinimumSize(dimensionMinimum);
		this.jTableDatosParametroFactu.setMaximumSize(dimensionMaximum);
		this.jTableDatosParametroFactu.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingParametroFactu(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingParametroFactu(esInicializar,true);
	}
	
	public void inicializarActualizarBindingParametroFactu(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaParametroFactu(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesParametroFactu(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasParametroFactu(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroFactu(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesParametroFactu(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualParametroFactu() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaParametroFactu();
		
		this.inicializarActualizarBindingBotonesManualParametroFactu(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualParametroFactu();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroFactu() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualParametroFactu(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualParametroFactu(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosParametroFactu.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosParametroFactu.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteParametroFactu.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormParametroFactu!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionNuevoParametroFactu.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionSinCerrarParametroFactu.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionSinMensajeParametroFactu.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosParametroFactu.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosParametroFactu.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteParametroFactu.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormParametroFactu!=null) {
				this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionNuevoParametroFactu.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionSinCerrarParametroFactu.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormParametroFactu.jCheckBoxPostAccionSinMensajeParametroFactu.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionParametroFactu.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionParametroFactu.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesParametroFactu.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesParametroFactu.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesParametroFactu.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarParametroFactu.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesParametroFactu.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesParametroFactu.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralParametroFactu.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesParametroFactu(Boolean esInicializar) throws Exception {
		try	{	
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualParametroFactu(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesParametroFactu() throws Exception {
		try	{
			if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroFactu();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroFactu() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroFactu() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesParametroFactu.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesParametroFactu.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesParametroFactu.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionParametroFactu.addItem(reporte);
			}
			
			
			if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionParametroFactu.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionParametroFactu.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesParametroFactu.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesParametroFactu.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarParametroFactu.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarParametroFactu.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarParametroFactu.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroFactu();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroFactu() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
				this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
				this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroFactu.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
				
				if(this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroFactu.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoParametroFactu.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroFactu.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroFactu.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualParametroFactu()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.getSelectedItem()!=null){this.id_cuenta_contable_factuFK_IdCuentaContableFactu=((CuentaContable)this.jComboBoxid_cuenta_contable_factuFK_IdCuentaContableFactuParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.getSelectedItem()!=null){this.id_cuenta_contable_finanFK_IdCuentaContableFinan=((CuentaContable)this.jComboBoxid_cuenta_contable_finanFK_IdCuentaContableFinanParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.getSelectedItem()!=null){this.id_cuenta_contable_otroFK_IdCuentaContableOtro=((CuentaContable)this.jComboBoxid_cuenta_contable_otroFK_IdCuentaContableOtroParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.getSelectedItem()!=null){this.id_formato_facturaFK_IdFormatoFactura=((Formato)this.jComboBoxid_formato_facturaFK_IdFormatoFacturaParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.getSelectedItem()!=null){this.id_formato_inventarioFK_IdFormatoInventario=((Formato)this.jComboBoxid_formato_inventarioFK_IdFormatoInventarioParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.getSelectedItem()!=null){this.id_formato_nota_creditoFK_IdFormatoNotaCredito=((Formato)this.jComboBoxid_formato_nota_creditoFK_IdFormatoNotaCreditoParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.getSelectedItem()!=null){this.id_formato_pedidoFK_IdFormatoPedo=((Formato)this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroFactu.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.getSelectedItem()!=null){this.id_formato_proformaFK_IdFormatoProforma=((Formato)this.jComboBoxid_formato_proformaFK_IdFormatoProformaParametroFactu.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasParametroFactu(Boolean esInicializar) throws Exception {				
		if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualParametroFactu();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaParametroFactu() throws Exception {
		this.inicializarActualizarBindingTablaParametroFactu(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByParametroFactu() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosParametroFactuOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactuOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaParametroFactu(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=parametrofactuLogic.getParametroFactus().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=parametrofactus.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosParametroFactu.setModel(new ParametroFactuModel(this.parametrofactuLogic.getParametroFactus(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosParametroFactu.setModel(new ParametroFactuModel(this.parametrofactus,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByParametroFactu!=null && this.jInternalFrameOrderByParametroFactu.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByParametroFactu();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ParametroFactuConstantesFunciones.SCLASSWEBTITULO,parametrofactuConstantesFunciones.resaltarSeleccionarParametroFactu,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ParametroFactuConstantesFunciones.SCLASSWEBTITULO,parametrofactuConstantesFunciones.resaltarSeleccionarParametroFactu,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ID));

		if(this.parametrofactuConstantesFunciones.mostraridParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaridParametroFactu,this.parametrofactuConstantesFunciones.activaridParametroFactu,this,true,"idParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaridParametroFactu,this.parametrofactuConstantesFunciones.activaridParametroFactu,this,true,"idParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDEMPRESA));

		if(this.parametrofactuConstantesFunciones.mostrarid_empresaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_empresaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_empresaParametroFactu));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_empresaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_empresaParametroFactu,false,"id_empresaParametroFactu","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.parametrofactuConstantesFunciones.mostrarid_sucursalParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.parametrofactuConstantesFunciones.resaltarid_sucursalParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_sucursalParametroFactu));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.parametrofactuConstantesFunciones.resaltarid_sucursalParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_sucursalParametroFactu,false,"id_sucursalParametroFactu","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU));

		if(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_factuParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablefactusForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_factuParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_factuParametroFactu));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablefactusForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_factuParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_factuParametroFactu,true,"id_cuenta_contable_factuParametroFactu","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN));

		if(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_finanParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablefinansForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_finanParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_finanParametroFactu));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablefinansForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_finanParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_finanParametroFactu,true,"id_cuenta_contable_finanParametroFactu","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO));

		if(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_otroParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableotrosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_otroParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_otroParametroFactu));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableotrosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_otroParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_cuenta_contable_otroParametroFactu,true,"id_cuenta_contable_otroParametroFactu","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA));

		if(this.parametrofactuConstantesFunciones.mostrarid_formato_proformaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoproformasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_proformaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_proformaParametroFactu));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoproformasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_proformaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_proformaParametroFactu,true,"id_formato_proformaParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO));

		if(this.parametrofactuConstantesFunciones.mostrarid_formato_pedidoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatopedidosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_pedidoParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_pedidoParametroFactu));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatopedidosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_pedidoParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_pedidoParametroFactu,true,"id_formato_pedidoParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA));

		if(this.parametrofactuConstantesFunciones.mostrarid_formato_facturaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatofacturasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_facturaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_facturaParametroFactu));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatofacturasForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_facturaParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_facturaParametroFactu,true,"id_formato_facturaParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO));

		if(this.parametrofactuConstantesFunciones.mostrarid_formato_nota_creditoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatonotacreditosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_nota_creditoParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_nota_creditoParametroFactu));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatonotacreditosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_nota_creditoParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_nota_creditoParametroFactu,true,"id_formato_nota_creditoParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO));

		if(this.parametrofactuConstantesFunciones.mostrarid_formato_inventarioParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoinventariosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_inventarioParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_inventarioParametroFactu));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoinventariosForeignKey,this.parametrofactuConstantesFunciones.resaltarid_formato_inventarioParametroFactu,this,this.parametrofactuConstantesFunciones.activarid_formato_inventarioParametroFactu,true,"id_formato_inventarioParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA));

		if(this.parametrofactuConstantesFunciones.mostrarsecuencial_proformaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_proformaParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_proformaParametroFactu,this,true,"secuencial_proformaParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_proformaParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_proformaParametroFactu,this,true,"secuencial_proformaParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO));

		if(this.parametrofactuConstantesFunciones.mostrarsecuancial_pedidoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.parametrofactuConstantesFunciones.resaltarsecuancial_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activarsecuancial_pedidoParametroFactu,this,true,"secuancial_pedidoParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltarsecuancial_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activarsecuancial_pedidoParametroFactu,this,true,"secuancial_pedidoParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA));

		if(this.parametrofactuConstantesFunciones.mostrarsecuencial_facturaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_facturaParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_facturaParametroFactu,this,true,"secuencial_facturaParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_facturaParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_facturaParametroFactu,this,true,"secuencial_facturaParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO));

		if(this.parametrofactuConstantesFunciones.mostrarsecuencial_nota_creditoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_nota_creditoParametroFactu,this,true,"secuencial_nota_creditoParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltarsecuencial_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activarsecuencial_nota_creditoParametroFactu,this,true,"secuencial_nota_creditoParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA));

		if(this.parametrofactuConstantesFunciones.mostraritem_proformaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaritem_proformaParametroFactu,this.parametrofactuConstantesFunciones.activaritem_proformaParametroFactu,this,true,"item_proformaParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaritem_proformaParametroFactu,this.parametrofactuConstantesFunciones.activaritem_proformaParametroFactu,this,true,"item_proformaParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO));

		if(this.parametrofactuConstantesFunciones.mostraritem_pedidoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaritem_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activaritem_pedidoParametroFactu,this,true,"item_pedidoParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaritem_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activaritem_pedidoParametroFactu,this,true,"item_pedidoParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA));

		if(this.parametrofactuConstantesFunciones.mostraritem_facturaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaritem_facturaParametroFactu,this.parametrofactuConstantesFunciones.activaritem_facturaParametroFactu,this,true,"item_facturaParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaritem_facturaParametroFactu,this.parametrofactuConstantesFunciones.activaritem_facturaParametroFactu,this,true,"item_facturaParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO));

		if(this.parametrofactuConstantesFunciones.mostraritem_nota_creditoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaritem_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activaritem_nota_creditoParametroFactu,this,true,"item_nota_creditoParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaritem_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activaritem_nota_creditoParametroFactu,this,true,"item_nota_creditoParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO));

		if(this.parametrofactuConstantesFunciones.mostraritem_inventarioParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrofactuConstantesFunciones.resaltaritem_inventarioParametroFactu,this.parametrofactuConstantesFunciones.activaritem_inventarioParametroFactu,this,true,"item_inventarioParametroFactu","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrofactuConstantesFunciones.resaltaritem_inventarioParametroFactu,this.parametrofactuConstantesFunciones.activaritem_inventarioParametroFactu,this,true,"item_inventarioParametroFactu","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA));

		if(this.parametrofactuConstantesFunciones.mostrarcon_detalle_proformaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_proformaParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_proformaParametroFactu));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_proformaParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_proformaParametroFactu,this,true,"con_detalle_proformaParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO));

		if(this.parametrofactuConstantesFunciones.mostrarcon_detalle_pedidoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_pedidoParametroFactu));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_pedidoParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_pedidoParametroFactu,this,true,"con_detalle_pedidoParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA));

		if(this.parametrofactuConstantesFunciones.mostrarcon_detalle_facturaParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_facturaParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_facturaParametroFactu));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_facturaParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_facturaParametroFactu,this,true,"con_detalle_facturaParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO));

		if(this.parametrofactuConstantesFunciones.mostrarcon_detalle_nota_creditoParametroFactu && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_nota_creditoParametroFactu));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametrofactuConstantesFunciones.resaltarcon_detalle_nota_creditoParametroFactu,this.parametrofactuConstantesFunciones.activarcon_detalle_nota_creditoParametroFactu,this,true,"con_detalle_nota_creditoParametroFactu","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroFactuPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroFactu.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroFactu.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarParametroFactu && this.isPermisoGuardarCambiosParametroFactu) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.parametrofactuSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosParametroFactu.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosParametroFactu.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroFactu && this.isPermisoGuardarCambiosParametroFactu) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroFactu && this.isPermisoGuardarCambiosParametroFactu) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosParametroFactu.moveColumn(this.jTableDatosParametroFactu.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosParametroFactu.moveColumn(this.jTableDatosParametroFactu.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosParametroFactu.moveColumn(this.jTableDatosParametroFactu.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosParametroFactu.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosParametroFactu.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosParametroFactu,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosParametroFactu.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosParametroFactu.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosParametroFactu.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosParametroFactu.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosParametroFactu.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=parametrofactuLogic.getParametroFactus().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=parametrofactus.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosParametroFactu.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosParametroFactu.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosParametroFactu();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoParametroFactu=false;
					
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
				if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormParametroFactu==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroFactu.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.parametrofactu.getsType().equals("DUPLICADO")
				   || this.parametrofactu.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoParametroFactu=true;
				
				} else {
					this.isEsNuevoParametroFactu=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					if(this.parametrofactu.getId()>=0 && !this.parametrofactu.getIsNew()) {						
						this.isEsNuevoParametroFactu=false;
						
					} else {
						this.isEsNuevoParametroFactu=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoParametroFactu(esRelaciones);						
				
				this.seleccionarParametroFactu(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.parametrofactu.getId()<0) {
					this.isEsNuevoParametroFactu=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarParametroFactu(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarParametroFactu(evt,rowIndex);
				}	
				
				if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ParametroFactu: " + this.dDif); 
					}
				}								
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarParametroFactu(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.parametrofactu)) {
					if(this.parametrofactu.getId()>0) {
						this.parametrofactu.setIsDeleted(true);
						
						this.parametrofactusEliminados.add(this.parametrofactu);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametrofactuLogic.getParametroFactus().remove(this.parametrofactu);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametrofactus.remove(this.parametrofactu);				
					}
					
					
					((ParametroFactuModel) this.jTableDatosParametroFactu.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroFactu(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarParametroFactu(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoParametroFactu) {
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroFactu.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroFactu.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioParametroFactu(this.parametrofactu);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.parametrofactuConstantesFunciones.cargarid_empresaParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_empresaParametroFactu) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.parametrofactu.getid_empresa());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(parametrofactu.getEmpresa()!=null) {
							this.empresasForeignKey.add(parametrofactu.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.parametrofactu.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.parametrofactuConstantesFunciones.cargarid_sucursalParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_sucursalParametroFactu) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.parametrofactu.getid_sucursal());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(parametrofactu.getSucursal()!=null) {
							this.sucursalsForeignKey.add(parametrofactu.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.parametrofactu.getid_sucursal(),false,"Formulario");

					//CuentaContableFactu
					if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_factuParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_cuenta_contable_factuParametroFactu) {
						//this.cargarCombosCuentaContableFactusForeignKeyLista(" where id="+this.parametrofactu.getid_cuenta_contable_factu());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.cuentacontablefactusForeignKey=new ArrayList<CuentaContable>();

						if(parametrofactu.getCuentaContableFactu()!=null) {
							this.cuentacontablefactusForeignKey.add(parametrofactu.getCuentaContableFactu());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableFactu();
						this.cargarCombosFrameCuentaContableFactusForeignKey("Todos");
					}
					this.setActualCuentaContableFactuForeignKey(this.parametrofactu.getid_cuenta_contable_factu(),false,"Formulario");

					//CuentaContableFinan
					if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_finanParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_cuenta_contable_finanParametroFactu) {
						//this.cargarCombosCuentaContableFinansForeignKeyLista(" where id="+this.parametrofactu.getid_cuenta_contable_finan());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.cuentacontablefinansForeignKey=new ArrayList<CuentaContable>();

						if(parametrofactu.getCuentaContableFinan()!=null) {
							this.cuentacontablefinansForeignKey.add(parametrofactu.getCuentaContableFinan());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableFinan();
						this.cargarCombosFrameCuentaContableFinansForeignKey("Todos");
					}
					this.setActualCuentaContableFinanForeignKey(this.parametrofactu.getid_cuenta_contable_finan(),false,"Formulario");

					//CuentaContableOtro
					if(!this.parametrofactuConstantesFunciones.cargarid_cuenta_contable_otroParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_cuenta_contable_otroParametroFactu) {
						//this.cargarCombosCuentaContableOtrosForeignKeyLista(" where id="+this.parametrofactu.getid_cuenta_contable_otro());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.cuentacontableotrosForeignKey=new ArrayList<CuentaContable>();

						if(parametrofactu.getCuentaContableOtro()!=null) {
							this.cuentacontableotrosForeignKey.add(parametrofactu.getCuentaContableOtro());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableOtro();
						this.cargarCombosFrameCuentaContableOtrosForeignKey("Todos");
					}
					this.setActualCuentaContableOtroForeignKey(this.parametrofactu.getid_cuenta_contable_otro(),false,"Formulario");

					//FormatoProforma
					if(!this.parametrofactuConstantesFunciones.cargarid_formato_proformaParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_formato_proformaParametroFactu) {
						//this.cargarCombosFormatoProformasForeignKeyLista(" where id="+this.parametrofactu.getid_formato_proforma());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.formatoproformasForeignKey=new ArrayList<Formato>();

						if(parametrofactu.getFormatoProforma()!=null) {
							this.formatoproformasForeignKey.add(parametrofactu.getFormatoProforma());
						}

						this.addItemDefectoCombosForeignKeyFormatoProforma();
						this.cargarCombosFrameFormatoProformasForeignKey("Todos");
					}
					this.setActualFormatoProformaForeignKey(this.parametrofactu.getid_formato_proforma(),false,"Formulario");

					//FormatoPedido
					if(!this.parametrofactuConstantesFunciones.cargarid_formato_pedidoParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_formato_pedidoParametroFactu) {
						//this.cargarCombosFormatoPedidosForeignKeyLista(" where id="+this.parametrofactu.getid_formato_pedido());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.formatopedidosForeignKey=new ArrayList<Formato>();

						if(parametrofactu.getFormatoPedido()!=null) {
							this.formatopedidosForeignKey.add(parametrofactu.getFormatoPedido());
						}

						this.addItemDefectoCombosForeignKeyFormatoPedido();
						this.cargarCombosFrameFormatoPedidosForeignKey("Todos");
					}
					this.setActualFormatoPedidoForeignKey(this.parametrofactu.getid_formato_pedido(),false,"Formulario");

					//FormatoFactura
					if(!this.parametrofactuConstantesFunciones.cargarid_formato_facturaParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_formato_facturaParametroFactu) {
						//this.cargarCombosFormatoFacturasForeignKeyLista(" where id="+this.parametrofactu.getid_formato_factura());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.formatofacturasForeignKey=new ArrayList<Formato>();

						if(parametrofactu.getFormatoFactura()!=null) {
							this.formatofacturasForeignKey.add(parametrofactu.getFormatoFactura());
						}

						this.addItemDefectoCombosForeignKeyFormatoFactura();
						this.cargarCombosFrameFormatoFacturasForeignKey("Todos");
					}
					this.setActualFormatoFacturaForeignKey(this.parametrofactu.getid_formato_factura(),false,"Formulario");

					//FormatoNotaCredito
					if(!this.parametrofactuConstantesFunciones.cargarid_formato_nota_creditoParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_formato_nota_creditoParametroFactu) {
						//this.cargarCombosFormatoNotaCreditosForeignKeyLista(" where id="+this.parametrofactu.getid_formato_nota_credito());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.formatonotacreditosForeignKey=new ArrayList<Formato>();

						if(parametrofactu.getFormatoNotaCredito()!=null) {
							this.formatonotacreditosForeignKey.add(parametrofactu.getFormatoNotaCredito());
						}

						this.addItemDefectoCombosForeignKeyFormatoNotaCredito();
						this.cargarCombosFrameFormatoNotaCreditosForeignKey("Todos");
					}
					this.setActualFormatoNotaCreditoForeignKey(this.parametrofactu.getid_formato_nota_credito(),false,"Formulario");

					//FormatoInventario
					if(!this.parametrofactuConstantesFunciones.cargarid_formato_inventarioParametroFactu || this.parametrofactuConstantesFunciones.event_dependid_formato_inventarioParametroFactu) {
						//this.cargarCombosFormatoInventariosForeignKeyLista(" where id="+this.parametrofactu.getid_formato_inventario());
									//this.inicializarActualizarBindingParametroFactu(false,false);
						this.formatoinventariosForeignKey=new ArrayList<Formato>();

						if(parametrofactu.getFormatoInventario()!=null) {
							this.formatoinventariosForeignKey.add(parametrofactu.getFormatoInventario());
						}

						this.addItemDefectoCombosForeignKeyFormatoInventario();
						this.cargarCombosFrameFormatoInventariosForeignKey("Todos");
					}
					this.setActualFormatoInventarioForeignKey(this.parametrofactu.getid_formato_inventario(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesParametroFactu("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesParametroFactu(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroFactu() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroFactu(ParametroFactu parametrofactu) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoParametroFactu(parametrofactu,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroFactu(ParametroFactu parametrofactu,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioParametroFactu(parametrofactu);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyParametroFactu(parametrofactu,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyParametroFactu(parametrofactu);
	}
	
	public void setVariablesObjetoActualToFormularioParametroFactu(ParametroFactu parametrofactu) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setText(parametrofactu.getId().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setText(parametrofactu.getsecuencial_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setText(parametrofactu.getsecuancial_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setText(parametrofactu.getsecuencial_factura());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setText(parametrofactu.getsecuencial_nota_credito());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setText(parametrofactu.getitem_proforma().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setText(parametrofactu.getitem_pedido().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setText(parametrofactu.getitem_factura().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setText(parametrofactu.getitem_nota_credito().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setText(parametrofactu.getitem_inventario().toString());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setSelected(parametrofactu.getcon_detalle_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setSelected(parametrofactu.getcon_detalle_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setSelected(parametrofactu.getcon_detalle_factura());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setSelected(parametrofactu.getcon_detalle_nota_credito());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ParametroFactu parametrofactuLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,parametrofactuLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ParametroFactu parametrofactuLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				parametrofactuLocal=this.parametrofactu;
			} else {
				parametrofactuLocal=this.parametrofactuAnterior;
			}
		}
		
		if(this.permiteMantenimiento(parametrofactuLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoParametroFactu(parametrofactuLocal,true);
					
					if(parametrofactuSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(parametrofactuLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(parametrofactuLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoParametroFactu(ParametroFactu parametrofactu,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroFactu(parametrofactu,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(parametrofactu);
	}
	
	public void setVariablesFormularioToObjetoActualParametroFactu(ParametroFactu parametrofactu,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroFactu(parametrofactu,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualParametroFactu(ParametroFactu parametrofactu,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.getText()==null || this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.getText()=="" || this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.getText()=="Id") {
				this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setText("0");
			}

			if(conColumnasBase) {parametrofactu.setId(Long.parseLong(this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelIdParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setsecuencial_proforma(this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_proformaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setsecuancial_pedido(this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuancial_pedidoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setsecuencial_factura(this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_facturaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setsecuencial_nota_credito(this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelsecuencial_nota_creditoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setitem_proforma(Integer.parseInt(this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_proformaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setitem_pedido(Integer.parseInt(this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_pedidoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setitem_factura(Integer.parseInt(this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_facturaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setitem_nota_credito(Integer.parseInt(this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_nota_creditoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setitem_inventario(Integer.parseInt(this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelitem_inventarioParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setcon_detalle_proforma(this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_proformaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setcon_detalle_pedido(this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_pedidoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setcon_detalle_factura(this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_facturaParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrofactu.setcon_detalle_nota_credito(this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroFactu.jLabelcon_detalle_nota_creditoParametroFactu,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroFactu(ParametroFactu parametrofactuBean,ParametroFactu parametrofactu,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && parametrofactuBean.getid_cuenta_contable_factu()!=null && !parametrofactuBean.getid_cuenta_contable_factu().equals(-1L))) {parametrofactu.setid_cuenta_contable_factu(parametrofactuBean.getid_cuenta_contable_factu());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_cuenta_contable_finan()!=null && !parametrofactuBean.getid_cuenta_contable_finan().equals(-1L))) {parametrofactu.setid_cuenta_contable_finan(parametrofactuBean.getid_cuenta_contable_finan());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_cuenta_contable_otro()!=null && !parametrofactuBean.getid_cuenta_contable_otro().equals(-1L))) {parametrofactu.setid_cuenta_contable_otro(parametrofactuBean.getid_cuenta_contable_otro());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_formato_proforma()!=null && !parametrofactuBean.getid_formato_proforma().equals(-1L))) {parametrofactu.setid_formato_proforma(parametrofactuBean.getid_formato_proforma());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_formato_pedido()!=null && !parametrofactuBean.getid_formato_pedido().equals(-1L))) {parametrofactu.setid_formato_pedido(parametrofactuBean.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_formato_factura()!=null && !parametrofactuBean.getid_formato_factura().equals(-1L))) {parametrofactu.setid_formato_factura(parametrofactuBean.getid_formato_factura());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_formato_nota_credito()!=null && !parametrofactuBean.getid_formato_nota_credito().equals(-1L))) {parametrofactu.setid_formato_nota_credito(parametrofactuBean.getid_formato_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuBean.getid_formato_inventario()!=null && !parametrofactuBean.getid_formato_inventario().equals(-1L))) {parametrofactu.setid_formato_inventario(parametrofactuBean.getid_formato_inventario());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosParametroFactu(ParametroFactu parametrofactuOrigen,ParametroFactu parametrofactu,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametrofactuOrigen.getId()!=null && !parametrofactuOrigen.getId().equals(0L))) {parametrofactu.setId(parametrofactuOrigen.getId());}}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_cuenta_contable_factu()!=null && !parametrofactuOrigen.getid_cuenta_contable_factu().equals(-1L))) {parametrofactu.setid_cuenta_contable_factu(parametrofactuOrigen.getid_cuenta_contable_factu());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_cuenta_contable_finan()!=null && !parametrofactuOrigen.getid_cuenta_contable_finan().equals(-1L))) {parametrofactu.setid_cuenta_contable_finan(parametrofactuOrigen.getid_cuenta_contable_finan());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_cuenta_contable_otro()!=null && !parametrofactuOrigen.getid_cuenta_contable_otro().equals(-1L))) {parametrofactu.setid_cuenta_contable_otro(parametrofactuOrigen.getid_cuenta_contable_otro());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_formato_proforma()!=null && !parametrofactuOrigen.getid_formato_proforma().equals(-1L))) {parametrofactu.setid_formato_proforma(parametrofactuOrigen.getid_formato_proforma());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_formato_pedido()!=null && !parametrofactuOrigen.getid_formato_pedido().equals(-1L))) {parametrofactu.setid_formato_pedido(parametrofactuOrigen.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_formato_factura()!=null && !parametrofactuOrigen.getid_formato_factura().equals(-1L))) {parametrofactu.setid_formato_factura(parametrofactuOrigen.getid_formato_factura());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_formato_nota_credito()!=null && !parametrofactuOrigen.getid_formato_nota_credito().equals(-1L))) {parametrofactu.setid_formato_nota_credito(parametrofactuOrigen.getid_formato_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getid_formato_inventario()!=null && !parametrofactuOrigen.getid_formato_inventario().equals(-1L))) {parametrofactu.setid_formato_inventario(parametrofactuOrigen.getid_formato_inventario());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getsecuencial_proforma()!=null && !parametrofactuOrigen.getsecuencial_proforma().equals(""))) {parametrofactu.setsecuencial_proforma(parametrofactuOrigen.getsecuencial_proforma());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getsecuancial_pedido()!=null && !parametrofactuOrigen.getsecuancial_pedido().equals(""))) {parametrofactu.setsecuancial_pedido(parametrofactuOrigen.getsecuancial_pedido());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getsecuencial_factura()!=null && !parametrofactuOrigen.getsecuencial_factura().equals(""))) {parametrofactu.setsecuencial_factura(parametrofactuOrigen.getsecuencial_factura());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getsecuencial_nota_credito()!=null && !parametrofactuOrigen.getsecuencial_nota_credito().equals(""))) {parametrofactu.setsecuencial_nota_credito(parametrofactuOrigen.getsecuencial_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getitem_proforma()!=null && !parametrofactuOrigen.getitem_proforma().equals(0))) {parametrofactu.setitem_proforma(parametrofactuOrigen.getitem_proforma());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getitem_pedido()!=null && !parametrofactuOrigen.getitem_pedido().equals(0))) {parametrofactu.setitem_pedido(parametrofactuOrigen.getitem_pedido());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getitem_factura()!=null && !parametrofactuOrigen.getitem_factura().equals(0))) {parametrofactu.setitem_factura(parametrofactuOrigen.getitem_factura());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getitem_nota_credito()!=null && !parametrofactuOrigen.getitem_nota_credito().equals(0))) {parametrofactu.setitem_nota_credito(parametrofactuOrigen.getitem_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getitem_inventario()!=null && !parametrofactuOrigen.getitem_inventario().equals(0))) {parametrofactu.setitem_inventario(parametrofactuOrigen.getitem_inventario());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getcon_detalle_proforma()!=null && !parametrofactuOrigen.getcon_detalle_proforma().equals(false))) {parametrofactu.setcon_detalle_proforma(parametrofactuOrigen.getcon_detalle_proforma());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getcon_detalle_pedido()!=null && !parametrofactuOrigen.getcon_detalle_pedido().equals(false))) {parametrofactu.setcon_detalle_pedido(parametrofactuOrigen.getcon_detalle_pedido());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getcon_detalle_factura()!=null && !parametrofactuOrigen.getcon_detalle_factura().equals(false))) {parametrofactu.setcon_detalle_factura(parametrofactuOrigen.getcon_detalle_factura());}
			if(conDefault || (!conDefault && parametrofactuOrigen.getcon_detalle_nota_credito()!=null && !parametrofactuOrigen.getcon_detalle_nota_credito().equals(false))) {parametrofactu.setcon_detalle_nota_credito(parametrofactuOrigen.getcon_detalle_nota_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroFactu(ParametroFactu parametrofactu) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setText(parametrofactu.getId().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setText(parametrofactu.getsecuencial_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setText(parametrofactu.getsecuancial_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setText(parametrofactu.getsecuencial_factura());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setText(parametrofactu.getsecuencial_nota_credito());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setText(parametrofactu.getitem_proforma().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setText(parametrofactu.getitem_pedido().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setText(parametrofactu.getitem_factura().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setText(parametrofactu.getitem_nota_credito().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setText(parametrofactu.getitem_inventario().toString());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setSelected(parametrofactu.getcon_detalle_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setSelected(parametrofactu.getcon_detalle_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setSelected(parametrofactu.getcon_detalle_factura());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setSelected(parametrofactu.getcon_detalle_nota_credito());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroFactu(ParametroFactuBean parametrofactuBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setText(parametrofactuBean.getId().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setText(parametrofactuBean.getsecuencial_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setText(parametrofactuBean.getsecuancial_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setText(parametrofactuBean.getsecuencial_factura());
			this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setText(parametrofactuBean.getsecuencial_nota_credito());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setText(parametrofactuBean.getitem_proforma().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setText(parametrofactuBean.getitem_pedido().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setText(parametrofactuBean.getitem_factura().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setText(parametrofactuBean.getitem_nota_credito().toString());
			this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setText(parametrofactuBean.getitem_inventario().toString());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setSelected(parametrofactuBean.getcon_detalle_proforma());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setSelected(parametrofactuBean.getcon_detalle_pedido());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setSelected(parametrofactuBean.getcon_detalle_factura());
			this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setSelected(parametrofactuBean.getcon_detalle_nota_credito());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanParametroFactu(ParametroFactuParameterReturnGeneral parametrofactuReturnGeneral,ParametroFactuBean parametrofactuBean,Boolean conDefault) throws Exception { 
		try {
			ParametroFactu parametrofactuLocal=new ParametroFactu();
			
			parametrofactuLocal=parametrofactuReturnGeneral.getParametroFactu();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametrofactuLocal.getId()!=null && !parametrofactuLocal.getId().equals(0L))) {parametrofactuBean.setId(parametrofactuLocal.getId());}}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_cuenta_contable_factu()!=null && !parametrofactuLocal.getid_cuenta_contable_factu().equals(-1L))) {parametrofactuBean.setid_cuenta_contable_factu(parametrofactuLocal.getid_cuenta_contable_factu());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_cuenta_contable_finan()!=null && !parametrofactuLocal.getid_cuenta_contable_finan().equals(-1L))) {parametrofactuBean.setid_cuenta_contable_finan(parametrofactuLocal.getid_cuenta_contable_finan());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_cuenta_contable_otro()!=null && !parametrofactuLocal.getid_cuenta_contable_otro().equals(-1L))) {parametrofactuBean.setid_cuenta_contable_otro(parametrofactuLocal.getid_cuenta_contable_otro());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_formato_proforma()!=null && !parametrofactuLocal.getid_formato_proforma().equals(-1L))) {parametrofactuBean.setid_formato_proforma(parametrofactuLocal.getid_formato_proforma());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_formato_pedido()!=null && !parametrofactuLocal.getid_formato_pedido().equals(-1L))) {parametrofactuBean.setid_formato_pedido(parametrofactuLocal.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_formato_factura()!=null && !parametrofactuLocal.getid_formato_factura().equals(-1L))) {parametrofactuBean.setid_formato_factura(parametrofactuLocal.getid_formato_factura());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_formato_nota_credito()!=null && !parametrofactuLocal.getid_formato_nota_credito().equals(-1L))) {parametrofactuBean.setid_formato_nota_credito(parametrofactuLocal.getid_formato_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuLocal.getid_formato_inventario()!=null && !parametrofactuLocal.getid_formato_inventario().equals(-1L))) {parametrofactuBean.setid_formato_inventario(parametrofactuLocal.getid_formato_inventario());}
			if(conDefault || (!conDefault && parametrofactuLocal.getsecuencial_proforma()!=null && !parametrofactuLocal.getsecuencial_proforma().equals(""))) {parametrofactuBean.setsecuencial_proforma(parametrofactuLocal.getsecuencial_proforma());}
			if(conDefault || (!conDefault && parametrofactuLocal.getsecuancial_pedido()!=null && !parametrofactuLocal.getsecuancial_pedido().equals(""))) {parametrofactuBean.setsecuancial_pedido(parametrofactuLocal.getsecuancial_pedido());}
			if(conDefault || (!conDefault && parametrofactuLocal.getsecuencial_factura()!=null && !parametrofactuLocal.getsecuencial_factura().equals(""))) {parametrofactuBean.setsecuencial_factura(parametrofactuLocal.getsecuencial_factura());}
			if(conDefault || (!conDefault && parametrofactuLocal.getsecuencial_nota_credito()!=null && !parametrofactuLocal.getsecuencial_nota_credito().equals(""))) {parametrofactuBean.setsecuencial_nota_credito(parametrofactuLocal.getsecuencial_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuLocal.getitem_proforma()!=null && !parametrofactuLocal.getitem_proforma().equals(0))) {parametrofactuBean.setitem_proforma(parametrofactuLocal.getitem_proforma());}
			if(conDefault || (!conDefault && parametrofactuLocal.getitem_pedido()!=null && !parametrofactuLocal.getitem_pedido().equals(0))) {parametrofactuBean.setitem_pedido(parametrofactuLocal.getitem_pedido());}
			if(conDefault || (!conDefault && parametrofactuLocal.getitem_factura()!=null && !parametrofactuLocal.getitem_factura().equals(0))) {parametrofactuBean.setitem_factura(parametrofactuLocal.getitem_factura());}
			if(conDefault || (!conDefault && parametrofactuLocal.getitem_nota_credito()!=null && !parametrofactuLocal.getitem_nota_credito().equals(0))) {parametrofactuBean.setitem_nota_credito(parametrofactuLocal.getitem_nota_credito());}
			if(conDefault || (!conDefault && parametrofactuLocal.getitem_inventario()!=null && !parametrofactuLocal.getitem_inventario().equals(0))) {parametrofactuBean.setitem_inventario(parametrofactuLocal.getitem_inventario());}
			if(conDefault || (!conDefault && parametrofactuLocal.getcon_detalle_proforma()!=null && !parametrofactuLocal.getcon_detalle_proforma().equals(false))) {parametrofactuBean.setcon_detalle_proforma(parametrofactuLocal.getcon_detalle_proforma());}
			if(conDefault || (!conDefault && parametrofactuLocal.getcon_detalle_pedido()!=null && !parametrofactuLocal.getcon_detalle_pedido().equals(false))) {parametrofactuBean.setcon_detalle_pedido(parametrofactuLocal.getcon_detalle_pedido());}
			if(conDefault || (!conDefault && parametrofactuLocal.getcon_detalle_factura()!=null && !parametrofactuLocal.getcon_detalle_factura().equals(false))) {parametrofactuBean.setcon_detalle_factura(parametrofactuLocal.getcon_detalle_factura());}
			if(conDefault || (!conDefault && parametrofactuLocal.getcon_detalle_nota_credito()!=null && !parametrofactuLocal.getcon_detalle_nota_credito().equals(false))) {parametrofactuBean.setcon_detalle_nota_credito(parametrofactuLocal.getcon_detalle_nota_credito());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxParametroFactuGenerico(Long idParametroFactuSeleccionado,JComboBox jComboBoxParametroFactu,List<ParametroFactu> parametrofactusLocal)throws Exception {
		try {
			ParametroFactu  parametrofactuTemp=null;

			for(ParametroFactu parametrofactuAux:parametrofactusLocal) {
				if(parametrofactuAux.getId()!=null && parametrofactuAux.getId().equals(idParametroFactuSeleccionado)) {
					parametrofactuTemp=parametrofactuAux;
					break;
				}
			}

			jComboBoxParametroFactu.setSelectedItem(parametrofactuTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxParametroFactuGenerico(JComboBox jComboBoxParametroFactu,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxParametroFactu.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroFactu.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxParametroFactu.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroFactu.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroFactu.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxParametroFactu.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroFactu.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxParametroFactu.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxParametroFactu.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxParametroFactu.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrofactu=(ParametroFactu) parametrofactuLogic.getParametroFactus().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametrofactu =(ParametroFactu) parametrofactus.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableFactu")) {
			//sDescripcion=this.getActualCuentaContableFactuForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getcuentacontablefactu_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableFactuForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getcuentacontablefactu_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableFinan")) {
			//sDescripcion=this.getActualCuentaContableFinanForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getcuentacontablefinan_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableFinanForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getcuentacontablefinan_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableOtro")) {
			//sDescripcion=this.getActualCuentaContableOtroForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getcuentacontableotro_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableOtroForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getcuentacontableotro_descripcion();
			}
		}

		if(sTipo.equals("FormatoProforma")) {
			//sDescripcion=this.getActualFormatoProformaForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getformatoproforma_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoProformaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getformatoproforma_descripcion();
			}
		}

		if(sTipo.equals("FormatoPedido")) {
			//sDescripcion=this.getActualFormatoPedidoForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getformatopedido_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoPedidoForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getformatopedido_descripcion();
			}
		}

		if(sTipo.equals("FormatoFactura")) {
			//sDescripcion=this.getActualFormatoFacturaForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getformatofactura_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getformatofactura_descripcion();
			}
		}

		if(sTipo.equals("FormatoNotaCredito")) {
			//sDescripcion=this.getActualFormatoNotaCreditoForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getformatonotacredito_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoNotaCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getformatonotacredito_descripcion();
			}
		}

		if(sTipo.equals("FormatoInventario")) {
			//sDescripcion=this.getActualFormatoInventarioForeignKeyDescripcion((Long)value);
			if(!parametrofactu.getIsNew() && !parametrofactu.getIsChanged() && !parametrofactu.getIsDeleted()) {
				sDescripcion=parametrofactu.getformatoinventario_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=parametrofactu.getformatoinventario_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ParametroFactu parametrofactuRow=new ParametroFactu();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrofactuRow=(ParametroFactu) parametrofactuLogic.getParametroFactus().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametrofactuRow=(ParametroFactu) parametrofactus.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualParametroFactu(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu));			
			this.jButtonDuplicarParametroFactu.setVisible((this.isVisibilidadCeldaDuplicarParametroFactu && this.isPermisoDuplicarParametroFactu));			
			this.jButtonCopiarParametroFactu.setVisible((this.isVisibilidadCeldaCopiarParametroFactu && this.isPermisoCopiarParametroFactu));
			this.jButtonVerFormParametroFactu.setVisible((this.isVisibilidadCeldaVerFormParametroFactu && this.isPermisoVerFormParametroFactu));
			
			this.jButtonAbrirOrderByParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));			
			
			this.jButtonNuevoRelacionesParametroFactu.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroFactu && this.isPermisoNuevoParametroFactu));			
			this.jButtonNuevoGuardarCambiosParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu && this.isPermisoGuardarCambiosParametroFactu));
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonModificarParametroFactu.setVisible((this.isVisibilidadCeldaModificarParametroFactu && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.setVisible((this.isVisibilidadCeldaActualizarParametroFactu && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.setVisible((this.isVisibilidadCeldaEliminarParametroFactu && this.isPermisoEliminarParametroFactu));
			this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.setVisible(this.isVisibilidadCeldaCancelarParametroFactu);							
			this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.setVisible((this.isVisibilidadCeldaGuardarParametroFactu && this.isPermisoGuardarCambiosParametroFactu));			
			
			}
						
			this.jButtonGuardarCambiosTablaParametroFactu.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroFactu && this.isPermisoGuardarCambiosParametroFactu));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu));						
			this.jButtonDuplicarToolBarParametroFactu.setVisible((this.isVisibilidadCeldaDuplicarParametroFactu && this.isPermisoDuplicarParametroFactu));						
			this.jButtonCopiarToolBarParametroFactu.setVisible((this.isVisibilidadCeldaCopiarParametroFactu && this.isPermisoCopiarParametroFactu));			
			this.jButtonVerFormToolBarParametroFactu.setVisible((this.isVisibilidadCeldaVerFormParametroFactu && this.isPermisoVerFormParametroFactu));			
			this.jButtonAbrirOrderByToolBarParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));
			this.jButtonNuevoRelacionesToolBarParametroFactu.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroFactu && this.isPermisoNuevoParametroFactu));			
			this.jButtonNuevoGuardarCambiosToolBarParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu && this.isPermisoGuardarCambiosParametroFactu));			
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonModificarToolBarParametroFactu.setVisible((this.isVisibilidadCeldaModificarParametroFactu && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarToolBarParametroFactu.setVisible((this.isVisibilidadCeldaActualizarParametroFactu  && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarToolBarParametroFactu.setVisible((this.isVisibilidadCeldaEliminarParametroFactu && this.isPermisoEliminarParametroFactu));
			this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarToolBarParametroFactu.setVisible(this.isVisibilidadCeldaCancelarParametroFactu);				
			this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosToolBarParametroFactu.setVisible((this.isVisibilidadCeldaGuardarParametroFactu && this.isPermisoGuardarCambiosParametroFactu));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarParametroFactu.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroFactu && this.isPermisoGuardarCambiosParametroFactu));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu));			
			this.jMenuItemDuplicarParametroFactu.setVisible((this.isVisibilidadCeldaDuplicarParametroFactu && this.isPermisoDuplicarParametroFactu));			
			this.jMenuItemCopiarParametroFactu.setVisible((this.isVisibilidadCeldaCopiarParametroFactu && this.isPermisoCopiarParametroFactu));			
			this.jMenuItemVerFormParametroFactu.setVisible((this.isVisibilidadCeldaVerFormParametroFactu && this.isPermisoVerFormParametroFactu));			
			this.jMenuItemAbrirOrderByParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));			
			//this.jMenuItemMostrarOcultarParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));
			this.jMenuItemDetalleAbrirOrderByParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));			
			//this.jMenuItemDetalleMostrarOcultarParametroFactu.setVisible((this.isVisibilidadCeldaOrdenParametroFactu && this.isPermisoOrdenParametroFactu));			
			this.jMenuItemNuevoRelacionesParametroFactu.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroFactu && this.isPermisoNuevoParametroFactu));			
			this.jMenuItemNuevoGuardarCambiosParametroFactu.setVisible((this.isVisibilidadCeldaNuevoParametroFactu && this.isPermisoNuevoParametroFactu && this.isPermisoGuardarCambiosParametroFactu));									
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemModificarParametroFactu.setVisible((this.isVisibilidadCeldaModificarParametroFactu && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemActualizarParametroFactu.setVisible((this.isVisibilidadCeldaActualizarParametroFactu && this.isPermisoActualizarParametroFactu));	
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemEliminarParametroFactu.setVisible((this.isVisibilidadCeldaEliminarParametroFactu && this.isPermisoEliminarParametroFactu));
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemCancelarParametroFactu.setVisible(this.isVisibilidadCeldaCancelarParametroFactu);				
			}
			
			this.jMenuItemGuardarCambiosParametroFactu.setVisible((this.isVisibilidadCeldaGuardarParametroFactu && this.isPermisoGuardarCambiosParametroFactu));						
			this.jMenuItemGuardarCambiosTablaParametroFactu.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroFactu && this.isPermisoGuardarCambiosParametroFactu));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoParametroFactu=this.jButtonNuevoParametroFactu.isVisible();
			this.isVisibilidadCeldaDuplicarParametroFactu=this.jButtonDuplicarParametroFactu.isVisible();
			this.isVisibilidadCeldaCopiarParametroFactu=this.jButtonCopiarParametroFactu.isVisible();
			this.isVisibilidadCeldaVerFormParametroFactu=this.jButtonVerFormParametroFactu.isVisible();
			
			this.isVisibilidadCeldaOrdenParametroFactu=this.jButtonAbrirOrderByParametroFactu.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=this.jButtonNuevoRelacionesParametroFactu.isVisible();
			this.isVisibilidadCeldaModificarParametroFactu=this.jButtonModificarParametroFactu.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.isVisibilidadCeldaActualizarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.isVisible();
			this.isVisibilidadCeldaEliminarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.isVisible();
			this.isVisibilidadCeldaCancelarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.isVisible();
			this.isVisibilidadCeldaGuardarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=this.jButtonGuardarCambiosTablaParametroFactu.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoParametroFactu=this.jButtonNuevoToolBarParametroFactu.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=this.jButtonNuevoRelacionesToolBarParametroFactu.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.isVisibilidadCeldaModificarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonModificarToolBarParametroFactu.isVisible();
			this.isVisibilidadCeldaActualizarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarToolBarParametroFactu.isVisible();
			this.isVisibilidadCeldaEliminarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarToolBarParametroFactu.isVisible();
			this.isVisibilidadCeldaCancelarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarToolBarParametroFactu.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroFactu=this.jButtonGuardarCambiosToolBarParametroFactu.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=this.jButtonGuardarCambiosTablaToolBarParametroFactu.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoParametroFactu=this.jMenuItemNuevoParametroFactu.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=this.jMenuItemNuevoRelacionesParametroFactu.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.isVisibilidadCeldaModificarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jMenuItemModificarParametroFactu.isVisible();
			this.isVisibilidadCeldaActualizarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jMenuItemActualizarParametroFactu.isVisible();
			this.isVisibilidadCeldaEliminarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jMenuItemEliminarParametroFactu.isVisible();
			this.isVisibilidadCeldaCancelarParametroFactu=this.jInternalFrameDetalleFormParametroFactu.jMenuItemCancelarParametroFactu.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroFactu=this.jMenuItemGuardarCambiosParametroFactu.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=this.jMenuItemGuardarCambiosTablaParametroFactu.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesParametroFactu(Boolean esInicializar) {
		if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {			
			if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
				//if(this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesParametroFactu();
			}
			
			this.inicializarActualizarBindingBotonesManualParametroFactu(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualParametroFactu() {
		this.jButtonNuevoParametroFactu.setVisible(this.isPermisoNuevoParametroFactu);			
		this.jButtonDuplicarParametroFactu.setVisible(this.isPermisoDuplicarParametroFactu);			
		this.jButtonCopiarParametroFactu.setVisible(this.isPermisoCopiarParametroFactu);			
		this.jButtonVerFormParametroFactu.setVisible(this.isPermisoVerFormParametroFactu);			
		
		this.jButtonAbrirOrderByParametroFactu.setVisible(this.isPermisoOrdenParametroFactu);					
		
		this.jButtonNuevoRelacionesParametroFactu.setVisible(this.isPermisoNuevoParametroFactu);			
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonModificarParametroFactu.setVisible(this.isPermisoActualizarParametroFactu);	
			this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.setVisible(this.isPermisoActualizarParametroFactu);	
			this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.setVisible(this.isPermisoEliminarParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.setVisible(this.isVisibilidadCeldaCancelarParametroFactu);						
			this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.setVisible(this.isPermisoGuardarCambiosParametroFactu);							
		}
		
		this.jButtonGuardarCambiosTablaParametroFactu.setVisible(this.isPermisoActualizarParametroFactu);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroFactu() {
		this.jInternalFrameDetalleFormParametroFactu.jButtonModificarParametroFactu.setVisible(this.isPermisoActualizarParametroFactu);	
		this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.setVisible(this.isPermisoActualizarParametroFactu);	
		this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.setVisible(this.isPermisoEliminarParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.setVisible(this.isVisibilidadCeldaCancelarParametroFactu);							
		this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.setVisible((this.isVisibilidadCeldaGuardarParametroFactu && this.isPermisoGuardarCambiosParametroFactu));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosParametroFactu() {
		if(ParametroFactuJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualParametroFactu();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesParametroFactu() {
	}
	
	public void jTableDatosParametroFactuListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarParametroFactu(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.parametrofactu.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebParametroFactu(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderParametroFactu.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.parametrofactu.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebParametroFactu(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderParametroFactu.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.parametrofactu.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_factuParametroFactuActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablefactuBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablefactuBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablefactuBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableFactu";

			if(!this.sFinalQueryGeneral_cuentacontablefactu.equals("")) {
				this.cuentacontablefactuBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablefactu);
				this.cuentacontablefactuBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablefactuBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablefactuBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablefactuBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableFactu.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablefactuBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroFactu=null;
			TitledBorder titledBordercuentacontablefactu=null;

			if(!this.jScrollPanelDatosParametroFactu.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				titledBordercuentacontablefactu=(TitledBorder)this.cuentacontablefactuBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefactu.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_factuParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablefactu=true;

			idTienePermisocuentacontablefactu=this.tienePermisosUsuarioEnPaginaWebParametroFactu(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablefactu) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.cuentacontablefactuBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablefactuBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablefactuBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_cuenta_contable_factu()!=null) {
					this.cuentacontablefactuBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablefactuBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_cuenta_contable_factu());
					this.cuentacontablefactuBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablefactuBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablefactuBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablefactuBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBordercuentacontablefactu=(TitledBorder)this.cuentacontablefactuBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefactu.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_factuParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_cuenta_contable_factu()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_factu = "+this.parametrofactu.getid_cuenta_contable_factu().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_finanParametroFactuActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablefinanBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablefinanBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablefinanBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableFinan";

			if(!this.sFinalQueryGeneral_cuentacontablefinan.equals("")) {
				this.cuentacontablefinanBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablefinan);
				this.cuentacontablefinanBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablefinanBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablefinanBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablefinanBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableFinan.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablefinanBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroFactu=null;
			TitledBorder titledBordercuentacontablefinan=null;

			if(!this.jScrollPanelDatosParametroFactu.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				titledBordercuentacontablefinan=(TitledBorder)this.cuentacontablefinanBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefinan.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_finanParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablefinan=true;

			idTienePermisocuentacontablefinan=this.tienePermisosUsuarioEnPaginaWebParametroFactu(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablefinan) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.cuentacontablefinanBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablefinanBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablefinanBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_cuenta_contable_finan()!=null) {
					this.cuentacontablefinanBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablefinanBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_cuenta_contable_finan());
					this.cuentacontablefinanBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablefinanBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablefinanBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablefinanBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBordercuentacontablefinan=(TitledBorder)this.cuentacontablefinanBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefinan.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_finanParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_cuenta_contable_finan()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_finan = "+this.parametrofactu.getid_cuenta_contable_finan().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_otroParametroFactuActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableotroBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableotroBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableotroBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableOtro";

			if(!this.sFinalQueryGeneral_cuentacontableotro.equals("")) {
				this.cuentacontableotroBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableotro);
				this.cuentacontableotroBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableotroBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableotroBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableotroBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableOtro.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableotroBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroFactu=null;
			TitledBorder titledBordercuentacontableotro=null;

			if(!this.jScrollPanelDatosParametroFactu.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				titledBordercuentacontableotro=(TitledBorder)this.cuentacontableotroBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableotro.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_otroParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableotro=true;

			idTienePermisocuentacontableotro=this.tienePermisosUsuarioEnPaginaWebParametroFactu(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableotro) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.cuentacontableotroBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableotroBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableotroBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_cuenta_contable_otro()!=null) {
					this.cuentacontableotroBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableotroBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_cuenta_contable_otro());
					this.cuentacontableotroBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableotroBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableotroBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableotroBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBordercuentacontableotro=(TitledBorder)this.cuentacontableotroBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableotro.setTitle(titledBorderParametroFactu.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_otroParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_cuenta_contable_otro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_otro = "+this.parametrofactu.getid_cuenta_contable_otro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_proformaParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoproforma=true;

			idTienePermisoformatoproforma=this.tienePermisosUsuarioEnPaginaWebParametroFactu(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoproforma) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.formatoproformaBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoproformaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoproformaBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_formato_proforma()!=null) {
					this.formatoproformaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoproformaBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_formato_proforma());
					this.formatoproformaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoproformaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoproformaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoproformaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderformatoproforma=(TitledBorder)this.formatoproformaBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoproforma.setTitle(titledBorderParametroFactu.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_proformaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_formato_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_proforma = "+this.parametrofactu.getid_formato_proforma().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_pedidoParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatopedido=true;

			idTienePermisoformatopedido=this.tienePermisosUsuarioEnPaginaWebParametroFactu(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatopedido) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.formatopedidoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatopedidoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatopedidoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_formato_pedido()!=null) {
					this.formatopedidoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatopedidoBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_formato_pedido());
					this.formatopedidoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatopedidoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatopedidoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatopedidoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderformatopedido=(TitledBorder)this.formatopedidoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatopedido.setTitle(titledBorderParametroFactu.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_pedidoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_formato_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_pedido = "+this.parametrofactu.getid_formato_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_facturaParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatofactura=true;

			idTienePermisoformatofactura=this.tienePermisosUsuarioEnPaginaWebParametroFactu(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.formatofacturaBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatofacturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatofacturaBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_formato_factura()!=null) {
					this.formatofacturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatofacturaBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_formato_factura());
					this.formatofacturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatofacturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatofacturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatofacturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderformatofactura=(TitledBorder)this.formatofacturaBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatofactura.setTitle(titledBorderParametroFactu.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_facturaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_formato_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_factura = "+this.parametrofactu.getid_formato_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_nota_creditoParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatonotacredito=true;

			idTienePermisoformatonotacredito=this.tienePermisosUsuarioEnPaginaWebParametroFactu(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatonotacredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.formatonotacreditoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatonotacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatonotacreditoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_formato_nota_credito()!=null) {
					this.formatonotacreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatonotacreditoBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_formato_nota_credito());
					this.formatonotacreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatonotacreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatonotacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatonotacreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderformatonotacredito=(TitledBorder)this.formatonotacreditoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatonotacredito.setTitle(titledBorderParametroFactu.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_nota_creditoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_formato_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_nota_credito = "+this.parametrofactu.getid_formato_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_inventarioParametroFactuUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoinventario=true;

			idTienePermisoformatoinventario=this.tienePermisosUsuarioEnPaginaWebParametroFactu(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroFactu.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroFactu.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);

				this.formatoinventarioBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoinventarioBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametrofactuLogic.getConnexion());

				if(this.parametrofactu.getid_formato_inventario()!=null) {
					this.formatoinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoinventarioBeanSwingJInternalFrame.setIdActual(this.parametrofactu.getid_formato_inventario());
					this.formatoinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroFactu=(TitledBorder)this.jScrollPanelDatosParametroFactu.getBorder();
				TitledBorder titledBorderformatoinventario=(TitledBorder)this.formatoinventarioBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoinventario.setTitle(titledBorderParametroFactu.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_inventarioParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getid_formato_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_inventario = "+this.parametrofactu.getid_formato_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_proformaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getsecuencial_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_proforma like '%"+this.parametrofactu.getsecuencial_proforma()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuancial_pedidoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getsecuancial_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuancial_pedido like '%"+this.parametrofactu.getsecuancial_pedido()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_facturaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getsecuencial_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_factura like '%"+this.parametrofactu.getsecuencial_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_nota_creditoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getsecuencial_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_nota_credito like '%"+this.parametrofactu.getsecuencial_nota_credito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonitem_proformaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getitem_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where item_proforma = "+this.parametrofactu.getitem_proforma().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonitem_pedidoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getitem_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where item_pedido = "+this.parametrofactu.getitem_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonitem_facturaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getitem_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where item_factura = "+this.parametrofactu.getitem_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonitem_nota_creditoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getitem_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where item_nota_credito = "+this.parametrofactu.getitem_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonitem_inventarioParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getitem_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where item_inventario = "+this.parametrofactu.getitem_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_detalle_proformaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getcon_detalle_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_detalle_proforma = "+this.parametrofactu.getcon_detalle_proforma().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_detalle_pedidoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getcon_detalle_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_detalle_pedido = "+this.parametrofactu.getcon_detalle_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_detalle_facturaParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getcon_detalle_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_detalle_factura = "+this.parametrofactu.getcon_detalle_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_detalle_nota_creditoParametroFactuBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.getparametrofactu(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrofactu==null) {
						this.parametrofactu = new ParametroFactu();
					}

					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);
				}

				if(this.parametrofactu.getcon_detalle_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_detalle_nota_credito = "+this.parametrofactu.getcon_detalle_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroFactu(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCuentaContableFactuParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdCuentaContableFactu();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableFinanParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdCuentaContableFinan();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableOtroParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdCuentaContableOtro();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdEmpresa();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoFacturaParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdFormatoFactura();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoInventarioParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdFormatoInventario();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoNotaCreditoParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdFormatoNotaCredito();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoPedoParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdFormatoPedo();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoProformaParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdFormatoProforma();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalParametroFactuActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroFactu(false,false);

			this.getParametroFactusFK_IdSucursal();

			this.inicializarActualizarBindingParametroFactu(false);

			//if(ParametroFactuBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroFactu(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrofactuLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameParametroFactu() {
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
			this.jInternalFrameDetalleFormParametroFactu.setVisible(false);	    			
			this.jInternalFrameDetalleFormParametroFactu.dispose();
			this.jInternalFrameDetalleFormParametroFactu=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
			this.jInternalFrameReporteDinamicoParametroFactu.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoParametroFactu.dispose();
			this.jInternalFrameReporteDinamicoParametroFactu=null;
		}
		
		if(this.jInternalFrameImportacionParametroFactu!=null) {
			this.jInternalFrameImportacionParametroFactu.setVisible(false);	    			
			this.jInternalFrameImportacionParametroFactu.dispose();
			this.jInternalFrameImportacionParametroFactu=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessParametroFactu();
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			
			if(sTipo.equals("NuevoParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarParametroFactu")) {
				jButtonDuplicarParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarParametroFactu")) {
				jButtonCopiarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("VerFormParametroFactu")) {
				jButtonVerFormParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarParametroFactu")) {
				jButtonDuplicarParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarParametroFactu")) {
				jButtonDuplicarParametroFactuActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarParametroFactu")) {
				jButtonModificarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarParametroFactu")) {
				jButtonModificarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarParametroFactu")) {
				jButtonModificarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("ActualizarParametroFactu")) {
				jButtonActualizarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarParametroFactu")) {
				jButtonActualizarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarParametroFactu")) {
				jButtonActualizarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("EliminarParametroFactu")) {
				jButtonEliminarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarParametroFactu")) {
				jButtonEliminarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarParametroFactu")) {
				jButtonEliminarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("CancelarParametroFactu")) {
				jButtonCancelarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarParametroFactu")) {
				jButtonCancelarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarParametroFactu")) {
				jButtonCancelarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("CerrarParametroFactu")) {
				jButtonCerrarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarParametroFactu")) {
				jButtonCerrarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarParametroFactu")) {
				jButtonCerrarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarParametroFactu")) {
				jButtonMostrarOcultarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarParametroFactu")) {
				jButtonCancelarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarParametroFactu")) {
				jButtonCopiarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarParametroFactu")) {
				jButtonVerFormParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarParametroFactu")) {
				jButtonCopiarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormParametroFactu")) {
				jButtonVerFormParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionParametroFactu")) {
				jButtonRecargarInformacionParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarParametroFactu")) {
				jButtonRecargarInformacionParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionParametroFactu")) {
				jButtonRecargarInformacionParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresParametroFactu")) {
				jButtonAnterioresParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarParametroFactu")) {
				jButtonAnterioresParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreParametroFactu")) {
				jButtonAnterioresParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("SiguientesParametroFactu")) {
				jButtonSiguientesParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarParametroFactu")) {
				jButtonSiguientesParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesParametroFactu")) {
				jButtonSiguientesParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByParametroFactu") || sTipo.equals("MenuItemDetalleAbrirOrderByParametroFactu")) {
				jButtonAbrirOrderByParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarParametroFactu") || sTipo.equals("MenuItemDetalleMostrarOcultarParametroFactu")) {
				jButtonMostrarOcultarParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosParametroFactu")) {
				jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarParametroFactu")) {
				jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosParametroFactu")) {
				jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoParametroFactu")) {
				jButtonCerrarReporteDinamicoParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoParametroFactu")) {
				jButtonGenerarReporteDinamicoParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoParametroFactu")) {
				
				jButtonGenerarExcelReporteDinamicoParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionParametroFactu")) {
				jButtonCerrarImportacionParametroFactuActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionParametroFactu")) {
				
				jButtonGenerarImportacionParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionParametroFactu")) {
				
				jButtonAbrirImportacionParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesParametroFactu")) {
				jComboBoxTiposAccionesParametroFactuActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesParametroFactu")) {
				jComboBoxTiposRelacionesParametroFactuActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioParametroFactu")) {
				jComboBoxTiposAccionesParametroFactuActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarParametroFactu")) {
				
				jComboBoxTiposSeleccionarParametroFactuActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralParametroFactu")) {
				jTextFieldValorCampoGeneralParametroFactuActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByParametroFactu")) {
				jButtonAbrirOrderByParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarParametroFactu")) {
				jButtonAbrirOrderByParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByParametroFactu")) {
				jButtonCerrarOrderByParametroFactuActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroFactuBusqueda")) {
				this.jButtonidParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroFactuUpdate")) {
				this.jButtonid_empresaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroFactuBusqueda")) {
				this.jButtonid_empresaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalParametroFactuUpdate")) {
				this.jButtonid_sucursalParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalParametroFactuBusqueda")) {
				this.jButtonid_sucursalParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactu")) {
				this.jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableFactu("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_factuParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_factuParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactu")) {
				this.jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableFinan("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_finanParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_finanParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactu")) {
				this.jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableOtro("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_otroParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_otroParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_proformaParametroFactuUpdate")) {
				this.jButtonid_formato_proformaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_proformaParametroFactuBusqueda")) {
				this.jButtonid_formato_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroFactuUpdate")) {
				this.jButtonid_formato_pedidoParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroFactuBusqueda")) {
				this.jButtonid_formato_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_facturaParametroFactuUpdate")) {
				this.jButtonid_formato_facturaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_facturaParametroFactuBusqueda")) {
				this.jButtonid_formato_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_nota_creditoParametroFactuUpdate")) {
				this.jButtonid_formato_nota_creditoParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_nota_creditoParametroFactuBusqueda")) {
				this.jButtonid_formato_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_inventarioParametroFactuUpdate")) {
				this.jButtonid_formato_inventarioParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_inventarioParametroFactuBusqueda")) {
				this.jButtonid_formato_inventarioParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_proformaParametroFactuBusqueda")) {
				this.jButtonsecuencial_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuancial_pedidoParametroFactuBusqueda")) {
				this.jButtonsecuancial_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_facturaParametroFactuBusqueda")) {
				this.jButtonsecuencial_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_creditoParametroFactuBusqueda")) {
				this.jButtonsecuencial_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_proformaParametroFactuBusqueda")) {
				this.jButtonitem_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_pedidoParametroFactuBusqueda")) {
				this.jButtonitem_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_facturaParametroFactuBusqueda")) {
				this.jButtonitem_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_nota_creditoParametroFactuBusqueda")) {
				this.jButtonitem_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_inventarioParametroFactuBusqueda")) {
				this.jButtonitem_inventarioParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_proformaParametroFactuBusqueda")) {
				this.jButtoncon_detalle_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_pedidoParametroFactuBusqueda")) {
				this.jButtoncon_detalle_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_facturaParametroFactuBusqueda")) {
				this.jButtoncon_detalle_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_nota_creditoParametroFactuBusqueda")) {
				this.jButtoncon_detalle_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactu")) {
				this.jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactu")) {
				this.jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactu")) {
				this.jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdCuentaContableFactuParametroFactu")) {
				this.jButtonFK_IdCuentaContableFactuParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableFinanParametroFactu")) {
				this.jButtonFK_IdCuentaContableFinanParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableOtroParametroFactu")) {
				this.jButtonFK_IdCuentaContableOtroParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoFacturaParametroFactu")) {
				this.jButtonFK_IdFormatoFacturaParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoInventarioParametroFactu")) {
				this.jButtonFK_IdFormatoInventarioParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoNotaCreditoParametroFactu")) {
				this.jButtonFK_IdFormatoNotaCreditoParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoPedoParametroFactu")) {
				this.jButtonFK_IdFormatoPedoParametroFactuActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoProformaParametroFactu")) {
				this.jButtonFK_IdFormatoProformaParametroFactuActionPerformed(evt);
			}
			
			;
			
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessParametroFactu();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ParametroFactu parametrofactuLocal=null;
			
			if(!this.getEsControlTabla()) {
				parametrofactuLocal=this.parametrofactu;
			} else {
				parametrofactuLocal=this.parametrofactuAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
							
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
								
						
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
								
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
							
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
								
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosParametroFactu")) {
					jCheckBoxSeleccionarTodosParametroFactuItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosParametroFactu")) {
					jCheckBoxSeleccionadosParametroFactuItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarParametroFactu")) {
					
				}
				
				


				
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
												
				
				


				
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroFactuActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrofactu);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrofactu);
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroFactu.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroFactu.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroFactuActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrofactuAnterior =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarParametroFactu")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosParametroFactuListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosParametroFactu.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.parametrofactu =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.parametrofactu =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.parametrofactu);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarParametroFactu")) {
				
				}
				
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarParametroFactu")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosParametroFactu.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarParametroFactu")) {
			
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessParametroFactu();
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			if(sTipo.equals("NuevoParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarParametroFactu")) {
				jButtonDuplicarParametroFactuActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarParametroFactu")) {
				jButtonCopiarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormParametroFactu")) {
				jButtonVerFormParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesParametroFactu")) {
				jButtonNuevoParametroFactuActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarParametroFactu")) {
				jButtonModificarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarParametroFactu")) {
				jButtonActualizarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarParametroFactu")) {
				jButtonEliminarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarParametroFactu")) {
				jButtonCancelarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarParametroFactu")) {
				jButtonCerrarParametroFactuActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosParametroFactu")) {
				jButtonGuardarCambiosParametroFactuActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosParametroFactu")) {
				jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByParametroFactu")) {
				jButtonAbrirOrderByParametroFactuActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionParametroFactu")) {
				jButtonRecargarInformacionParametroFactuActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresParametroFactu")) {
				jButtonAnterioresParametroFactuActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesParametroFactu")) {
				jButtonSiguientesParametroFactuActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroFactuBusqueda")) {
				this.jButtonidParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroFactuUpdate")) {
				this.jButtonid_empresaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroFactuBusqueda")) {
				this.jButtonid_empresaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalParametroFactuUpdate")) {
				this.jButtonid_sucursalParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalParametroFactuBusqueda")) {
				this.jButtonid_sucursalParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactu")) {
				this.jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableFactu("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_factuParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_factuParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_factuParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactu")) {
				this.jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableFinan("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_finanParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_finanParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_finanParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactu")) {
				this.jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuArbol")) {
				this.abrirFrameTreeCuentaContableOtro("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuUpdate")) {
				this.jButtonid_cuenta_contable_otroParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_otroParametroFactuBusqueda")) {
				this.jButtonid_cuenta_contable_otroParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_proformaParametroFactuUpdate")) {
				this.jButtonid_formato_proformaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_proformaParametroFactuBusqueda")) {
				this.jButtonid_formato_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroFactuUpdate")) {
				this.jButtonid_formato_pedidoParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroFactuBusqueda")) {
				this.jButtonid_formato_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_facturaParametroFactuUpdate")) {
				this.jButtonid_formato_facturaParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_facturaParametroFactuBusqueda")) {
				this.jButtonid_formato_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_nota_creditoParametroFactuUpdate")) {
				this.jButtonid_formato_nota_creditoParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_nota_creditoParametroFactuBusqueda")) {
				this.jButtonid_formato_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_inventarioParametroFactuUpdate")) {
				this.jButtonid_formato_inventarioParametroFactuUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_inventarioParametroFactuBusqueda")) {
				this.jButtonid_formato_inventarioParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_proformaParametroFactuBusqueda")) {
				this.jButtonsecuencial_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuancial_pedidoParametroFactuBusqueda")) {
				this.jButtonsecuancial_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_facturaParametroFactuBusqueda")) {
				this.jButtonsecuencial_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_creditoParametroFactuBusqueda")) {
				this.jButtonsecuencial_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_proformaParametroFactuBusqueda")) {
				this.jButtonitem_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_pedidoParametroFactuBusqueda")) {
				this.jButtonitem_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_facturaParametroFactuBusqueda")) {
				this.jButtonitem_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_nota_creditoParametroFactuBusqueda")) {
				this.jButtonitem_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("item_inventarioParametroFactuBusqueda")) {
				this.jButtonitem_inventarioParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_proformaParametroFactuBusqueda")) {
				this.jButtoncon_detalle_proformaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_pedidoParametroFactuBusqueda")) {
				this.jButtoncon_detalle_pedidoParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_facturaParametroFactuBusqueda")) {
				this.jButtoncon_detalle_facturaParametroFactuBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalle_nota_creditoParametroFactuBusqueda")) {
				this.jButtoncon_detalle_nota_creditoParametroFactuBusquedaActionPerformed(evt);
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessParametroFactu();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameParametroFactu")) {
				closingInternalFrameParametroFactu();
				
			} else if(sTipo.equals("jButtonCancelarParametroFactu")) {
				JInternalFrameBase jInternalFrameDetalleFormParametroFactu = (JInternalFrameBase)evt.getSource();
	            	
	            ParametroFactuBeanSwingJInternalFrame jInternalFrameParent=(ParametroFactuBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroFactu.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarParametroFactuActionPerformed(null);
			}
			
			ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametrofactu,new Object(),this.parametrofactuParameterGeneral,this.parametrofactuReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormParametroFactu(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormParametroFactu(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormParametroFactu(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.parametrofactu)) {
			if(!esControlTabla) {
				if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);			
				}
				
				if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualParametroFactu(this.parametrofactu,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametrofactuReturnGeneral=parametrofactuLogic.procesarEventosParametroFactusWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrofactuLogic.getParametroFactus(),this.parametrofactu,this.parametrofactuParameterGeneral,this.isEsNuevoParametroFactu,classes);//this.parametrofactuLogic.getParametroFactu()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanParametroFactu(this.parametrofactuReturnGeneral,this.parametrofactuBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanParametroFactu(classes,this.parametrofactuReturnGeneral,this.parametrofactuBean,false);
					}
						
					if(this.parametrofactuReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu());	
					}
						
					if(this.parametrofactuReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu(),classes);//this.parametrofactuBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioParametroFactu(this.parametrofactu,classes);//this.parametrofactuBean);									
				}
			
				if(ParametroFactuJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualParametroFactu(this.parametrofactu,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroFactu(this.parametrofactu);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.parametrofactuAnterior!=null) {
						this.parametrofactu=this.parametrofactuAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametrofactuReturnGeneral=parametrofactuLogic.procesarEventosParametroFactusWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrofactuLogic.getParametroFactus(),this.parametrofactu,this.parametrofactuParameterGeneral,this.isEsNuevoParametroFactu,classes);//this.parametrofactuLogic.getParametroFactu()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametrofactuSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametrofactuSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.parametrofactuReturnGeneral.getParametroFactu(),parametrofactuLogic.getParametroFactus());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.parametrofactuReturnGeneral.getParametroFactu(),this.parametrofactus);
				}
				//ARCHITECTURE
				
				//this.jTableDatosParametroFactu.repaint();
				
				//((AbstractTableModel) this.jTableDatosParametroFactu.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosParametroFactu();
			}
		}
	}
	
	public void actualizarVisualTableDatosParametroFactu() throws Exception {
		
		ParametroFactuModel parametrofactuModel=(ParametroFactuModel)this.jTableDatosParametroFactu.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrofactuModel.parametrofactus=this.parametrofactuLogic.getParametroFactus();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			parametrofactuModel.parametrofactus=this.parametrofactus;
		}
		
		
		((ParametroFactuModel) this.jTableDatosParametroFactu.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaParametroFactu() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getparametrofactuAnterior(),this.parametrofactuLogic.getParametroFactus());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getparametrofactuAnterior(),this.parametrofactus);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosParametroFactu();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioParametroFactu(ParametroFactu parametrofactu,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrofactu,new Object(),generalEntityParameterGeneral,this.parametrofactuReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.parametrofactuSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ParametroFactuConstantesFunciones.getClassesRelationshipsOfParametroFactu(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ParametroFactuConstantesFunciones.getClassesRelationshipsFromStringsOfParametroFactu(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormParametroFactu(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ParametroFactuBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrofactu,new Object(),generalEntityParameterGeneral,this.parametrofactuReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioParametroFactu(ParametroFactuBean parametrofactuBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanParametroFactu(ArrayList<Classe> classes,ParametroFactuReturnGeneral parametrofactuReturnGeneral,ParametroFactuBean parametrofactuBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualParametroFactu(ParametroFactu parametrofactu,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.parametrofactu)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormParametroFactu = new ParametroFactuDetalleFormJInternalFrame(jDesktopPane,this.parametrofactuSessionBean.getConGuardarRelaciones(),this.parametrofactuSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.setVisible(false);
		this.jInternalFrameDetalleFormParametroFactu.setSelected(false);						
		
		this.jInternalFrameDetalleFormParametroFactu.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormParametroFactu.parametrofactuLogic=this.parametrofactuLogic;
		
		this.cargarCombosFrameForeignKeyParametroFactu("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroFactu();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroFactu();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyParametroFactu("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyParametroFactu();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormParametroFactu.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroFactu"));
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonModificarParametroFactu.addActionListener(new ButtonActionListener(this,"ModificarParametroFactu"));

		
		this.jInternalFrameDetalleFormParametroFactu.jButtonModificarToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroFactu"));
					
		this.jInternalFrameDetalleFormParametroFactu.jMenuItemModificarParametroFactu.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroFactu"));		
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.addActionListener (new ButtonActionListener(this,"ActualizarParametroFactu"));
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroFactu"));
						
		this.jInternalFrameDetalleFormParametroFactu.jMenuItemActualizarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroFactu"));		
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.addActionListener (new ButtonActionListener(this,"EliminarParametroFactu"));
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroFactu"));
								
		this.jInternalFrameDetalleFormParametroFactu.jMenuItemEliminarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroFactu"));		
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.addActionListener (new ButtonActionListener(this,"CancelarParametroFactu"));
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroFactu"));
					
		this.jInternalFrameDetalleFormParametroFactu.jMenuItemCancelarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroFactu"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jMenuItemDetalleCerrarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroFactu"));		
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroFactu"));
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroFactu"));
		
		
		
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroFactu"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonidParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"idParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_factuParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactu"));
		//jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFactu("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_finanParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactu"));
		//jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFinan("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_otroParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactu"));
		//jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableOtro("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuancial_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuancial_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_nota_creditoParametroFactuBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroFactu"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameParametroFactu"));
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroFactu"));
		}
		
		this.jTableDatosParametroFactu.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarParametroFactu"));
		
		this.jTableDatosParametroFactu.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarParametroFactu"));
		
		this.jButtonNuevoParametroFactu.addActionListener(new ButtonActionListener(this,"NuevoParametroFactu"));
		
		this.jButtonDuplicarParametroFactu.addActionListener(new ButtonActionListener(this,"DuplicarParametroFactu"));
		
		this.jButtonCopiarParametroFactu.addActionListener(new ButtonActionListener(this,"CopiarParametroFactu"));
		
		this.jButtonVerFormParametroFactu.addActionListener(new ButtonActionListener(this,"VerFormParametroFactu"));
		
		
		this.jButtonNuevoToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"NuevoToolBarParametroFactu"));
			
		this.jButtonDuplicarToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"DuplicarToolBarParametroFactu"));
			
		this.jMenuItemNuevoParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemNuevoParametroFactu"));
			
		this.jMenuItemDuplicarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarParametroFactu"));		
		
		
		this.jButtonNuevoRelacionesParametroFactu.addActionListener (new ButtonActionListener(this,"NuevoRelacionesParametroFactu"));
		
		
		this.jButtonNuevoRelacionesToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarParametroFactu"));
			
		this.jMenuItemNuevoRelacionesParametroFactu.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesParametroFactu"));		
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonModificarParametroFactu.addActionListener(new ButtonActionListener(this,"ModificarParametroFactu"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonModificarToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroFactu"));
			
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemModificarParametroFactu.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroFactu"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarParametroFactu.addActionListener (new ButtonActionListener(this,"ActualizarParametroFactu"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonActualizarToolBarParametroFactu.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroFactu"));
				
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemActualizarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroFactu"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarParametroFactu.addActionListener (new ButtonActionListener(this,"EliminarParametroFactu"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonEliminarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroFactu"));
						
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemEliminarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroFactu"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarParametroFactu.addActionListener (new ButtonActionListener(this,"CancelarParametroFactu"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonCancelarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroFactu"));
			
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemCancelarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroFactu"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarParametroFactu"));		
		
		
		this.jButtonCerrarParametroFactu.addActionListener (new ButtonActionListener(this,"CerrarParametroFactu"));
		
		
		this.jButtonCerrarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"CerrarToolBarParametroFactu"));
			
		this.jMenuItemCerrarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemCerrarParametroFactu"));
			
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jMenuItemDetalleCerrarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroFactu"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosParametroFactu"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroFactu"));
		}
		
		this.jButtonCopiarToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"CopiarToolBarParametroFactu"));
			
		this.jButtonVerFormToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"VerFormToolBarParametroFactu"));
		
		this.jMenuItemGuardarCambiosParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosParametroFactu"));
			
		this.jMenuItemCopiarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemCopiarParametroFactu"));		
		
		this.jMenuItemVerFormParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemVerFormParametroFactu"));		
		
		
		this.jButtonGuardarCambiosTablaParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroFactu"));
		
		
		this.jButtonGuardarCambiosTablaToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarParametroFactu"));
			
		this.jMenuItemGuardarCambiosTablaParametroFactu.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroFactu"));		
		
		
		
		this.jButtonRecargarInformacionParametroFactu.addActionListener (new ButtonActionListener(this,"RecargarInformacionParametroFactu"));
					
		this.jButtonRecargarInformacionToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarParametroFactu"));
		
		this.jMenuItemRecargarInformacionParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionParametroFactu"));		
		
		
		
		this.jButtonAnterioresParametroFactu.addActionListener (new ButtonActionListener(this,"AnterioresParametroFactu"));
		
		
		this.jButtonAnterioresToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"AnterioresToolBarParametroFactu"));
		
		this.jMenuItemAnterioresParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresParametroFactu"));		
		
		
		this.jButtonSiguientesParametroFactu.addActionListener (new ButtonActionListener(this,"SiguientesParametroFactu"));
		
		
		this.jButtonSiguientesToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"SiguientesToolBarParametroFactu"));
			
		this.jMenuItemSiguientesParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesParametroFactu"));
			
		this.jMenuItemAbrirOrderByParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByParametroFactu"));
			
		this.jMenuItemMostrarOcultarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarParametroFactu"));
			
		this.jMenuItemDetalleAbrirOrderByParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByParametroFactu"));
			
		this.jMenuItemDetalleMostarOcultarParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarParametroFactu"));		
		
		
		this.jButtonNuevoGuardarCambiosParametroFactu.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosParametroFactu"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarParametroFactu"));
			
		this.jMenuItemNuevoGuardarCambiosParametroFactu.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosParametroFactu"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosParametroFactu.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosParametroFactu"));

		this.jCheckBoxSeleccionadosParametroFactu.addItemListener(new CheckBoxItemListener(this,"SeleccionadosParametroFactu"));
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroFactu"));
		}
		
		
		this.jComboBoxTiposRelacionesParametroFactu.addActionListener (new ButtonActionListener(this,"TiposRelacionesParametroFactu"));
			
		this.jComboBoxTiposAccionesParametroFactu.addActionListener (new ButtonActionListener(this,"TiposAccionesParametroFactu"));
					
		this.jComboBoxTiposSeleccionarParametroFactu.addActionListener (new ButtonActionListener(this,"TiposSeleccionarParametroFactu"));
			
		this.jTextFieldValorCampoGeneralParametroFactu.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralParametroFactu"));		
		
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonidParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"idParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_factuParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactu"));
		//jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFactu("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_finanParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactu"));
		//jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFinan("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_otroParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactu"));
		//jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableOtro("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuancial_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuancial_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_nota_creditoParametroFactuBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCuentaContableFactuParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFactuParametroFactu"));

			this.jButtonBuscarFK_IdCuentaContableFactuid_cuenta_contable_factuParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactu"));

			this.jButtonFK_IdCuentaContableFinanParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFinanParametroFactu"));

			this.jButtonBuscarFK_IdCuentaContableFinanid_cuenta_contable_finanParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactu"));

			this.jButtonFK_IdCuentaContableOtroParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableOtroParametroFactu"));

			this.jButtonBuscarFK_IdCuentaContableOtroid_cuenta_contable_otroParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactu"));

			this.jButtonFK_IdFormatoFacturaParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoFacturaParametroFactu"));

			this.jButtonFK_IdFormatoInventarioParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoInventarioParametroFactu"));

			this.jButtonFK_IdFormatoNotaCreditoParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoNotaCreditoParametroFactu"));

			this.jButtonFK_IdFormatoPedoParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoPedoParametroFactu"));

			this.jButtonFK_IdFormatoProformaParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoProformaParametroFactu"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoParametroFactu!=null) {
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroFactu"));
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroFactu"));
				this.jInternalFrameReporteDinamicoParametroFactu.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroFactu"));
			}
			
			//this.jButtonCerrarReporteDinamicoParametroFactu.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroFactu"));				
			//this.jButtonGenerarReporteDinamicoParametroFactu.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroFactu"));
			//this.jButtonGenerarExcelReporteDinamicoParametroFactu.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroFactu"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionParametroFactu!=null) {
				this.jInternalFrameImportacionParametroFactu.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroFactu"));
				this.jInternalFrameImportacionParametroFactu.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroFactu"));
				this.jInternalFrameImportacionParametroFactu.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroFactu"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByParametroFactu.addActionListener (new ButtonActionListener(this,"AbrirOrderByParametroFactu"));
			
			this.jButtonAbrirOrderByToolBarParametroFactu.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarParametroFactu"));			
			
			if(this.jInternalFrameOrderByParametroFactu!=null) {
				this.jInternalFrameOrderByParametroFactu.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroFactu"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormParametroFactu!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroFactu.jTabbedPaneRelacionesParametroFactu.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroFactu"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameParametroFactu();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormParametroFactu.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormParametroFactu = (JInternalFrameBase)event.getSource();
	            	
	            ParametroFactuBeanSwingJInternalFrame jInternalFrameParent=(ParametroFactuBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroFactu.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarParametroFactuActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosParametroFactu.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosParametroFactuListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosParametroFactu.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosParametroFactu.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoParametroFactu";
		inputMap = this.jButtonNuevoParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroFactuActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroFactuActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesParametroFactu";
		inputMap = this.jButtonNuevoRelacionesParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroFactuActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarParametroFactu";
		inputMap = this.jButtonModificarParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarParametroFactu";
		inputMap = this.jButtonActualizarParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarParametroFactu";
		inputMap = this.jButtonEliminarParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarParametroFactu";
		inputMap = this.jButtonCancelarParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarParametroFactu";
		inputMap = this.jButtonCerrarParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosParametroFactu";
		inputMap = this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormParametroFactu.jButtonGuardarCambiosParametroFactu.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosParametroFactuActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosParametroFactu.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosParametroFactuItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesParametroFactu.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesParametroFactuActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarParametroFactu.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarParametroFactuActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralParametroFactu.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralParametroFactuActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonidParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"idParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_empresaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_sucursalParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_factuParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_factuParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactu"));
		//jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFactu("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_finanParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_finanParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactu"));
		//jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFinan("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactuBusqueda"));
		//jButtonid_cuenta_contable_otroParametroFactu.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_otroParametroFactuActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactu"));
		//jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableOtro("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_proformaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_facturaParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_nota_creditoParametroFactuBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuUpdate.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonid_formato_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuancial_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuancial_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonsecuencial_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_nota_creditoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtonitem_inventarioParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"item_inventarioParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_proformaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_proformaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_pedidoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_pedidoParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_facturaParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_facturaParametroFactuBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroFactu.jButtoncon_detalle_nota_creditoParametroFactuBusqueda.addActionListener(new ButtonActionListener(this,"con_detalle_nota_creditoParametroFactuBusqueda"));
		
		
		this.jButtonFK_IdCuentaContableFactuParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFactuParametroFactu"));

		this.jButtonBuscarFK_IdCuentaContableFactuid_cuenta_contable_factuParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_factuParametroFactu"));

		this.jButtonFK_IdCuentaContableFinanParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFinanParametroFactu"));

		this.jButtonBuscarFK_IdCuentaContableFinanid_cuenta_contable_finanParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_finanParametroFactu"));

		this.jButtonFK_IdCuentaContableOtroParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableOtroParametroFactu"));

		this.jButtonBuscarFK_IdCuentaContableOtroid_cuenta_contable_otroParametroFactu.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_otroParametroFactu"));

		this.jButtonFK_IdFormatoFacturaParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoFacturaParametroFactu"));

		this.jButtonFK_IdFormatoInventarioParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoInventarioParametroFactu"));

		this.jButtonFK_IdFormatoNotaCreditoParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoNotaCreditoParametroFactu"));

		this.jButtonFK_IdFormatoPedoParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoPedoParametroFactu"));

		this.jButtonFK_IdFormatoProformaParametroFactu.addActionListener(new ButtonActionListener(this,"FK_IdFormatoProformaParametroFactu"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionParametroFactu.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionParametroFactuActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarParametroFactuActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarParametroFactu.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosParametroFactu(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
					parametrofactuAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroFactu parametrofactuAux:parametrofactus) {
					parametrofactuAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosParametroFactuItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroFactu(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
						parametrofactuAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroFactu parametrofactuAux:parametrofactus) {
						parametrofactuAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
					
						if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA)) {
							existe=true;
							parametrofactuAux.setcon_detalle_proforma(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO)) {
							existe=true;
							parametrofactuAux.setcon_detalle_pedido(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA)) {
							existe=true;
							parametrofactuAux.setcon_detalle_factura(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO)) {
							existe=true;
							parametrofactuAux.setcon_detalle_nota_credito(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroFactu parametrofactuAux:parametrofactus) {
						
						if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA)) {
							existe=true;
							parametrofactuAux.setcon_detalle_proforma(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO)) {
							existe=true;
							parametrofactuAux.setcon_detalle_pedido(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA)) {
							existe=true;
							parametrofactuAux.setcon_detalle_factura(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO)) {
							existe=true;
							parametrofactuAux.setcon_detalle_nota_credito(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaParametroFactu(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroFactu.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroFactu.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosParametroFactuItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroFactu(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosParametroFactu.getSelectedRows();
			
			ParametroFactu parametrofactuLocal=new ParametroFactu();
			
			//this.seleccionarTodosParametroFactu(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrofactuLocal =(ParametroFactu) this.parametrofactuLogic.getParametroFactus().toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					parametrofactuLocal =(ParametroFactu) this.parametrofactus.toArray()[this.jTableDatosParametroFactu.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				parametrofactuLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
						parametrofactuAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroFactu parametrofactuAux:parametrofactus) {
						parametrofactuAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaParametroFactu(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroFactu.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroFactu.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroFactu,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualParametroFactuItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarParametroFactuParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralParametroFactuActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingParametroFactu(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralParametroFactu.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroFactu parametrofactuAux:this.parametrofactuLogic.getParametroFactus()) {
				
						if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA)) {
							existe=true;
							parametrofactuAux.setsecuencial_proforma(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO)) {
							existe=true;
							parametrofactuAux.setsecuancial_pedido(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
							existe=true;
							parametrofactuAux.setsecuencial_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO)) {
							existe=true;
							parametrofactuAux.setsecuencial_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA)) {
							existe=true;
							parametrofactuAux.setitem_proforma(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO)) {
							existe=true;
							parametrofactuAux.setitem_pedido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA)) {
							existe=true;
							parametrofactuAux.setitem_factura(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO)) {
							existe=true;
							parametrofactuAux.setitem_nota_credito(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO)) {
							existe=true;
							parametrofactuAux.setitem_inventario(Integer.parseInt(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroFactu parametrofactuAux:parametrofactus) {
					
						if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA)) {
							existe=true;
							parametrofactuAux.setsecuencial_proforma(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO)) {
							existe=true;
							parametrofactuAux.setsecuancial_pedido(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
							existe=true;
							parametrofactuAux.setsecuencial_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO)) {
							existe=true;
							parametrofactuAux.setsecuencial_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA)) {
							existe=true;
							parametrofactuAux.setitem_proforma(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO)) {
							existe=true;
							parametrofactuAux.setitem_pedido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA)) {
							existe=true;
							parametrofactuAux.setitem_factura(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO)) {
							existe=true;
							parametrofactuAux.setitem_nota_credito(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO)) {
							existe=true;
							parametrofactuAux.setitem_inventario(Integer.parseInt(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaParametroFactu(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesParametroFactuActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingParametroFactu(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioParametroFactu=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesParametroFactu.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteParametroFactu) {				
					conSplash=true;//false;										
					
					//this.startProcessParametroFactu(conSplash);
				
					this.generarReporteParametroFactusSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoParametroFactusSeleccionados();
				//this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroFactusSeleccionados(false);
				//this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroFactusSeleccionados(true);
				//this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroFactu();
				
				this.exportarParametroFactusSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionParametroFactus();
				//this.importarParametroFactus();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroFactu();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelParametroFactusSeleccionados();
				//this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Parametro Factu", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessParametroFactu();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoParametroFactu)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyParametroFactu(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
				}	
			} 			
			else if(ParametroFactuBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteParametroFactu) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessParametroFactu(conSplash);
					
						//this.actualizarParametrosGeneralParametroFactu();
						
						this.generarReporteProcesoAccionParametroFactusSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ParametroFactuBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Parametro FactuS SELECCIONADOS?", "MANTENIMIENTO DE Parametro Factu", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessParametroFactu();
				
						this.actualizarParametrosGeneralParametroFactu();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.parametrofactuReturnGeneral=parametrofactuLogic.procesarAccionParametroFactusWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.parametrofactuLogic.getParametroFactus(),this.parametrofactuParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarParametroFactuReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralParametroFactu();
					
					ParametroFactuBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarParametroFactuReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroFactu.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroFactu.jComboBoxTiposAccionesFormularioParametroFactu.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessParametroFactu(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesParametroFactuActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessParametroFactu();
			
			if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
			ParametroFactu parametrofactu=new ParametroFactu();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingParametroFactu(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesParametroFactu.getSelectedItem();
			
			
			
			
			parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
			//this.sTipoAccion;
			
			if(parametrofactusSeleccionados.size()==1) {
				for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
					parametrofactu=parametrofactuAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessParametroFactu();
			
      		//this.finishProcessParametroFactu(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarParametroFactuReturnGeneral() throws Exception {
		if(this.parametrofactuReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.parametrofactuReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.parametrofactuReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.parametrofactuReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.parametrofactuReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.parametrofactuReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingParametroFactu(false);
		}
		
		if(this.parametrofactuReturnGeneral.getConRetornoLista() || this.parametrofactuReturnGeneral.getConRetornoObjeto()) {
			if(this.parametrofactuReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametrofactuLogic.setParametroFactus(this.parametrofactuReturnGeneral.getParametroFactus());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.parametrofactuReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametrofactuLogic.setParametroFactu(this.parametrofactuReturnGeneral.getParametroFactu());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingParametroFactu(false);
		}
	}
	
	public void actualizarParametrosGeneralParametroFactu() throws Exception {
		
		
	}
	
	public ArrayList<ParametroFactu> getParametroFactusSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioParametroFactu) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ParametroFactu parametrofactuAux:parametrofactuLogic.getParametroFactus()) {
					if(parametrofactuAux.getIsSelected()) {
						parametrofactusSeleccionados.add(parametrofactuAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroFactu parametrofactuAux:this.parametrofactus) {
					if(parametrofactuAux.getIsSelected()) {
						parametrofactusSeleccionados.add(parametrofactuAux);				
					}
				}
			}
			
			if(parametrofactusSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						parametrofactusSeleccionados.addAll(this.parametrofactuLogic.getParametroFactus());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						parametrofactusSeleccionados.addAll(this.parametrofactus);				
					}
				}
			}
		} else {
			parametrofactusSeleccionados.add(this.parametrofactu);
		}
		
		return parametrofactusSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteParametroFactusSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalParametroFactusSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoParametroFactusSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroFactusSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroFactusSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Parametro Factu",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados);
		
	}	
	
	public void generarReporteNormalParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados);
	}		
	
	public void generarReporteProcesoAccionParametroFactusSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		
		this.abrirInicializarFrameReporteDinamicoParametroFactu();
		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoParametroFactu();
		
		
		//this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados ,parametrofactuImplementable,parametrofactuImplementableHome);
	}
	
	public void mostrarImportacionParametroFactus() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionParametroFactu();
		
		this.abrirFrameImportacionParametroFactu();		
		
			
		//this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados ,parametrofactuImplementable,parametrofactuImplementableHome);
	}
	
	public void importarParametroFactus() throws Exception {		
	
	}
	
	public void exportarParametroFactusSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelParametroFactusSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoParametroFactusSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlParametroFactusSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Parametro Factu",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarParametroFactu(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarParametroFactu(parametrofactuAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//parametrofactuAux.setsDetalleGeneralEntityReporte(parametrofactuAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarParametroFactu(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarParametroFactu(ParametroFactu parametrofactu,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=parametrofactu.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcuentacontablefactu_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcuentacontablefinan_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcuentacontableotro_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getformatoproforma_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getformatopedido_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getformatofactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getformatonotacredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getformatoinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getsecuencial_proforma();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getsecuancial_pedido();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getsecuencial_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getsecuencial_nota_credito();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getitem_proforma().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getitem_pedido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getitem_factura().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getitem_nota_credito().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getitem_inventario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcon_detalle_proforma().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcon_detalle_pedido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcon_detalle_factura().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrofactu.getcon_detalle_nota_credito().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ParametroFactus");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelParametroFactu(row);				
				iRow++;
			}				
			
			for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelParametroFactu(parametrofactuAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlParametroFactusSeleccionados() throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();		
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrofactu.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("parametrofactus");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("parametrofactu");
			//elementRoot.appendChild(element);
		
			for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
				element = document.createElement("parametrofactu");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlParametroFactu(parametrofactuAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Factu",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelParametroFactu(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelParametroFactu(ParametroFactu parametrofactu,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcuentacontablefactu_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcuentacontablefinan_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcuentacontableotro_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getformatoproforma_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getformatopedido_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getformatofactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getformatonotacredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getformatoinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getsecuencial_proforma());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getsecuancial_pedido());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getsecuencial_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getsecuencial_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getitem_proforma());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getitem_pedido());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getitem_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getitem_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getitem_inventario());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcon_detalle_proforma());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcon_detalle_pedido());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcon_detalle_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrofactu.getcon_detalle_nota_credito());				
	}
	
	public void setFilaDatosExportarXmlParametroFactu(ParametroFactu parametrofactu,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ParametroFactuConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(parametrofactu.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ParametroFactuConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(parametrofactu.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(parametrofactu.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(parametrofactu.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementcuentacontablefactu_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDCUENTACONTABLEFACTU);
		elementcuentacontablefactu_descripcion.appendChild(document.createTextNode(parametrofactu.getcuentacontablefactu_descripcion()));
		element.appendChild(elementcuentacontablefactu_descripcion);

		Element elementcuentacontablefinan_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDCUENTACONTABLEFINAN);
		elementcuentacontablefinan_descripcion.appendChild(document.createTextNode(parametrofactu.getcuentacontablefinan_descripcion()));
		element.appendChild(elementcuentacontablefinan_descripcion);

		Element elementcuentacontableotro_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDCUENTACONTABLEOTRO);
		elementcuentacontableotro_descripcion.appendChild(document.createTextNode(parametrofactu.getcuentacontableotro_descripcion()));
		element.appendChild(elementcuentacontableotro_descripcion);

		Element elementformatoproforma_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDFORMATOPROFORMA);
		elementformatoproforma_descripcion.appendChild(document.createTextNode(parametrofactu.getformatoproforma_descripcion()));
		element.appendChild(elementformatoproforma_descripcion);

		Element elementformatopedido_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDFORMATOPEDIDO);
		elementformatopedido_descripcion.appendChild(document.createTextNode(parametrofactu.getformatopedido_descripcion()));
		element.appendChild(elementformatopedido_descripcion);

		Element elementformatofactura_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDFORMATOFACTURA);
		elementformatofactura_descripcion.appendChild(document.createTextNode(parametrofactu.getformatofactura_descripcion()));
		element.appendChild(elementformatofactura_descripcion);

		Element elementformatonotacredito_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDFORMATONOTACREDITO);
		elementformatonotacredito_descripcion.appendChild(document.createTextNode(parametrofactu.getformatonotacredito_descripcion()));
		element.appendChild(elementformatonotacredito_descripcion);

		Element elementformatoinventario_descripcion = document.createElement(ParametroFactuConstantesFunciones.IDFORMATOINVENTARIO);
		elementformatoinventario_descripcion.appendChild(document.createTextNode(parametrofactu.getformatoinventario_descripcion()));
		element.appendChild(elementformatoinventario_descripcion);

		Element elementsecuencial_proforma = document.createElement(ParametroFactuConstantesFunciones.SECUENCIALPROFORMA);
		elementsecuencial_proforma.appendChild(document.createTextNode(parametrofactu.getsecuencial_proforma().trim()));
		element.appendChild(elementsecuencial_proforma);

		Element elementsecuancial_pedido = document.createElement(ParametroFactuConstantesFunciones.SECUANCIALPEDIDO);
		elementsecuancial_pedido.appendChild(document.createTextNode(parametrofactu.getsecuancial_pedido().trim()));
		element.appendChild(elementsecuancial_pedido);

		Element elementsecuencial_factura = document.createElement(ParametroFactuConstantesFunciones.SECUENCIALFACTURA);
		elementsecuencial_factura.appendChild(document.createTextNode(parametrofactu.getsecuencial_factura().trim()));
		element.appendChild(elementsecuencial_factura);

		Element elementsecuencial_nota_credito = document.createElement(ParametroFactuConstantesFunciones.SECUENCIALNOTACREDITO);
		elementsecuencial_nota_credito.appendChild(document.createTextNode(parametrofactu.getsecuencial_nota_credito().trim()));
		element.appendChild(elementsecuencial_nota_credito);

		Element elementitem_proforma = document.createElement(ParametroFactuConstantesFunciones.ITEMPROFORMA);
		elementitem_proforma.appendChild(document.createTextNode(parametrofactu.getitem_proforma().toString().trim()));
		element.appendChild(elementitem_proforma);

		Element elementitem_pedido = document.createElement(ParametroFactuConstantesFunciones.ITEMPEDIDO);
		elementitem_pedido.appendChild(document.createTextNode(parametrofactu.getitem_pedido().toString().trim()));
		element.appendChild(elementitem_pedido);

		Element elementitem_factura = document.createElement(ParametroFactuConstantesFunciones.ITEMFACTURA);
		elementitem_factura.appendChild(document.createTextNode(parametrofactu.getitem_factura().toString().trim()));
		element.appendChild(elementitem_factura);

		Element elementitem_nota_credito = document.createElement(ParametroFactuConstantesFunciones.ITEMNOTACREDITO);
		elementitem_nota_credito.appendChild(document.createTextNode(parametrofactu.getitem_nota_credito().toString().trim()));
		element.appendChild(elementitem_nota_credito);

		Element elementitem_inventario = document.createElement(ParametroFactuConstantesFunciones.ITEMINVENTARIO);
		elementitem_inventario.appendChild(document.createTextNode(parametrofactu.getitem_inventario().toString().trim()));
		element.appendChild(elementitem_inventario);

		Element elementcon_detalle_proforma = document.createElement(ParametroFactuConstantesFunciones.CONDETALLEPROFORMA);
		elementcon_detalle_proforma.appendChild(document.createTextNode(parametrofactu.getcon_detalle_proforma().toString().trim()));
		element.appendChild(elementcon_detalle_proforma);

		Element elementcon_detalle_pedido = document.createElement(ParametroFactuConstantesFunciones.CONDETALLEPEDIDO);
		elementcon_detalle_pedido.appendChild(document.createTextNode(parametrofactu.getcon_detalle_pedido().toString().trim()));
		element.appendChild(elementcon_detalle_pedido);

		Element elementcon_detalle_factura = document.createElement(ParametroFactuConstantesFunciones.CONDETALLEFACTURA);
		elementcon_detalle_factura.appendChild(document.createTextNode(parametrofactu.getcon_detalle_factura().toString().trim()));
		element.appendChild(elementcon_detalle_factura);

		Element elementcon_detalle_nota_credito = document.createElement(ParametroFactuConstantesFunciones.CONDETALLENOTACREDITO);
		elementcon_detalle_nota_credito.appendChild(document.createTextNode(parametrofactu.getcon_detalle_nota_credito().toString().trim()));
		element.appendChild(elementcon_detalle_nota_credito);
	}
	
	public void generarReporteGroupGenericoParametroFactusSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ParametroFactu> parametrofactusSeleccionados=new ArrayList<ParametroFactu>();
		
		parametrofactusSeleccionados=this.getParametroFactusSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoParametroFactu(parametrofactusSeleccionados);
		
		this.generarReporteParametroFactus("Todos",parametrofactusSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoParametroFactu(ArrayList<ParametroFactu> parametrofactusSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ParametroFactu parametrofactuAux:parametrofactusSeleccionados) {
				parametrofactuAux.setsDetalleGeneralEntityReporte(parametrofactuAux.toString());
			
				if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFACTU)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getcuentacontablefactu_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEFINAN)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getcuentacontablefinan_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDCUENTACONTABLEOTRO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getcuentacontableotro_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPROFORMA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getformatoproforma_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDFORMATOPEDIDO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getformatopedido_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDFORMATOFACTURA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getformatofactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDFORMATONOTACREDITO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getformatonotacredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_IDFORMATOINVENTARIO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getformatoinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALPROFORMA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getsecuencial_proforma());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUANCIALPEDIDO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getsecuancial_pedido());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getsecuencial_factura());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_SECUENCIALNOTACREDITO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getsecuencial_nota_credito());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPROFORMA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getitem_proforma().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMPEDIDO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getitem_pedido().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMFACTURA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getitem_factura().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMNOTACREDITO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getitem_nota_credito().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_ITEMINVENTARIO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(parametrofactuAux.getitem_inventario().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPROFORMA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametrofactuAux.getcon_detalle_proforma()));
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEPEDIDO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametrofactuAux.getcon_detalle_pedido()));
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLEFACTURA)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametrofactuAux.getcon_detalle_factura()));
				}
				 else if(sTipoSeleccionar.equals(ParametroFactuConstantesFunciones.LABEL_CONDETALLENOTACREDITO)) {
					existe=true;
					parametrofactuAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametrofactuAux.getcon_detalle_nota_credito()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroFactuConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesParametroFactu(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoParametroFactu=true;
				this.isVisibilidadCeldaNuevoRelacionesParametroFactu=true;
				this.isVisibilidadCeldaGuardarCambiosParametroFactu=true;
			}
			
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=true;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=true;
			this.isVisibilidadCeldaEliminarParametroFactu=true;
			this.isVisibilidadCeldaCancelarParametroFactu=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=true;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoParametroFactu=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=true;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=true;
			this.isVisibilidadCeldaModificarParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
			this.isVisibilidadCeldaModificarParametroFactu=true;
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
			this.isVisibilidadCeldaCancelarParametroFactu=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroFactu=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ParametroFactuJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoParametroFactu=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=true;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=true;
		} else {
			this.actualizarEstadoPanelsParametroFactu(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarParametroFactu=false;
			//this.isVisibilidadCeldaVerFormParametroFactu=false;
			this.isVisibilidadCeldaDuplicarParametroFactu=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!parametrofactuSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
		} else {
			this.isVisibilidadCeldaNuevoParametroFactu=false;
			this.isVisibilidadCeldaGuardarCambiosParametroFactu=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(parametrofactuSessionBean.getEsGuardarRelacionado()) {
			if(!parametrofactuSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;												
			}
			
			this.jButtonCerrarParametroFactu.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesParametroFactu=false;
		}
		
		if(!this.permiteMantenimiento(this.parametrofactu)) {
			this.isVisibilidadCeldaActualizarParametroFactu=false;
			this.isVisibilidadCeldaEliminarParametroFactu=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesParametroFactu() {
	}
	
	public void actualizarEstadoPanelsParametroFactu(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionParametroFactu!=null) {
				this.jScrollPanelDatosEdicionParametroFactu.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroFactu!=null) {
				this.jScrollPanelDatosParametroFactu.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroFactu!=null) {
				this.jPanelPaginacionParametroFactu.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasParametroFactu!=null) {
					this.jTabbedPaneBusquedasParametroFactu.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.parametrofactuSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroFactu!=null) {
				this.jTabbedPaneBusquedasParametroFactu.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesParametroFactu!=null) {
				this.jPanelParametrosReportesParametroFactu.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableFactu(Boolean isParaCuentaContableFactu){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableFactuNegation=!isParaCuentaContableFactu;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaCuentaContableFactu;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaCuentaContableFactuNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableFinan(Boolean isParaCuentaContableFinan){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableFinanNegation=!isParaCuentaContableFinan;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaCuentaContableFinan;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaCuentaContableFinanNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableOtro(Boolean isParaCuentaContableOtro){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableOtroNegation=!isParaCuentaContableOtro;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaCuentaContableOtro;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaCuentaContableOtroNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoProforma(Boolean isParaFormatoProforma){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoProformaNegation=!isParaFormatoProforma;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoProformaNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaFormatoProforma;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoPedido(Boolean isParaFormatoPedido){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoPedidoNegation=!isParaFormatoPedido;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoPedido;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoFactura(Boolean isParaFormatoFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoFacturaNegation=!isParaFormatoFactura;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaFormatoFactura;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaFormatoFacturaNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoNotaCredito(Boolean isParaFormatoNotaCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNotaCreditoNegation=!isParaFormatoNotaCredito;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaFormatoNotaCredito;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaFormatoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoInventario(Boolean isParaFormatoInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoInventarioNegation=!isParaFormatoInventario;

			this.isVisibilidadFK_IdCuentaContableFactu=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFactu) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFactuParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableFinan=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFinan) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableFinanParametroFactu);}

			this.isVisibilidadFK_IdCuentaContableOtro=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableOtro) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdCuentaContableOtroParametroFactu);}

			this.isVisibilidadFK_IdFormatoFactura=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdFormatoFactura) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoFacturaParametroFactu);}

			this.isVisibilidadFK_IdFormatoInventario=isParaFormatoInventario;
			if(!this.isVisibilidadFK_IdFormatoInventario) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoInventarioParametroFactu);}

			this.isVisibilidadFK_IdFormatoNotaCredito=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdFormatoNotaCredito) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoNotaCreditoParametroFactu);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoPedoParametroFactu);}

			this.isVisibilidadFK_IdFormatoProforma=isParaFormatoInventarioNegation;
			if(!this.isVisibilidadFK_IdFormatoProforma) {this.jTabbedPaneBusquedasParametroFactu.remove(jPanelFK_IdFormatoProformaParametroFactu);}
		}
		
	}
	
	
	
	

	public String registrarSesionParametroFactuParaBusquedaCuentaContableFactus() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrofactuSessionBean==null) {
				parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(cuentacontablefactuSessionBean==null) {
				cuentacontablefactuSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablefactuSessionBean.setsPathNavegacionActual(parametrofactuSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablefactuSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablefactuSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablefactuSessionBean.getisPaginaPopup();
			cuentacontablefactuSessionBean.setisPaginaPopup(false);
			cuentacontablefactuSessionBean.setEstaModoBusqueda(true);
			cuentacontablefactuSessionBean.setsFuncionBusquedaRapida("window.opener.parametrofactuFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_factu(TO_REPLACE);");
			cuentacontablefactuSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablefactuSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroFactuConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroFactu(true);
			//cuentacontableSessionBean.setlidParametroFactuActual(this.idParametroFactuActual);

			parametrofactuSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroFactu(true);
			parametrofactuSessionBean.setlIdParametroFactuActualForeignKey(this.idParametroFactuActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroFactuParaBusquedaCuentaContableFinans() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrofactuSessionBean==null) {
				parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(cuentacontablefinanSessionBean==null) {
				cuentacontablefinanSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablefinanSessionBean.setsPathNavegacionActual(parametrofactuSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablefinanSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablefinanSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablefinanSessionBean.getisPaginaPopup();
			cuentacontablefinanSessionBean.setisPaginaPopup(false);
			cuentacontablefinanSessionBean.setEstaModoBusqueda(true);
			cuentacontablefinanSessionBean.setsFuncionBusquedaRapida("window.opener.parametrofactuFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_finan(TO_REPLACE);");
			cuentacontablefinanSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablefinanSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroFactuConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroFactu(true);
			//cuentacontableSessionBean.setlidParametroFactuActual(this.idParametroFactuActual);

			parametrofactuSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroFactu(true);
			parametrofactuSessionBean.setlIdParametroFactuActualForeignKey(this.idParametroFactuActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroFactuParaBusquedaCuentaContableOtros() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrofactuSessionBean==null) {
				parametrofactuSessionBean=new ParametroFactuSessionBean();
			}

			if(cuentacontableotroSessionBean==null) {
				cuentacontableotroSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableotroSessionBean.setsPathNavegacionActual(parametrofactuSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableotroSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableotroSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableotroSessionBean.getisPaginaPopup();
			cuentacontableotroSessionBean.setisPaginaPopup(false);
			cuentacontableotroSessionBean.setEstaModoBusqueda(true);
			cuentacontableotroSessionBean.setsFuncionBusquedaRapida("window.opener.parametrofactuFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_otro(TO_REPLACE);");
			cuentacontableotroSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableotroSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroFactuConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroFactu(true);
			//cuentacontableSessionBean.setlidParametroFactuActual(this.idParametroFactuActual);

			parametrofactuSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroFactu(true);
			parametrofactuSessionBean.setlIdParametroFactuActualForeignKey(this.idParametroFactuActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ParametroFactuSessionBean parametrofactuSessionBean=new ParametroFactuSessionBean();
		
		if(this.parametrofactuSessionBean==null) {
			this.parametrofactuSessionBean=new ParametroFactuSessionBean();
		}
		
		this.parametrofactuSessionBean.setsUltimaBusquedaParametroFactu(this.getsAccionBusqueda());
		this.parametrofactuSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.parametrofactuSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFactu")) {
			parametrofactuSessionBean.setid_cuenta_contable_factu(this.getid_cuenta_contable_factuFK_IdCuentaContableFactu());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFinan")) {
			parametrofactuSessionBean.setid_cuenta_contable_finan(this.getid_cuenta_contable_finanFK_IdCuentaContableFinan());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableOtro")) {
			parametrofactuSessionBean.setid_cuenta_contable_otro(this.getid_cuenta_contable_otroFK_IdCuentaContableOtro());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			parametrofactuSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoFactura")) {
			parametrofactuSessionBean.setid_formato_factura(this.getid_formato_facturaFK_IdFormatoFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoInventario")) {
			parametrofactuSessionBean.setid_formato_inventario(this.getid_formato_inventarioFK_IdFormatoInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoNotaCredito")) {
			parametrofactuSessionBean.setid_formato_nota_credito(this.getid_formato_nota_creditoFK_IdFormatoNotaCredito());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoPedo")) {
			parametrofactuSessionBean.setid_formato_pedido(this.getid_formato_pedidoFK_IdFormatoPedo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoProforma")) {
			parametrofactuSessionBean.setid_formato_proforma(this.getid_formato_proformaFK_IdFormatoProforma());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			parametrofactuSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ParametroFactuSessionBean parametrofactuSessionBean=new ParametroFactuSessionBean();
		
		if(this.parametrofactuSessionBean==null) {
			this.parametrofactuSessionBean=new ParametroFactuSessionBean();
		}
		
		if(this.parametrofactuSessionBean.getsUltimaBusquedaParametroFactu()!=null&&!this.parametrofactuSessionBean.getsUltimaBusquedaParametroFactu().equals("")) {
			this.setsAccionBusqueda(parametrofactuSessionBean.getsUltimaBusquedaParametroFactu());
			this.setiNumeroPaginacion(parametrofactuSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(parametrofactuSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFactu")) {
				this.setid_cuenta_contable_factuFK_IdCuentaContableFactu(parametrofactuSessionBean.getid_cuenta_contable_factu());
				parametrofactuSessionBean.setid_cuenta_contable_factu(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFinan")) {
				this.setid_cuenta_contable_finanFK_IdCuentaContableFinan(parametrofactuSessionBean.getid_cuenta_contable_finan());
				parametrofactuSessionBean.setid_cuenta_contable_finan(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableOtro")) {
				this.setid_cuenta_contable_otroFK_IdCuentaContableOtro(parametrofactuSessionBean.getid_cuenta_contable_otro());
				parametrofactuSessionBean.setid_cuenta_contable_otro(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(parametrofactuSessionBean.getid_empresa());
				parametrofactuSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoFactura")) {
				this.setid_formato_facturaFK_IdFormatoFactura(parametrofactuSessionBean.getid_formato_factura());
				parametrofactuSessionBean.setid_formato_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoInventario")) {
				this.setid_formato_inventarioFK_IdFormatoInventario(parametrofactuSessionBean.getid_formato_inventario());
				parametrofactuSessionBean.setid_formato_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoNotaCredito")) {
				this.setid_formato_nota_creditoFK_IdFormatoNotaCredito(parametrofactuSessionBean.getid_formato_nota_credito());
				parametrofactuSessionBean.setid_formato_nota_credito(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoPedo")) {
				this.setid_formato_pedidoFK_IdFormatoPedo(parametrofactuSessionBean.getid_formato_pedido());
				parametrofactuSessionBean.setid_formato_pedido(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoProforma")) {
				this.setid_formato_proformaFK_IdFormatoProforma(parametrofactuSessionBean.getid_formato_proforma());
				parametrofactuSessionBean.setid_formato_proforma(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(parametrofactuSessionBean.getid_sucursal());
				parametrofactuSessionBean.setid_sucursal(-1L);
			}
		}
		
		this.parametrofactuSessionBean.setsUltimaBusquedaParametroFactu("");
		this.parametrofactuSessionBean.setiNumeroPaginacion(ParametroFactuConstantesFunciones.INUMEROPAGINACION);
		this.parametrofactuSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaParametroFactu(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioParametroFactu() {
		this.updateBorderResaltarBusquedasFormularioParametroFactu();
		this.updateVisibilidadBusquedasFormularioParametroFactu();
		this.updateHabilitarBusquedasFormularioParametroFactu();
	}
	
	public void updateBorderResaltarBusquedasFormularioParametroFactu() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasParametroFactu.getComponents().length>0) {
	

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFactuParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFactuParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFactuParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFinanParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFinanParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFinanParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableOtroParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableOtroParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableOtroParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoFacturaParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoFacturaParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoFacturaParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoInventarioParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoInventarioParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoInventarioParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoNotaCreditoParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoNotaCreditoParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoPedoParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoPedoParametroFactu);
			}
		}

		if(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoProformaParametroFactu!=null) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoProformaParametroFactu);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoProformaParametroFactu);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioParametroFactu() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasParametroFactu.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFactuParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableFactuParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableFactuParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFinanParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableFinanParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableFinanParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableOtroParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableOtroParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdCuentaContableOtroParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoFacturaParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoFacturaParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoFacturaParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoInventarioParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoInventarioParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoInventarioParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoNotaCreditoParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoNotaCreditoParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoPedoParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoPedoParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoProformaParametroFactu);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoProformaParametroFactu);
			if(!this.parametrofactuConstantesFunciones.mostrarFK_IdFormatoProformaParametroFactu && index>-1) {
				this.jTabbedPaneBusquedasParametroFactu.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioParametroFactu() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasParametroFactu.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFactuParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableFactuParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableFactuParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFinanParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableFinanParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableFinanParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableOtroParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableOtroParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdCuentaContableOtroParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoFacturaParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdFormatoFacturaParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdFormatoFacturaParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoInventarioParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdFormatoInventarioParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdFormatoInventarioParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdFormatoNotaCreditoParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdFormatoNotaCreditoParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdFormatoPedoParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdFormatoPedoParametroFactu);
			}

			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoProformaParametroFactu);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrofactuConstantesFunciones.activarFK_IdFormatoProformaParametroFactu);
				this.jTabbedPaneBusquedasParametroFactu.setEnabledAt(index,this.parametrofactuConstantesFunciones.activarFK_IdFormatoProformaParametroFactu);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaParametroFactu(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCuentaContableFactu")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFactuParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdCuentaContableFactuParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFactuParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableFinan")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableFinanParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdCuentaContableFinanParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableFinanParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableOtro")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdCuentaContableOtroParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdCuentaContableOtroParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdCuentaContableOtroParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoFactura")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoFacturaParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdFormatoFacturaParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoFacturaParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoInventario")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoInventarioParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdFormatoInventarioParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoInventarioParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoNotaCredito")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdFormatoNotaCreditoParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoNotaCreditoParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoPedo")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdFormatoPedoParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoPedoParametroFactu);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoProforma")) {
			index= this.jTabbedPaneBusquedasParametroFactu.indexOfComponent(this.jPanelFK_IdFormatoProformaParametroFactu);

			this.jTabbedPaneBusquedasParametroFactu.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroFactu.getComponent(index);

			this.parametrofactuConstantesFunciones.setResaltarFK_IdFormatoProformaParametroFactu(resaltar);

			jPanel.setBorder(this.parametrofactuConstantesFunciones.resaltarFK_IdFormatoProformaParametroFactu);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarParametroFactu.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioParametroFactu() throws Exception {

		if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioParametroFactu();
		this.updateVisibilidadResaltarControlesFormularioParametroFactu();
		this.updateHabilitarResaltarControlesFormularioParametroFactu();
		
	}
	
	public void updateBorderResaltarControlesFormularioParametroFactu() throws Exception {
		if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.parametrofactuConstantesFunciones.resaltaridParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaridParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_empresaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_empresaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_sucursalParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_sucursalParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_factuParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_factuParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_finanParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_finanParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_otroParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_cuenta_contable_otroParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_formato_proformaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_formato_proformaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_formato_pedidoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_formato_pedidoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_formato_facturaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_formato_facturaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_formato_nota_creditoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_formato_nota_creditoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarid_formato_inventarioParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarid_formato_inventarioParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarsecuencial_proformaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarsecuencial_proformaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarsecuancial_pedidoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarsecuancial_pedidoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarsecuencial_facturaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarsecuencial_facturaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarsecuencial_nota_creditoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarsecuencial_nota_creditoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltaritem_proformaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaritem_proformaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltaritem_pedidoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaritem_pedidoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltaritem_facturaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaritem_facturaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltaritem_nota_creditoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaritem_nota_creditoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltaritem_inventarioParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltaritem_inventarioParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarcon_detalle_proformaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setBorderPainted(true);this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarcon_detalle_proformaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarcon_detalle_pedidoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setBorderPainted(true);this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarcon_detalle_pedidoParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarcon_detalle_facturaParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setBorderPainted(true);this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarcon_detalle_facturaParametroFactu);}
		if(this.parametrofactuConstantesFunciones.resaltarcon_detalle_nota_creditoParametroFactu!=null && this.jInternalFrameDetalleFormParametroFactu!=null) {this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setBorderPainted(true);this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setBorder(this.parametrofactuConstantesFunciones.resaltarcon_detalle_nota_creditoParametroFactu);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioParametroFactu() throws Exception {		
		if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
	
		//this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraridParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelidParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraridParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_empresaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_empresaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_empresaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_sucursalParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_sucursalParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_sucursalParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_factuParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_cuenta_contable_factuParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_factuParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_factuParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_finanParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_cuenta_contable_finanParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_finanParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_finanParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_otroParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_cuenta_contable_otroParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_otroParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_cuenta_contable_otroParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_formato_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_proformaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_formato_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_pedidoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_formato_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_facturaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_formato_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_nota_creditoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_inventarioParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelid_formato_inventarioParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarid_formato_inventarioParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelsecuencial_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_proformaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuancial_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelsecuancial_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuancial_pedidoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelsecuencial_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_facturaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelsecuencial_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarsecuencial_nota_creditoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelitem_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_proformaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelitem_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_pedidoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelitem_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_facturaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelitem_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_nota_creditoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_inventarioParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelitem_inventarioParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostraritem_inventarioParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelcon_detalle_proformaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_proformaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelcon_detalle_pedidoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_pedidoParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelcon_detalle_facturaParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_facturaParametroFactu);
		//this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jPanelcon_detalle_nota_creditoParametroFactu.setVisible(this.parametrofactuConstantesFunciones.mostrarcon_detalle_nota_creditoParametroFactu);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioParametroFactu() throws Exception {
		if(this.jInternalFrameDetalleFormParametroFactu==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroFactu!=null) {
	
		this.jInternalFrameDetalleFormParametroFactu.jLabelidParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaridParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_empresaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_empresaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_sucursalParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_sucursalParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_factuParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_factuParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_factuParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_factuParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_finanParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_finanParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_finanParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_finanParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_cuenta_contable_otroParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_otroParametroFactu);
			this.jInternalFrameDetalleFormParametroFactu.jButtonid_cuenta_contable_otroParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_cuenta_contable_otroParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_proformaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_formato_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_pedidoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_formato_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_facturaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_formato_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_nota_creditoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_formato_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jComboBoxid_formato_inventarioParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarid_formato_inventarioParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_proformaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarsecuencial_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuancial_pedidoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarsecuancial_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_facturaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarsecuencial_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFieldsecuencial_nota_creditoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarsecuencial_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_proformaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaritem_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_pedidoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaritem_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_facturaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaritem_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_nota_creditoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaritem_nota_creditoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jTextFielditem_inventarioParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activaritem_inventarioParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_proformaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarcon_detalle_proformaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_pedidoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarcon_detalle_pedidoParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_facturaParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarcon_detalle_facturaParametroFactu);
		this.jInternalFrameDetalleFormParametroFactu.jCheckBoxcon_detalle_nota_creditoParametroFactu.setEnabled(this.parametrofactuConstantesFunciones.activarcon_detalle_nota_creditoParametroFactu);
		}
	}
	
		
}