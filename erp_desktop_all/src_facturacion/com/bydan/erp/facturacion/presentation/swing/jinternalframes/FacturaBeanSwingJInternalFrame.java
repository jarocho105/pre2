/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;


import java.sql.Time;


import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.FacturaConstantesFunciones;
import com.bydan.erp.facturacion.util.FacturaParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.FacturaParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.FacturaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class FacturaBeanSwingJInternalFrame extends FacturaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(FacturaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Factura> facturaValidator = new ClassValidator<Factura>(Factura.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Factura factura;	
	public Factura facturaAux;
	public Factura facturaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Factura facturaTotales;
	public Long idFacturaActual;
	public Long iIdNuevoFactura=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboSubCliente="";

	public List<SubCliente> subclientesForeignKey;

	public List<SubCliente> getsubclientesForeignKey() {
		return subclientesForeignKey;
	}

	public void setsubclientesForeignKey(List<SubCliente> subclientesForeignKey) {
		this.subclientesForeignKey = subclientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public SubCliente subclienteForeignKey;

	public SubCliente getsubclienteForeignKey() {
		return subclienteForeignKey;
	}

	public void setsubclienteForeignKey(SubCliente subclienteForeignKey) {
		this.subclienteForeignKey = subclienteForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboTransporte="";

	public List<Transporte> transportesForeignKey;

	public List<Transporte> gettransportesForeignKey() {
		return transportesForeignKey;
	}

	public void settransportesForeignKey(List<Transporte> transportesForeignKey) {
		this.transportesForeignKey = transportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transporte transporteForeignKey;

	public Transporte gettransporteForeignKey() {
		return transporteForeignKey;
	}

	public void settransporteForeignKey(Transporte transporteForeignKey) {
		this.transporteForeignKey = transporteForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

	public String sFinalQueryComboTipoLlamada="";

	public List<TipoLlamada> tipollamadasForeignKey;

	public List<TipoLlamada> gettipollamadasForeignKey() {
		return tipollamadasForeignKey;
	}

	public void settipollamadasForeignKey(List<TipoLlamada> tipollamadasForeignKey) {
		this.tipollamadasForeignKey = tipollamadasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoLlamada tipollamadaForeignKey;

	public TipoLlamada gettipollamadaForeignKey() {
		return tipollamadaForeignKey;
	}

	public void settipollamadaForeignKey(TipoLlamada tipollamadaForeignKey) {
		this.tipollamadaForeignKey = tipollamadaForeignKey;
	}

	public String sFinalQueryComboTipoFactura="";

	public List<TipoFactura> tipofacturasForeignKey;

	public List<TipoFactura> gettipofacturasForeignKey() {
		return tipofacturasForeignKey;
	}

	public void settipofacturasForeignKey(List<TipoFactura> tipofacturasForeignKey) {
		this.tipofacturasForeignKey = tipofacturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoFactura tipofacturaForeignKey;

	public TipoFactura gettipofacturaForeignKey() {
		return tipofacturaForeignKey;
	}

	public void settipofacturaForeignKey(TipoFactura tipofacturaForeignKey) {
		this.tipofacturaForeignKey = tipofacturaForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboPedido="";

	public List<Pedido> pedidosForeignKey;

	public List<Pedido> getpedidosForeignKey() {
		return pedidosForeignKey;
	}

	public void setpedidosForeignKey(List<Pedido> pedidosForeignKey) {
		this.pedidosForeignKey = pedidosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pedido pedidoForeignKey;

	public Pedido getpedidoForeignKey() {
		return pedidoForeignKey;
	}

	public void setpedidoForeignKey(Pedido pedidoForeignKey) {
		this.pedidoForeignKey = pedidoForeignKey;
	}

	public String sFinalQueryComboResponsable="";

	public List<Responsable> responsablesForeignKey;

	public List<Responsable> getresponsablesForeignKey() {
		return responsablesForeignKey;
	}

	public void setresponsablesForeignKey(List<Responsable> responsablesForeignKey) {
		this.responsablesForeignKey = responsablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Responsable responsableForeignKey;

	public Responsable getresponsableForeignKey() {
		return responsableForeignKey;
	}

	public void setresponsableForeignKey(Responsable responsableForeignKey) {
		this.responsableForeignKey = responsableForeignKey;
	}

	public String sFinalQueryComboEstadoFisicoFacturaEmpresa="";

	public List<EstadoFisicoFacturaEmpresa> estadofisicofacturaempresasForeignKey;

	public List<EstadoFisicoFacturaEmpresa> getestadofisicofacturaempresasForeignKey() {
		return estadofisicofacturaempresasForeignKey;
	}

	public void setestadofisicofacturaempresasForeignKey(List<EstadoFisicoFacturaEmpresa> estadofisicofacturaempresasForeignKey) {
		this.estadofisicofacturaempresasForeignKey = estadofisicofacturaempresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoFisicoFacturaEmpresa estadofisicofacturaempresaForeignKey;

	public EstadoFisicoFacturaEmpresa getestadofisicofacturaempresaForeignKey() {
		return estadofisicofacturaempresaForeignKey;
	}

	public void setestadofisicofacturaempresaForeignKey(EstadoFisicoFacturaEmpresa estadofisicofacturaempresaForeignKey) {
		this.estadofisicofacturaempresaForeignKey = estadofisicofacturaempresaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idVendedorActual=0L;

	public Long getidVendedorActual() {
		return idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual= idVendedorActual;
	}
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	

	public Boolean isTienePermisosDetaFormaPago=false;

	public Boolean getIsTienePermisosDetaFormaPago() {
		return isTienePermisosDetaFormaPago;
	}

	public void setIsTienePermisosDetaFormaPago(Boolean isTienePermisosDetaFormaPago) {
		this.isTienePermisosDetaFormaPago= isTienePermisosDetaFormaPago;
	}


	public Boolean isTienePermisosDetalleFactura=false;

	public Boolean getIsTienePermisosDetalleFactura() {
		return isTienePermisosDetalleFactura;
	}

	public void setIsTienePermisosDetalleFactura(Boolean isTienePermisosDetalleFactura) {
		this.isTienePermisosDetalleFactura= isTienePermisosDetalleFactura;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoFactura;
	public Boolean isPermisoNuevoFactura;
	public Boolean isPermisoActualizarFactura;
	public Boolean isPermisoActualizarOriginalFactura;
	public Boolean isPermisoEliminarFactura;
	public Boolean isPermisoGuardarCambiosFactura;
	public Boolean isPermisoConsultaFactura;
	public Boolean isPermisoBusquedaFactura;
	public Boolean isPermisoReporteFactura;
	public Boolean isPermisoPaginacionMedioFactura;
	public Boolean isPermisoPaginacionAltoFactura;
	public Boolean isPermisoPaginacionTodoFactura;
	public Boolean isPermisoCopiarFactura;
	public Boolean isPermisoVerFormFactura;
	public Boolean isPermisoDuplicarFactura;
	public Boolean isPermisoOrdenFactura;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public FacturaParameterReturnGeneral facturaReturnGeneral;
	public FacturaParameterReturnGeneral facturaParameterGeneral;
	
	

	public DetaFormaPagoLogic detaformapagoLogic=null;

	public DetaFormaPagoLogic getDetaFormaPagoLogic() {
		return detaformapagoLogic;
	}

	public void setDetaFormaPagoLogic(DetaFormaPagoLogic detaformapagoLogic) {
		this.detaformapagoLogic = detaformapagoLogic;
	}


	public DetalleFacturaLogic detallefacturaLogic=null;

	public DetalleFacturaLogic getDetalleFacturaLogic() {
		return detallefacturaLogic;
	}

	public void setDetalleFacturaLogic(DetalleFacturaLogic detallefacturaLogic) {
		this.detallefacturaLogic = detallefacturaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoFactura=false;
	public Boolean esParaAccionDesdeFormularioFactura=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected FacturaSessionBeanAdditional facturaSessionBeanAdditional=null;
	
	public FacturaSessionBeanAdditional getFacturaSessionBeanAdditional() {
		return this.facturaSessionBeanAdditional;
	}
	
	public void setFacturaSessionBeanAdditional(FacturaSessionBeanAdditional facturaSessionBeanAdditional) {
		try {
			this.facturaSessionBeanAdditional=facturaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected FacturaBeanSwingJInternalFrameAdditional facturaBeanSwingJInternalFrameAdditional=null;
	//public class FacturaBeanSwingJInternalFrame
	
	public FacturaBeanSwingJInternalFrameAdditional getFacturaBeanSwingJInternalFrameAdditional() {
		return this.facturaBeanSwingJInternalFrameAdditional;
	}
	
	public void setFacturaBeanSwingJInternalFrameAdditional(FacturaBeanSwingJInternalFrameAdditional facturaBeanSwingJInternalFrameAdditional) {
		try {
			this.facturaBeanSwingJInternalFrameAdditional=facturaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public FacturaLogic facturaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Factura facturaBean;
	public FacturaConstantesFunciones facturaConstantesFunciones;
	//public FacturaParameterReturnGeneral facturaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public MonedaLogic monedaLogic;
	public EmpleadoLogic empleadoLogic;
	public FormatoLogic formatoLogic;
	public ClienteLogic clienteLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public SubClienteLogic subclienteLogic;
	public VendedorLogic vendedorLogic;
	public TransporteLogic transporteLogic;
	public TransportistaLogic transportistaLogic;
	public TipoLlamadaLogic tipollamadaLogic;
	public TipoFacturaLogic tipofacturaLogic;
	public TipoCambioLogic tipocambioLogic;
	public AsientoContableLogic asientocontableLogic;
	public PedidoLogic pedidoLogic;
	public ResponsableLogic responsableLogic;
	public EstadoFisicoFacturaEmpresaLogic estadofisicofacturaempresaLogic;
	
	//PARAMETROS
	
	
	//public List<Factura> facturas;	
	//public List<Factura> facturasEliminados;
	//public List<Factura> facturasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoFactura=false;
	public Boolean isVisibilidadCeldaDuplicarFactura=true;
	public Boolean isVisibilidadCeldaCopiarFactura=true;
	public Boolean isVisibilidadCeldaVerFormFactura=true;
	public Boolean isVisibilidadCeldaOrdenFactura=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesFactura=false;
	public Boolean isVisibilidadCeldaModificarFactura=false;
	public Boolean isVisibilidadCeldaActualizarFactura=false;
	public Boolean isVisibilidadCeldaEliminarFactura=false;
	public Boolean isVisibilidadCeldaCancelarFactura=false;
	public Boolean isVisibilidadCeldaGuardarFactura=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosFactura=false;	
	
	
	public Boolean isVisibilidadBusquedaPorNumeroPreImpreso=false;
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPedido=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdResponsable=false;
	public Boolean isVisibilidadFK_IdSubCliente=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	public Boolean isVisibilidadFK_IdTipoFactura=false;
	public Boolean isVisibilidadFK_IdTipoLlamada=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdTransporte=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoFactura() {
		return this.iIdNuevoFactura;
	}

	public void setiIdNuevoFactura(Long iIdNuevoFactura) {
		this.iIdNuevoFactura = iIdNuevoFactura;
	}
	
	public Long getidFacturaActual() {
		return this.idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual = idFacturaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Factura getfactura() {
		return this.factura;
	}

	public void setfactura(Factura factura) {
		this.factura = factura;
	}
	
	public Factura getfacturaAux() {
		return this.facturaAux;
	}

	public void setfacturaAux(Factura facturaAux) {
		this.facturaAux = facturaAux;
	}				
	
	public Factura getfacturaAnterior() {
		return this.facturaAnterior;
	}

	public void setfacturaAnterior(Factura facturaAnterior) {
		this.facturaAnterior = facturaAnterior;
	}	
	
	public Factura getfacturaTotales() {
		return this.facturaTotales;
	}

	public void setfacturaTotales(Factura facturaTotales) {
		this.facturaTotales = facturaTotales;
	}	
	
	public Factura getfacturaBean() {
		return this.facturaBean;
	}

	public void setfacturaBean(Factura facturaBean) {
		this.facturaBean = facturaBean;
	}	
	
	public FacturaParameterReturnGeneral getfacturaReturnGeneral() {
		return this.facturaReturnGeneral;
	}

	public void setfacturaReturnGeneral(FacturaParameterReturnGeneral facturaReturnGeneral) {
		this.facturaReturnGeneral = facturaReturnGeneral;
	}	
	
	
	public String numero_pre_impresoBusquedaPorNumeroPreImpreso="";

	public String getnumero_pre_impresoBusquedaPorNumeroPreImpreso() {
		return this.numero_pre_impresoBusquedaPorNumeroPreImpreso;
	}

	public void setnumero_pre_impresoBusquedaPorNumeroPreImpreso(String numero_pre_impresoBusquedaPorNumeroPreImpreso) {
		this.numero_pre_impresoBusquedaPorNumeroPreImpreso = numero_pre_impresoBusquedaPorNumeroPreImpreso;
	}

	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=null;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa=null;

	public Long getid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa() {
		return this.id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa;
	}

	public void setid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa(Long id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa) {
		this.id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa = id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa;
	}

	public Long id_formatoFK_IdFormato=-1L;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_pedidoFK_IdPedido=null;

	public Long getid_pedidoFK_IdPedido() {
		return this.id_pedidoFK_IdPedido;
	}

	public void setid_pedidoFK_IdPedido(Long id_pedidoFK_IdPedido) {
		this.id_pedidoFK_IdPedido = id_pedidoFK_IdPedido;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_responsableFK_IdResponsable=null;

	public Long getid_responsableFK_IdResponsable() {
		return this.id_responsableFK_IdResponsable;
	}

	public void setid_responsableFK_IdResponsable(Long id_responsableFK_IdResponsable) {
		this.id_responsableFK_IdResponsable = id_responsableFK_IdResponsable;
	}

	public Long id_sub_clienteFK_IdSubCliente=null;

	public Long getid_sub_clienteFK_IdSubCliente() {
		return this.id_sub_clienteFK_IdSubCliente;
	}

	public void setid_sub_clienteFK_IdSubCliente(Long id_sub_clienteFK_IdSubCliente) {
		this.id_sub_clienteFK_IdSubCliente = id_sub_clienteFK_IdSubCliente;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

	public Long id_tipo_facturaFK_IdTipoFactura=-1L;

	public Long getid_tipo_facturaFK_IdTipoFactura() {
		return this.id_tipo_facturaFK_IdTipoFactura;
	}

	public void setid_tipo_facturaFK_IdTipoFactura(Long id_tipo_facturaFK_IdTipoFactura) {
		this.id_tipo_facturaFK_IdTipoFactura = id_tipo_facturaFK_IdTipoFactura;
	}

	public Long id_tipo_llamadaFK_IdTipoLlamada=-1L;

	public Long getid_tipo_llamadaFK_IdTipoLlamada() {
		return this.id_tipo_llamadaFK_IdTipoLlamada;
	}

	public void setid_tipo_llamadaFK_IdTipoLlamada(Long id_tipo_llamadaFK_IdTipoLlamada) {
		this.id_tipo_llamadaFK_IdTipoLlamada = id_tipo_llamadaFK_IdTipoLlamada;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_transporteFK_IdTransporte=null;

	public Long getid_transporteFK_IdTransporte() {
		return this.id_transporteFK_IdTransporte;
	}

	public void setid_transporteFK_IdTransporte(Long id_transporteFK_IdTransporte) {
		this.id_transporteFK_IdTransporte = id_transporteFK_IdTransporte;
	}

	public Long id_transportistaFK_IdTransportista=null;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=-1L;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public FacturaLogic getFacturaLogic()	{		
		return facturaLogic;
	}

	public void setFacturaLogic(FacturaLogic facturaLogic) {
		this.facturaLogic = facturaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoFactura() {
		return isEsNuevoFactura;
	}

	public void setIsEsNuevoFactura(Boolean isEsNuevoFactura) {
		this.isEsNuevoFactura = isEsNuevoFactura;
	}

	public Boolean getEsParaAccionDesdeFormularioFactura() {
		return esParaAccionDesdeFormularioFactura;
	}
	
	public void setEsParaAccionDesdeFormularioFactura(Boolean esParaAccionDesdeFormularioFactura) {
		this.esParaAccionDesdeFormularioFactura = esParaAccionDesdeFormularioFactura;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(facturaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(facturaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(facturaSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(facturaSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(facturaSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(facturaSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(facturaSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(facturaSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(facturaSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(facturaSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(facturaSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(facturaSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSubClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.subclientesForeignKey=new ArrayList<SubCliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SubCliente subclienteNulo = new SubCliente();

			SubClienteLogic subclienteLogic=new SubClienteLogic();

			//subclienteLogic.getSubClienteDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSubCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//subclienteLogic.getSubClienteDataAccess().setIsForForeingKeyData(true);

					subclienteLogic.getTodosSubClientesWithConnection(sFinalQuery,new Pagination());

					this.subclientesForeignKey=subclienteLogic.getSubClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.subclientesForeignKey.add(0, subclienteNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSubCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					subclienteLogic.getEntityWithConnection(facturaSessionBean.getlidSubClienteActual());
					this.subclientesForeignKey.add(subclienteLogic.getSubCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(facturaSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportesForeignKey=new ArrayList<Transporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transporte transporteNulo = new Transporte();

			TransporteLogic transporteLogic=new TransporteLogic();

			//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

					transporteLogic.getTodosTransportesWithConnection(sFinalQuery,new Pagination());

					this.transportesForeignKey=transporteLogic.getTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportesForeignKey.add(0, transporteNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transporteLogic.getEntityWithConnection(facturaSessionBean.getlidTransporteActual());
					this.transportesForeignKey.add(transporteLogic.getTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transportista transportistaNulo = new Transportista();

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportistasForeignKey.add(0, transportistaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(facturaSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoLlamadasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipollamadasForeignKey=new ArrayList<TipoLlamada>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoLlamadaLogic tipollamadaLogic=new TipoLlamadaLogic();

			//tipollamadaLogic.getTipoLlamadaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoLlamada()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipollamadaLogic.getTipoLlamadaDataAccess().setIsForForeingKeyData(true);

					tipollamadaLogic.getTodosTipoLlamadasWithConnection(sFinalQuery,new Pagination());

					this.tipollamadasForeignKey=tipollamadaLogic.getTipoLlamadas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoLlamada(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipollamadaLogic.getEntityWithConnection(facturaSessionBean.getlidTipoLlamadaActual());
					this.tipollamadasForeignKey.add(tipollamadaLogic.getTipoLlamada());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipofacturasForeignKey=new ArrayList<TipoFactura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoFacturaLogic tipofacturaLogic=new TipoFacturaLogic();

			//tipofacturaLogic.getTipoFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipofacturaLogic.getTipoFacturaDataAccess().setIsForForeingKeyData(true);

					tipofacturaLogic.getTodosTipoFacturasWithConnection(sFinalQuery,new Pagination());

					this.tipofacturasForeignKey=tipofacturaLogic.getTipoFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipofacturaLogic.getEntityWithConnection(facturaSessionBean.getlidTipoFacturaActual());
					this.tipofacturasForeignKey.add(tipofacturaLogic.getTipoFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambio tipocambioNulo = new TipoCambio();

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipocambiosForeignKey.add(0, tipocambioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(facturaSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContable asientocontableNulo = new AsientoContable();

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.asientocontablesForeignKey.add(0, asientocontableNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(facturaSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPedidosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.pedidosForeignKey=new ArrayList<Pedido>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Pedido pedidoNulo = new Pedido();

			PedidoLogic pedidoLogic=new PedidoLogic();

			//pedidoLogic.getPedidoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPedido()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//pedidoLogic.getPedidoDataAccess().setIsForForeingKeyData(true);

					pedidoLogic.getTodosPedidosWithConnection(sFinalQuery,new Pagination());

					this.pedidosForeignKey=pedidoLogic.getPedidos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.pedidosForeignKey.add(0, pedidoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPedido(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidoLogic.getEntityWithConnection(facturaSessionBean.getlidPedidoActual());
					this.pedidosForeignKey.add(pedidoLogic.getPedido());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosResponsablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.responsablesForeignKey=new ArrayList<Responsable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Responsable responsableNulo = new Responsable();

			ResponsableLogic responsableLogic=new ResponsableLogic();

			//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

					responsableLogic.getTodosResponsablesWithConnection(sFinalQuery,new Pagination());

					this.responsablesForeignKey=responsableLogic.getResponsables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.responsablesForeignKey.add(0, responsableNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaResponsable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					responsableLogic.getEntityWithConnection(facturaSessionBean.getlidResponsableActual());
					this.responsablesForeignKey.add(responsableLogic.getResponsable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoFisicoFacturaEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadofisicofacturaempresasForeignKey=new ArrayList<EstadoFisicoFacturaEmpresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoFisicoFacturaEmpresa estadofisicofacturaempresaNulo = new EstadoFisicoFacturaEmpresa();

			EstadoFisicoFacturaEmpresaLogic estadofisicofacturaempresaLogic=new EstadoFisicoFacturaEmpresaLogic();

			//estadofisicofacturaempresaLogic.getEstadoFisicoFacturaEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFisicoFacturaEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadofisicofacturaempresaLogic.getEstadoFisicoFacturaEmpresaDataAccess().setIsForForeingKeyData(true);

					estadofisicofacturaempresaLogic.getTodosEstadoFisicoFacturaEmpresasWithConnection(sFinalQuery,new Pagination());

					this.estadofisicofacturaempresasForeignKey=estadofisicofacturaempresaLogic.getEstadoFisicoFacturaEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.estadofisicofacturaempresasForeignKey.add(0, estadofisicofacturaempresaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoFisicoFacturaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadofisicofacturaempresaLogic.getEntityWithConnection(facturaSessionBean.getlidEstadoFisicoFacturaEmpresaActual());
					this.estadofisicofacturaempresasForeignKey.add(estadofisicofacturaempresaLogic.getEstadoFisicoFacturaEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaFactura.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaFacturaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaFacturaGenerico!=null && jComboBoxid_empresaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_empresaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.factura!=null) {
						this.factura.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalFactura.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalFacturaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalFacturaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalFacturaGenerico!=null && jComboBoxid_sucursalFacturaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.factura!=null) {
						this.factura.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioFactura.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioFacturaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioFacturaGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioFacturaGenerico!=null && jComboBoxid_ejercicioFacturaGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.factura!=null) {
						this.factura.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoFactura.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoFacturaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoFacturaGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoFacturaGenerico!=null && jComboBoxid_periodoFacturaGenerico.getItemCount()>0) {
					jComboBoxid_periodoFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.factura!=null) {
						this.factura.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioFactura.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioFacturaGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioFacturaGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioFacturaGenerico!=null && jComboBoxid_anioFacturaGenerico.getItemCount()>0) {
					jComboBoxid_anioFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.factura!=null) {
						this.factura.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesFactura.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesFacturaGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesFacturaGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesFacturaGenerico!=null && jComboBoxid_mesFacturaGenerico.getItemCount()>0) {
					jComboBoxid_mesFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.factura!=null) {
						this.factura.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioFactura.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioFacturaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioFacturaGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioFacturaGenerico!=null && jComboBoxid_usuarioFacturaGenerico.getItemCount()>0) {
					jComboBoxid_usuarioFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaFactura.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaFacturaGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaFacturaGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaFacturaGenerico!=null && jComboBoxid_monedaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_monedaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.factura!=null) {
						this.factura.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoFactura.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoFacturaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoFacturaGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoFacturaGenerico!=null && jComboBoxid_empleadoFacturaGenerico.getItemCount()>0) {
					jComboBoxid_empleadoFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.factura!=null) {
						this.factura.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoFactura.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoFacturaGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoFacturaGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoFacturaGenerico!=null && jComboBoxid_formatoFacturaGenerico.getItemCount()>0) {
					jComboBoxid_formatoFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.factura!=null) {
						this.factura.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteFactura.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteFactura!=null) {
						jComboBoxid_clienteFK_IdClienteFactura.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteFactura!=null) {
							//jComboBoxid_clienteFK_IdClienteFactura.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteFactura.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteFacturaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteFacturaGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteFacturaGenerico!=null && jComboBoxid_clienteFacturaGenerico.getItemCount()>0) {
					jComboBoxid_clienteFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioFactura.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioFacturaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioFacturaGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioFacturaGenerico!=null && jComboBoxid_tipo_precioFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSubClienteForeignKey(Long idSubClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			SubCliente  subclienteTemp=null;

			for(SubCliente subclienteAux:subclientesForeignKey) {
				if(subclienteAux.getId()!=null && subclienteAux.getId().equals(idSubClienteSeleccionado)) {
					subclienteTemp=subclienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(subclienteTemp!=null) {

					if(this.factura!=null) {
						this.factura.setSubCliente(subclienteTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setSelectedItem(subclienteTemp);
					}
				} else {
					//jComboBoxid_sub_clienteFactura.setSelectedItem(subclienteTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdSubCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(subclienteTemp!=null && jComboBoxid_sub_clienteFK_IdSubClienteFactura!=null) {
						jComboBoxid_sub_clienteFK_IdSubClienteFactura.setSelectedItem(subclienteTemp);
					} else {
						if(jComboBoxid_sub_clienteFK_IdSubClienteFactura!=null) {
							//jComboBoxid_sub_clienteFK_IdSubClienteFactura.setSelectedItem(subclienteTemp);
							if(jComboBoxid_sub_clienteFK_IdSubClienteFactura.getItemCount()>0) {
								jComboBoxid_sub_clienteFK_IdSubClienteFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSubClienteForeignKeyDescripcion(Long idSubClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			SubCliente  subclienteTemp=null;

			for(SubCliente subclienteAux:subclientesForeignKey) {
				if(subclienteAux.getId()!=null && subclienteAux.getId().equals(idSubClienteSeleccionado)) {
					subclienteTemp=subclienteAux;
					break;
				}
			}


			sDescripcion=SubClienteConstantesFunciones.getSubClienteDescripcion(subclienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSubClienteForeignKeyGenerico(Long idSubClienteSeleccionado,JComboBox jComboBoxid_sub_clienteFacturaGenerico)throws Exception
	{
		try
		{
			SubCliente  subclienteTemp=null;

			for(SubCliente subclienteAux:subclientesForeignKey) {
				if(subclienteAux.getId()!=null && subclienteAux.getId().equals(idSubClienteSeleccionado)) {
					subclienteTemp=subclienteAux;
					break;
				}
			}

			if(subclienteTemp!=null) {
				jComboBoxid_sub_clienteFacturaGenerico.setSelectedItem(subclienteTemp);
			} else {
				if(jComboBoxid_sub_clienteFacturaGenerico!=null && jComboBoxid_sub_clienteFacturaGenerico.getItemCount()>0) {
					jComboBoxid_sub_clienteFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.factura!=null) {
						this.factura.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorFactura.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorFactura!=null) {
						jComboBoxid_vendedorFK_IdVendedorFactura.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorFactura!=null) {
							//jComboBoxid_vendedorFK_IdVendedorFactura.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorFactura.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorFacturaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorFacturaGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorFacturaGenerico!=null && jComboBoxid_vendedorFacturaGenerico.getItemCount()>0) {
					jComboBoxid_vendedorFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransporteForeignKey(Long idTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transporteTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTransporte(transporteTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setSelectedItem(transporteTemp);
					}
				} else {
					//jComboBoxid_transporteFactura.setSelectedItem(transporteTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransporteForeignKeyDescripcion(Long idTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}


			sDescripcion=TransporteConstantesFunciones.getTransporteDescripcion(transporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransporteForeignKeyGenerico(Long idTransporteSeleccionado,JComboBox jComboBoxid_transporteFacturaGenerico)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(transporteTemp!=null) {
				jComboBoxid_transporteFacturaGenerico.setSelectedItem(transporteTemp);
			} else {
				if(jComboBoxid_transporteFacturaGenerico!=null && jComboBoxid_transporteFacturaGenerico.getItemCount()>0) {
					jComboBoxid_transporteFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaFactura.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){
					if(transportistaTemp!=null && jComboBoxid_transportistaFK_IdTransportistaFactura!=null) {
						jComboBoxid_transportistaFK_IdTransportistaFactura.setSelectedItem(transportistaTemp);
					} else {
						if(jComboBoxid_transportistaFK_IdTransportistaFactura!=null) {
							//jComboBoxid_transportistaFK_IdTransportistaFactura.setSelectedItem(transportistaTemp);
							if(jComboBoxid_transportistaFK_IdTransportistaFactura.getItemCount()>0) {
								jComboBoxid_transportistaFK_IdTransportistaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaFacturaGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaFacturaGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaFacturaGenerico!=null && jComboBoxid_transportistaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_transportistaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoLlamadaForeignKey(Long idTipoLlamadaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoLlamada  tipollamadaTemp=null;

			for(TipoLlamada tipollamadaAux:tipollamadasForeignKey) {
				if(tipollamadaAux.getId()!=null && tipollamadaAux.getId().equals(idTipoLlamadaSeleccionado)) {
					tipollamadaTemp=tipollamadaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipollamadaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTipoLlamada(tipollamadaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setSelectedItem(tipollamadaTemp);
					}
				} else {
					//jComboBoxid_tipo_llamadaFactura.setSelectedItem(tipollamadaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoLlamadaForeignKeyDescripcion(Long idTipoLlamadaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoLlamada  tipollamadaTemp=null;

			for(TipoLlamada tipollamadaAux:tipollamadasForeignKey) {
				if(tipollamadaAux.getId()!=null && tipollamadaAux.getId().equals(idTipoLlamadaSeleccionado)) {
					tipollamadaTemp=tipollamadaAux;
					break;
				}
			}


			sDescripcion=TipoLlamadaConstantesFunciones.getTipoLlamadaDescripcion(tipollamadaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoLlamadaForeignKeyGenerico(Long idTipoLlamadaSeleccionado,JComboBox jComboBoxid_tipo_llamadaFacturaGenerico)throws Exception
	{
		try
		{
			TipoLlamada  tipollamadaTemp=null;

			for(TipoLlamada tipollamadaAux:tipollamadasForeignKey) {
				if(tipollamadaAux.getId()!=null && tipollamadaAux.getId().equals(idTipoLlamadaSeleccionado)) {
					tipollamadaTemp=tipollamadaAux;
					break;
				}
			}

			if(tipollamadaTemp!=null) {
				jComboBoxid_tipo_llamadaFacturaGenerico.setSelectedItem(tipollamadaTemp);
			} else {
				if(jComboBoxid_tipo_llamadaFacturaGenerico!=null && jComboBoxid_tipo_llamadaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_llamadaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoFacturaForeignKey(Long idTipoFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoFactura  tipofacturaTemp=null;

			for(TipoFactura tipofacturaAux:tipofacturasForeignKey) {
				if(tipofacturaAux.getId()!=null && tipofacturaAux.getId().equals(idTipoFacturaSeleccionado)) {
					tipofacturaTemp=tipofacturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipofacturaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTipoFactura(tipofacturaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setSelectedItem(tipofacturaTemp);
					}
				} else {
					//jComboBoxid_tipo_facturaFactura.setSelectedItem(tipofacturaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoFacturaForeignKeyDescripcion(Long idTipoFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoFactura  tipofacturaTemp=null;

			for(TipoFactura tipofacturaAux:tipofacturasForeignKey) {
				if(tipofacturaAux.getId()!=null && tipofacturaAux.getId().equals(idTipoFacturaSeleccionado)) {
					tipofacturaTemp=tipofacturaAux;
					break;
				}
			}


			sDescripcion=TipoFacturaConstantesFunciones.getTipoFacturaDescripcion(tipofacturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoFacturaForeignKeyGenerico(Long idTipoFacturaSeleccionado,JComboBox jComboBoxid_tipo_facturaFacturaGenerico)throws Exception
	{
		try
		{
			TipoFactura  tipofacturaTemp=null;

			for(TipoFactura tipofacturaAux:tipofacturasForeignKey) {
				if(tipofacturaAux.getId()!=null && tipofacturaAux.getId().equals(idTipoFacturaSeleccionado)) {
					tipofacturaTemp=tipofacturaAux;
					break;
				}
			}

			if(tipofacturaTemp!=null) {
				jComboBoxid_tipo_facturaFacturaGenerico.setSelectedItem(tipofacturaTemp);
			} else {
				if(jComboBoxid_tipo_facturaFacturaGenerico!=null && jComboBoxid_tipo_facturaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_facturaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.factura!=null) {
						this.factura.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioFactura.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioFacturaGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioFacturaGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioFacturaGenerico!=null && jComboBoxid_tipo_cambioFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.factura!=null) {
						this.factura.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableFactura.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableFacturaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableFacturaGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableFacturaGenerico!=null && jComboBoxid_asiento_contableFacturaGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPedidoForeignKey(Long idPedidoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pedido  pedidoTemp=null;

			for(Pedido pedidoAux:pedidosForeignKey) {
				if(pedidoAux.getId()!=null && pedidoAux.getId().equals(idPedidoSeleccionado)) {
					pedidoTemp=pedidoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(pedidoTemp!=null) {

					if(this.factura!=null) {
						this.factura.setPedido(pedidoTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setSelectedItem(pedidoTemp);
					}
				} else {
					//jComboBoxid_pedidoFactura.setSelectedItem(pedidoTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPedido") || sFormularioTipoBusqueda.equals("Todos")){
					if(pedidoTemp!=null && jComboBoxid_pedidoFK_IdPedidoFactura!=null) {
						jComboBoxid_pedidoFK_IdPedidoFactura.setSelectedItem(pedidoTemp);
					} else {
						if(jComboBoxid_pedidoFK_IdPedidoFactura!=null) {
							//jComboBoxid_pedidoFK_IdPedidoFactura.setSelectedItem(pedidoTemp);
							if(jComboBoxid_pedidoFK_IdPedidoFactura.getItemCount()>0) {
								jComboBoxid_pedidoFK_IdPedidoFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPedidoForeignKeyDescripcion(Long idPedidoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pedido  pedidoTemp=null;

			for(Pedido pedidoAux:pedidosForeignKey) {
				if(pedidoAux.getId()!=null && pedidoAux.getId().equals(idPedidoSeleccionado)) {
					pedidoTemp=pedidoAux;
					break;
				}
			}


			sDescripcion=PedidoConstantesFunciones.getPedidoDescripcion(pedidoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPedidoForeignKeyGenerico(Long idPedidoSeleccionado,JComboBox jComboBoxid_pedidoFacturaGenerico)throws Exception
	{
		try
		{
			Pedido  pedidoTemp=null;

			for(Pedido pedidoAux:pedidosForeignKey) {
				if(pedidoAux.getId()!=null && pedidoAux.getId().equals(idPedidoSeleccionado)) {
					pedidoTemp=pedidoAux;
					break;
				}
			}

			if(pedidoTemp!=null) {
				jComboBoxid_pedidoFacturaGenerico.setSelectedItem(pedidoTemp);
			} else {
				if(jComboBoxid_pedidoFacturaGenerico!=null && jComboBoxid_pedidoFacturaGenerico.getItemCount()>0) {
					jComboBoxid_pedidoFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualResponsableForeignKey(Long idResponsableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(responsableTemp!=null) {

					if(this.factura!=null) {
						this.factura.setResponsable(responsableTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setSelectedItem(responsableTemp);
					}
				} else {
					//jComboBoxid_responsableFactura.setSelectedItem(responsableTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdResponsable") || sFormularioTipoBusqueda.equals("Todos")){
					if(responsableTemp!=null && jComboBoxid_responsableFK_IdResponsableFactura!=null) {
						jComboBoxid_responsableFK_IdResponsableFactura.setSelectedItem(responsableTemp);
					} else {
						if(jComboBoxid_responsableFK_IdResponsableFactura!=null) {
							//jComboBoxid_responsableFK_IdResponsableFactura.setSelectedItem(responsableTemp);
							if(jComboBoxid_responsableFK_IdResponsableFactura.getItemCount()>0) {
								jComboBoxid_responsableFK_IdResponsableFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualResponsableForeignKeyDescripcion(Long idResponsableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}


			sDescripcion=ResponsableConstantesFunciones.getResponsableDescripcion(responsableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualResponsableForeignKeyGenerico(Long idResponsableSeleccionado,JComboBox jComboBoxid_responsableFacturaGenerico)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(responsableTemp!=null) {
				jComboBoxid_responsableFacturaGenerico.setSelectedItem(responsableTemp);
			} else {
				if(jComboBoxid_responsableFacturaGenerico!=null && jComboBoxid_responsableFacturaGenerico.getItemCount()>0) {
					jComboBoxid_responsableFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoFisicoFacturaEmpresaForeignKey(Long idEstadoFisicoFacturaEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoFisicoFacturaEmpresa  estadofisicofacturaempresaTemp=null;

			for(EstadoFisicoFacturaEmpresa estadofisicofacturaempresaAux:estadofisicofacturaempresasForeignKey) {
				if(estadofisicofacturaempresaAux.getId()!=null && estadofisicofacturaempresaAux.getId().equals(idEstadoFisicoFacturaEmpresaSeleccionado)) {
					estadofisicofacturaempresaTemp=estadofisicofacturaempresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadofisicofacturaempresaTemp!=null) {

					if(this.factura!=null) {
						this.factura.setEstadoFisicoFacturaEmpresa(estadofisicofacturaempresaTemp);
					}

					if(this.jInternalFrameDetalleFormFactura!=null) {
						this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedItem(estadofisicofacturaempresaTemp);
					}
				} else {
					//jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedItem(estadofisicofacturaempresaTemp);
					if(this.jInternalFrameDetalleFormFactura!=null) {
						if(this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoFisicoFacturaEmpresa") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadofisicofacturaempresaTemp!=null && jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura!=null) {
						jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.setSelectedItem(estadofisicofacturaempresaTemp);
					} else {
						if(jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura!=null) {
							//jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.setSelectedItem(estadofisicofacturaempresaTemp);
							if(jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.getItemCount()>0) {
								jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoFisicoFacturaEmpresaForeignKeyDescripcion(Long idEstadoFisicoFacturaEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoFisicoFacturaEmpresa  estadofisicofacturaempresaTemp=null;

			for(EstadoFisicoFacturaEmpresa estadofisicofacturaempresaAux:estadofisicofacturaempresasForeignKey) {
				if(estadofisicofacturaempresaAux.getId()!=null && estadofisicofacturaempresaAux.getId().equals(idEstadoFisicoFacturaEmpresaSeleccionado)) {
					estadofisicofacturaempresaTemp=estadofisicofacturaempresaAux;
					break;
				}
			}


			sDescripcion=EstadoFisicoFacturaEmpresaConstantesFunciones.getEstadoFisicoFacturaEmpresaDescripcion(estadofisicofacturaempresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoFisicoFacturaEmpresaForeignKeyGenerico(Long idEstadoFisicoFacturaEmpresaSeleccionado,JComboBox jComboBoxid_estado_fisico_factura_empresaFacturaGenerico)throws Exception
	{
		try
		{
			EstadoFisicoFacturaEmpresa  estadofisicofacturaempresaTemp=null;

			for(EstadoFisicoFacturaEmpresa estadofisicofacturaempresaAux:estadofisicofacturaempresasForeignKey) {
				if(estadofisicofacturaempresaAux.getId()!=null && estadofisicofacturaempresaAux.getId().equals(idEstadoFisicoFacturaEmpresaSeleccionado)) {
					estadofisicofacturaempresaTemp=estadofisicofacturaempresaAux;
					break;
				}
			}

			if(estadofisicofacturaempresaTemp!=null) {
				jComboBoxid_estado_fisico_factura_empresaFacturaGenerico.setSelectedItem(estadofisicofacturaempresaTemp);
			} else {
				if(jComboBoxid_estado_fisico_factura_empresaFacturaGenerico!=null && jComboBoxid_estado_fisico_factura_empresaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_estado_fisico_factura_empresaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Factura factura,JComboBox jComboBoxid_empresaFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaFacturaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaFacturaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				factura.setid_empresa(empresaAux.getId());
				factura.setempresa_descripcion(FacturaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				factura.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Factura factura,JComboBox jComboBoxid_sucursalFacturaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalFacturaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalFacturaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				factura.setid_sucursal(sucursalAux.getId());
				factura.setsucursal_descripcion(FacturaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				factura.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(Factura factura,JComboBox jComboBoxid_ejercicioFacturaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioFacturaGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioFacturaGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				factura.setid_ejercicio(ejercicioAux.getId());
				factura.setejercicio_descripcion(FacturaConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				factura.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(Factura factura,JComboBox jComboBoxid_periodoFacturaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoFacturaGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoFacturaGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				factura.setid_periodo(periodoAux.getId());
				factura.setperiodo_descripcion(FacturaConstantesFunciones.getPeriodoDescripcion(periodoAux));
				factura.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(Factura factura,JComboBox jComboBoxid_anioFacturaGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioFacturaGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioFacturaGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				factura.setid_anio(anioAux.getId());
				factura.setanio_descripcion(FacturaConstantesFunciones.getAnioDescripcion(anioAux));
				factura.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(Factura factura,JComboBox jComboBoxid_mesFacturaGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesFacturaGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesFacturaGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				factura.setid_mes(mesAux.getId());
				factura.setmes_descripcion(FacturaConstantesFunciones.getMesDescripcion(mesAux));
				factura.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(Factura factura,JComboBox jComboBoxid_usuarioFacturaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioFacturaGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioFacturaGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				factura.setid_usuario(usuarioAux.getId());
				factura.setusuario_descripcion(FacturaConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				factura.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(Factura factura,JComboBox jComboBoxid_monedaFacturaGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaFacturaGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaFacturaGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				factura.setid_moneda(monedaAux.getId());
				factura.setmoneda_descripcion(FacturaConstantesFunciones.getMonedaDescripcion(monedaAux));
				factura.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(Factura factura,JComboBox jComboBoxid_empleadoFacturaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoFacturaGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoFacturaGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				factura.setid_empleado(empleadoAux.getId());
				factura.setempleado_descripcion(FacturaConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				factura.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(Factura factura,JComboBox jComboBoxid_formatoFacturaGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoFacturaGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoFacturaGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				factura.setid_formato(formatoAux.getId());
				factura.setformato_descripcion(FacturaConstantesFunciones.getFormatoDescripcion(formatoAux));
				factura.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(Factura factura,JComboBox jComboBoxid_clienteFacturaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteFacturaGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteFacturaGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				factura.setid_cliente(clienteAux.getId());
				factura.setcliente_descripcion(FacturaConstantesFunciones.getClienteDescripcion(clienteAux));
				factura.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(Factura factura,JComboBox jComboBoxid_tipo_precioFacturaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioFacturaGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioFacturaGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				factura.setid_tipo_precio(tipoprecioAux.getId());
				factura.settipoprecio_descripcion(FacturaConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				factura.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSubClienteForeignKey(Factura factura,JComboBox jComboBoxid_sub_clienteFacturaGenerico)throws Exception
	{
		try
		{
			SubCliente  subclienteAux=new SubCliente();

			if(jComboBoxid_sub_clienteFacturaGenerico==null) {
				subclienteAux=(SubCliente)this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.getSelectedItem();
			} else {
				subclienteAux=(SubCliente)jComboBoxid_sub_clienteFacturaGenerico.getSelectedItem();
			}

			if(subclienteAux!=null) {
				factura.setid_sub_cliente(subclienteAux.getId());
				factura.setsubcliente_descripcion(FacturaConstantesFunciones.getSubClienteDescripcion(subclienteAux));
				factura.setSubCliente(subclienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(Factura factura,JComboBox jComboBoxid_vendedorFacturaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorFacturaGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorFacturaGenerico.getSelectedItem();
			}

			if(vendedorAux!=null && vendedorAux.getId()!=null) {
				factura.setid_vendedor(vendedorAux.getId());
				factura.setvendedor_descripcion(FacturaConstantesFunciones.getVendedorDescripcion(vendedorAux));
				factura.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransporteForeignKey(Factura factura,JComboBox jComboBoxid_transporteFacturaGenerico)throws Exception
	{
		try
		{
			Transporte  transporteAux=new Transporte();

			if(jComboBoxid_transporteFacturaGenerico==null) {
				transporteAux=(Transporte)this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.getSelectedItem();
			} else {
				transporteAux=(Transporte)jComboBoxid_transporteFacturaGenerico.getSelectedItem();
			}

			if(transporteAux!=null) {
				factura.setid_transporte(transporteAux.getId());
				factura.settransporte_descripcion(FacturaConstantesFunciones.getTransporteDescripcion(transporteAux));
				factura.setTransporte(transporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(Factura factura,JComboBox jComboBoxid_transportistaFacturaGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaFacturaGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaFacturaGenerico.getSelectedItem();
			}

			if(transportistaAux!=null) {
				factura.setid_transportista(transportistaAux.getId());
				factura.settransportista_descripcion(FacturaConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				factura.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoLlamadaForeignKey(Factura factura,JComboBox jComboBoxid_tipo_llamadaFacturaGenerico)throws Exception
	{
		try
		{
			TipoLlamada  tipollamadaAux=new TipoLlamada();

			if(jComboBoxid_tipo_llamadaFacturaGenerico==null) {
				tipollamadaAux=(TipoLlamada)this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.getSelectedItem();
			} else {
				tipollamadaAux=(TipoLlamada)jComboBoxid_tipo_llamadaFacturaGenerico.getSelectedItem();
			}

			if(tipollamadaAux!=null && tipollamadaAux.getId()!=null) {
				factura.setid_tipo_llamada(tipollamadaAux.getId());
				factura.settipollamada_descripcion(FacturaConstantesFunciones.getTipoLlamadaDescripcion(tipollamadaAux));
				factura.setTipoLlamada(tipollamadaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoFacturaForeignKey(Factura factura,JComboBox jComboBoxid_tipo_facturaFacturaGenerico)throws Exception
	{
		try
		{
			TipoFactura  tipofacturaAux=new TipoFactura();

			if(jComboBoxid_tipo_facturaFacturaGenerico==null) {
				tipofacturaAux=(TipoFactura)this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.getSelectedItem();
			} else {
				tipofacturaAux=(TipoFactura)jComboBoxid_tipo_facturaFacturaGenerico.getSelectedItem();
			}

			if(tipofacturaAux!=null && tipofacturaAux.getId()!=null) {
				factura.setid_tipo_factura(tipofacturaAux.getId());
				factura.settipofactura_descripcion(FacturaConstantesFunciones.getTipoFacturaDescripcion(tipofacturaAux));
				factura.setTipoFactura(tipofacturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(Factura factura,JComboBox jComboBoxid_tipo_cambioFacturaGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioFacturaGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioFacturaGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				factura.setid_tipo_cambio(tipocambioAux.getId());
				factura.settipocambio_descripcion(FacturaConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				factura.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(Factura factura,JComboBox jComboBoxid_asiento_contableFacturaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableFacturaGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableFacturaGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null) {
				factura.setid_asiento_contable(asientocontableAux.getId());
				factura.setasientocontable_descripcion(FacturaConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				factura.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPedidoForeignKey(Factura factura,JComboBox jComboBoxid_pedidoFacturaGenerico)throws Exception
	{
		try
		{
			Pedido  pedidoAux=new Pedido();

			if(jComboBoxid_pedidoFacturaGenerico==null) {
				pedidoAux=(Pedido)this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.getSelectedItem();
			} else {
				pedidoAux=(Pedido)jComboBoxid_pedidoFacturaGenerico.getSelectedItem();
			}

			if(pedidoAux!=null) {
				factura.setid_pedido(pedidoAux.getId());
				factura.setpedido_descripcion(FacturaConstantesFunciones.getPedidoDescripcion(pedidoAux));
				factura.setPedido(pedidoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarResponsableForeignKey(Factura factura,JComboBox jComboBoxid_responsableFacturaGenerico)throws Exception
	{
		try
		{
			Responsable  responsableAux=new Responsable();

			if(jComboBoxid_responsableFacturaGenerico==null) {
				responsableAux=(Responsable)this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.getSelectedItem();
			} else {
				responsableAux=(Responsable)jComboBoxid_responsableFacturaGenerico.getSelectedItem();
			}

			if(responsableAux!=null) {
				factura.setid_responsable(responsableAux.getId());
				factura.setresponsable_descripcion(FacturaConstantesFunciones.getResponsableDescripcion(responsableAux));
				factura.setResponsable(responsableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoFisicoFacturaEmpresaForeignKey(Factura factura,JComboBox jComboBoxid_estado_fisico_factura_empresaFacturaGenerico)throws Exception
	{
		try
		{
			EstadoFisicoFacturaEmpresa  estadofisicofacturaempresaAux=new EstadoFisicoFacturaEmpresa();

			if(jComboBoxid_estado_fisico_factura_empresaFacturaGenerico==null) {
				estadofisicofacturaempresaAux=(EstadoFisicoFacturaEmpresa)this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.getSelectedItem();
			} else {
				estadofisicofacturaempresaAux=(EstadoFisicoFacturaEmpresa)jComboBoxid_estado_fisico_factura_empresaFacturaGenerico.getSelectedItem();
			}

			if(estadofisicofacturaempresaAux!=null) {
				factura.setid_estado_fisico_factura_empresa(estadofisicofacturaempresaAux.getId());
				factura.setestadofisicofacturaempresa_descripcion(FacturaConstantesFunciones.getEstadoFisicoFacturaEmpresaDescripcion(estadofisicofacturaempresaAux));
				factura.setEstadoFisicoFacturaEmpresa(estadofisicofacturaempresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteFactura.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteFactura.addItem(cliente);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSubClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSubCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.removeAllItems();

							for(SubCliente subcliente:this.subclientesForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.addItem(subcliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdSubCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.removeAllItems();

							for(SubCliente subcliente:this.subclientesForeignKey) {
								this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.addItem(subcliente);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorFactura.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorFactura.addItem(vendedor);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.removeAllItems();

							for(Transporte transporte:this.transportesForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.addItem(transporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaFactura.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jComboBoxid_transportistaFK_IdTransportistaFactura.addItem(transportista);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoLlamadasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoLlamada=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.removeAllItems();

							for(TipoLlamada tipollamada:this.tipollamadasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.addItem(tipollamada);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.removeAllItems();

							for(TipoFactura tipofactura:this.tipofacturasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.addItem(tipofactura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePedidosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPedido=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.removeAllItems();

							for(Pedido pedido:this.pedidosForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.addItem(pedido);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPedido") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_pedidoFK_IdPedidoFactura.removeAllItems();

							for(Pedido pedido:this.pedidosForeignKey) {
								this.jComboBoxid_pedidoFK_IdPedidoFactura.addItem(pedido);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameResponsablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingResponsable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.removeAllItems();

							for(Responsable responsable:this.responsablesForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.addItem(responsable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdResponsable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_responsableFK_IdResponsableFactura.removeAllItems();

							for(Responsable responsable:this.responsablesForeignKey) {
								this.jComboBoxid_responsableFK_IdResponsableFactura.addItem(responsable);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoFisicoFacturaEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) { 
							this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.removeAllItems();

							for(EstadoFisicoFacturaEmpresa estadofisicofacturaempresa:this.estadofisicofacturaempresasForeignKey) {
								this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.addItem(estadofisicofacturaempresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFactura!=null) { 
					}

					if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoFisicoFacturaEmpresa") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.removeAllItems();

							for(EstadoFisicoFacturaEmpresa estadofisicofacturaempresa:this.estadofisicofacturaempresasForeignKey) {
								this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.addItem(estadofisicofacturaempresa);
							}
						}

						if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteFactura.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSubClienteForeignKey(SubCliente subcliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setSelectedItem(subcliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.setSelectedItem(subcliente);
						} else {
							this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorFactura.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransporteForeignKey(Transporte transporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setSelectedItem(transporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transportistaFK_IdTransportistaFactura.setSelectedItem(transportista);
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoLlamadaForeignKey(TipoLlamada tipollamada,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setSelectedItem(tipollamada);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoFacturaForeignKey(TipoFactura tipofactura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setSelectedItem(tipofactura);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePedidoForeignKey(Pedido pedido,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setSelectedItem(pedido);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_pedidoFK_IdPedidoFactura.setSelectedItem(pedido);
						} else {
							this.jComboBoxid_pedidoFK_IdPedidoFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameResponsableForeignKey(Responsable responsable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setSelectedItem(responsable);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_responsableFK_IdResponsableFactura.setSelectedItem(responsable);
						} else {
							this.jComboBoxid_responsableFK_IdResponsableFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoFisicoFacturaEmpresaForeignKey(EstadoFisicoFacturaEmpresa estadofisicofacturaempresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedItem(estadofisicofacturaempresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFactura!=null) {
							this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.setSelectedItem(estadofisicofacturaempresa);
						} else {
							this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesFactura() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			FacturaConstantesFunciones.refrescarForeignKeysDescripcionesFactura(this.facturaLogic.getFacturas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			FacturaConstantesFunciones.refrescarForeignKeysDescripcionesFactura(this.facturas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(SubCliente.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Transporte.class));
		classes.add(new Classe(Transportista.class));
		classes.add(new Classe(TipoLlamada.class));
		classes.add(new Classe(TipoFactura.class));
		classes.add(new Classe(TipoCambio.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(Pedido.class));
		classes.add(new Classe(Responsable.class));
		classes.add(new Classe(EstadoFisicoFacturaEmpresa.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//facturaLogic.setFacturas(this.facturas);
			facturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public FacturaParameterReturnGeneral getFacturaParameterGeneral() {
		return this.facturaParameterGeneral;
	}
	
	public void setFacturaParameterGeneral(FacturaParameterReturnGeneral facturaParameterGeneral) {
		this.facturaParameterGeneral = facturaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoFactura() {
		return isPermisoTodoFactura;
	}

	public void setIsPermisoTodoFactura(Boolean isPermisoTodoFactura) {
		this.isPermisoTodoFactura = isPermisoTodoFactura;
	}

	public Boolean getIsPermisoNuevoFactura() {
		return isPermisoNuevoFactura;
	}

	public void setIsPermisoNuevoFactura(Boolean isPermisoNuevoFactura) {
		this.isPermisoNuevoFactura = isPermisoNuevoFactura;
	}

	public Boolean getIsPermisoActualizarFactura() {
		return isPermisoActualizarFactura;
	}

	public void setIsPermisoActualizarFactura(Boolean isPermisoActualizarFactura) {
		this.isPermisoActualizarFactura = isPermisoActualizarFactura;
	}

	public Boolean getIsPermisoEliminarFactura() {
		return isPermisoEliminarFactura;
	}

	public void setIsPermisoEliminarFactura(Boolean isPermisoEliminarFactura) {
		this.isPermisoEliminarFactura = isPermisoEliminarFactura;
	}

	public Boolean getIsPermisoGuardarCambiosFactura() {
		return isPermisoGuardarCambiosFactura;
	}

	public void setIsPermisoGuardarCambiosFactura(Boolean isPermisoGuardarCambiosFactura) {
		this.isPermisoGuardarCambiosFactura = isPermisoGuardarCambiosFactura;
	}
	
	public Boolean getIsPermisoConsultaFactura() {
		return isPermisoConsultaFactura;
	}

	public void setIsPermisoConsultaFactura(Boolean isPermisoConsultaFactura) {
		this.isPermisoConsultaFactura = isPermisoConsultaFactura;
	}

	public Boolean getIsPermisoBusquedaFactura() {
		return isPermisoBusquedaFactura;
	}

	public void setIsPermisoBusquedaFactura(Boolean isPermisoBusquedaFactura) {
		this.isPermisoBusquedaFactura = isPermisoBusquedaFactura;
	}

	public Boolean getIsPermisoReporteFactura() {
		return isPermisoReporteFactura;
	}

	public void setIsPermisoReporteFactura(Boolean isPermisoReporteFactura) {
		this.isPermisoReporteFactura = isPermisoReporteFactura;
	}
	
	public Boolean getIsPermisoPaginacionMedioFactura() {
		return isPermisoPaginacionMedioFactura;
	}

	public void setIsPermisoPaginacionMedioFactura(Boolean isPermisoPaginacionMedioFactura) {
		this.isPermisoPaginacionMedioFactura = isPermisoPaginacionMedioFactura;
	}
	
	public Boolean getIsPermisoPaginacionTodoFactura() {
		return isPermisoPaginacionTodoFactura;
	}

	public void setIsPermisoPaginacionTodoFactura(Boolean isPermisoPaginacionTodoFactura) {
		this.isPermisoPaginacionTodoFactura = isPermisoPaginacionTodoFactura;
	}
	
	public Boolean getIsPermisoPaginacionAltoFactura() {
		return isPermisoPaginacionAltoFactura;
	}

	public void setIsPermisoPaginacionAltoFactura(Boolean isPermisoPaginacionAltoFactura) {
		this.isPermisoPaginacionAltoFactura = isPermisoPaginacionAltoFactura;
	}
	
	public Boolean getIsPermisoCopiarFactura() {
		return isPermisoCopiarFactura;
	}

	public void setIsPermisoCopiarFactura(Boolean isPermisoCopiarFactura) {
		this.isPermisoCopiarFactura = isPermisoCopiarFactura;
	}
	
	public Boolean getIsPermisoVerFormFactura() {
		return isPermisoVerFormFactura;
	}

	public void setIsPermisoVerFormFactura(Boolean isPermisoVerFormFactura) {
		this.isPermisoVerFormFactura = isPermisoVerFormFactura;
	}
	
	public Boolean getIsPermisoDuplicarFactura() {
		return isPermisoDuplicarFactura;
	}

	public void setIsPermisoDuplicarFactura(Boolean isPermisoDuplicarFactura) {
		this.isPermisoDuplicarFactura = isPermisoDuplicarFactura;
	}
	
	public Boolean getIsPermisoOrdenFactura() {
		return isPermisoOrdenFactura;
	}

	public void setIsPermisoOrdenFactura(Boolean isPermisoOrdenFactura) {
		this.isPermisoOrdenFactura = isPermisoOrdenFactura;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoFactura() {
		return isVisibilidadCeldaNuevoFactura;
	}

	public void setIsVisibilidadCeldaNuevoFactura(Boolean isVisibilidadCeldaNuevoFactura) {
		this.isVisibilidadCeldaNuevoFactura = isVisibilidadCeldaNuevoFactura;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarFactura() {
		return isVisibilidadCeldaDuplicarFactura;
	}

	public void setIsVisibilidadCeldaDuplicarFactura(Boolean isVisibilidadCeldaDuplicarFactura) {
		this.isVisibilidadCeldaDuplicarFactura = isVisibilidadCeldaDuplicarFactura;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarFactura() {
		return isVisibilidadCeldaCopiarFactura;
	}

	public void setIsVisibilidadCeldaCopiarFactura(Boolean isVisibilidadCeldaCopiarFactura) {
		this.isVisibilidadCeldaCopiarFactura = isVisibilidadCeldaCopiarFactura;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormFactura() {
		return isVisibilidadCeldaVerFormFactura;
	}

	public void setIsVisibilidadCeldaVerFormFactura(Boolean isVisibilidadCeldaVerFormFactura) {
		this.isVisibilidadCeldaVerFormFactura = isVisibilidadCeldaVerFormFactura;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenFactura() {
		return isVisibilidadCeldaOrdenFactura;
	}

	public void setIsVisibilidadCeldaOrdenFactura(Boolean isVisibilidadCeldaOrdenFactura) {
		this.isVisibilidadCeldaOrdenFactura = isVisibilidadCeldaOrdenFactura;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesFactura() {
		return isVisibilidadCeldaNuevoRelacionesFactura;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesFactura(Boolean isVisibilidadCeldaNuevoRelacionesFactura) {
		this.isVisibilidadCeldaNuevoRelacionesFactura = isVisibilidadCeldaNuevoRelacionesFactura;
	}
	
	public Boolean getIsVisibilidadCeldaModificarFactura() {
		return isVisibilidadCeldaModificarFactura;
	}

	public void setIsVisibilidadCeldaModificarFactura(Boolean isVisibilidadCeldaModificarFactura) {
		this.isVisibilidadCeldaModificarFactura = isVisibilidadCeldaModificarFactura;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarFactura() {
		return isVisibilidadCeldaActualizarFactura;
	}

	public void setIsVisibilidadCeldaActualizarFactura(Boolean isVisibilidadCeldaActualizarFactura) {
		this.isVisibilidadCeldaActualizarFactura = isVisibilidadCeldaActualizarFactura;
	}

	public Boolean getIsVisibilidadCeldaEliminarFactura() {
		return isVisibilidadCeldaEliminarFactura;
	}

	public void setIsVisibilidadCeldaEliminarFactura(Boolean isVisibilidadCeldaEliminarFactura) {
		this.isVisibilidadCeldaEliminarFactura = isVisibilidadCeldaEliminarFactura;
	}

	public Boolean getIsVisibilidadCeldaCancelarFactura() {
		return isVisibilidadCeldaCancelarFactura;
	}

	public void setIsVisibilidadCeldaCancelarFactura(Boolean isVisibilidadCeldaCancelarFactura) {
		this.isVisibilidadCeldaCancelarFactura = isVisibilidadCeldaCancelarFactura;
	}

	public Boolean getIsVisibilidadCeldaGuardarFactura() {
		return isVisibilidadCeldaGuardarFactura;
	}

	public void setIsVisibilidadCeldaGuardarFactura(Boolean isVisibilidadCeldaGuardarFactura) {
		this.isVisibilidadCeldaGuardarFactura = isVisibilidadCeldaGuardarFactura;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosFactura() {
		return isVisibilidadCeldaGuardarCambiosFactura;
	}

	public void setIsVisibilidadCeldaGuardarCambiosFactura(Boolean isVisibilidadCeldaGuardarCambiosFactura) {
		this.isVisibilidadCeldaGuardarCambiosFactura = isVisibilidadCeldaGuardarCambiosFactura;
	}
		
	public FacturaSessionBean getfacturaSessionBean() {
		return this.facturaSessionBean;
	}
	
	public void setfacturaSessionBean(FacturaSessionBean facturaSessionBean) {
		this.facturaSessionBean=facturaSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorNumeroPreImpreso() {
		return this.isVisibilidadBusquedaPorNumeroPreImpreso;
	}

	public void setisVisibilidadBusquedaPorNumeroPreImpreso(Boolean isVisibilidadBusquedaPorNumeroPreImpreso) {
		this.isVisibilidadBusquedaPorNumeroPreImpreso=isVisibilidadBusquedaPorNumeroPreImpreso;
	}

	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoFisicoFacturaEmpresa() {
		return this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa;
	}

	public void setisVisibilidadFK_IdEstadoFisicoFacturaEmpresa(Boolean isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {
		this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isVisibilidadFK_IdEstadoFisicoFacturaEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPedido() {
		return this.isVisibilidadFK_IdPedido;
	}

	public void setisVisibilidadFK_IdPedido(Boolean isVisibilidadFK_IdPedido) {
		this.isVisibilidadFK_IdPedido=isVisibilidadFK_IdPedido;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdResponsable() {
		return this.isVisibilidadFK_IdResponsable;
	}

	public void setisVisibilidadFK_IdResponsable(Boolean isVisibilidadFK_IdResponsable) {
		this.isVisibilidadFK_IdResponsable=isVisibilidadFK_IdResponsable;
	}

	public Boolean getisVisibilidadFK_IdSubCliente() {
		return this.isVisibilidadFK_IdSubCliente;
	}

	public void setisVisibilidadFK_IdSubCliente(Boolean isVisibilidadFK_IdSubCliente) {
		this.isVisibilidadFK_IdSubCliente=isVisibilidadFK_IdSubCliente;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	public Boolean getisVisibilidadFK_IdTipoFactura() {
		return this.isVisibilidadFK_IdTipoFactura;
	}

	public void setisVisibilidadFK_IdTipoFactura(Boolean isVisibilidadFK_IdTipoFactura) {
		this.isVisibilidadFK_IdTipoFactura=isVisibilidadFK_IdTipoFactura;
	}

	public Boolean getisVisibilidadFK_IdTipoLlamada() {
		return this.isVisibilidadFK_IdTipoLlamada;
	}

	public void setisVisibilidadFK_IdTipoLlamada(Boolean isVisibilidadFK_IdTipoLlamada) {
		this.isVisibilidadFK_IdTipoLlamada=isVisibilidadFK_IdTipoLlamada;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdTransporte() {
		return this.isVisibilidadFK_IdTransporte;
	}

	public void setisVisibilidadFK_IdTransporte(Boolean isVisibilidadFK_IdTransporte) {
		this.isVisibilidadFK_IdTransporte=isVisibilidadFK_IdTransporte;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysFactura(Factura factura)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(factura,null);
				this.setActualParaGuardarSucursalForeignKey(factura,null);
				this.setActualParaGuardarEjercicioForeignKey(factura,null);
				this.setActualParaGuardarPeriodoForeignKey(factura,null);
				this.setActualParaGuardarAnioForeignKey(factura,null);
				this.setActualParaGuardarMesForeignKey(factura,null);
				this.setActualParaGuardarUsuarioForeignKey(factura,null);
				this.setActualParaGuardarMonedaForeignKey(factura,null);
				this.setActualParaGuardarEmpleadoForeignKey(factura,null);
				this.setActualParaGuardarFormatoForeignKey(factura,null);
				this.setActualParaGuardarClienteForeignKey(factura,null);
				this.setActualParaGuardarTipoPrecioForeignKey(factura,null);
				this.setActualParaGuardarSubClienteForeignKey(factura,null);
				this.setActualParaGuardarVendedorForeignKey(factura,null);
				this.setActualParaGuardarTransporteForeignKey(factura,null);
				this.setActualParaGuardarTransportistaForeignKey(factura,null);
				this.setActualParaGuardarTipoLlamadaForeignKey(factura,null);
				this.setActualParaGuardarTipoFacturaForeignKey(factura,null);
				this.setActualParaGuardarTipoCambioForeignKey(factura,null);
				this.setActualParaGuardarAsientoContableForeignKey(factura,null);
				this.setActualParaGuardarPedidoForeignKey(factura,null);
				this.setActualParaGuardarResponsableForeignKey(factura,null);
				this.setActualParaGuardarEstadoFisicoFacturaEmpresaForeignKey(factura,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Factura factura,Factura facturaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalFactura(factura);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		facturaAux.setId(factura.getId());
		facturaAux.setVersionRow(factura.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessFactura();
		
			int intSelectedRow = this.jTableDatosFactura.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = facturaValidator.getInvalidValues(this.factura);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			facturaLogic.setDatosCliente(datosCliente);
			facturaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				facturaAux=new  Factura();
				
				facturaAux.setIsNew(true);
				facturaAux.setIsChanged(true);
				
				facturaAux.setFacturaOriginal(this.factura);
				
				facturaAux.setId(this.factura.getId());	
				facturaAux.setVersionRow(this.factura.getVersionRow());	
				facturaAux.setid_empresa(this.factura.getid_empresa());	
				facturaAux.setid_sucursal(this.factura.getid_sucursal());	
				facturaAux.setid_ejercicio(this.factura.getid_ejercicio());	
				facturaAux.setid_periodo(this.factura.getid_periodo());	
				facturaAux.setid_anio(this.factura.getid_anio());	
				facturaAux.setid_mes(this.factura.getid_mes());	
				facturaAux.setid_usuario(this.factura.getid_usuario());	
				facturaAux.setnumero_pre_impreso(this.factura.getnumero_pre_impreso());	
				facturaAux.setfecha_emision(this.factura.getfecha_emision());	
				facturaAux.setnumero_dias(this.factura.getnumero_dias());	
				facturaAux.setfecha_vencimiento(this.factura.getfecha_vencimiento());	
				facturaAux.setid_moneda(this.factura.getid_moneda());	
				facturaAux.setcotizacion(this.factura.getcotizacion());	
				facturaAux.setid_empleado(this.factura.getid_empleado());	
				facturaAux.setid_formato(this.factura.getid_formato());	
				facturaAux.setdireccion(this.factura.getdireccion());	
				facturaAux.setruc(this.factura.getruc());	
				facturaAux.setid_cliente(this.factura.getid_cliente());	
				facturaAux.setid_tipo_precio(this.factura.getid_tipo_precio());	
				facturaAux.settelefono(this.factura.gettelefono());	
				
				if(this.factura.getid_sub_cliente()!=null && this.factura.getid_sub_cliente()>0L) {
					facturaAux.setid_sub_cliente(this.factura.getid_sub_cliente());
				} else {
					facturaAux.setid_sub_cliente(null);
				}	
				facturaAux.setid_vendedor(this.factura.getid_vendedor());	
				
				if(this.factura.getid_transporte()!=null && this.factura.getid_transporte()>0L) {
					facturaAux.setid_transporte(this.factura.getid_transporte());
				} else {
					facturaAux.setid_transporte(null);
				}	
				
				if(this.factura.getid_transportista()!=null && this.factura.getid_transportista()>0L) {
					facturaAux.setid_transportista(this.factura.getid_transportista());
				} else {
					facturaAux.setid_transportista(null);
				}	
				facturaAux.setorden(this.factura.getorden());	
				facturaAux.setid_tipo_llamada(this.factura.getid_tipo_llamada());	
				facturaAux.sethora_inicio(this.factura.gethora_inicio());	
				facturaAux.sethora_fin(this.factura.gethora_fin());	
				facturaAux.setid_tipo_factura(this.factura.getid_tipo_factura());	
				facturaAux.setdescripcion(this.factura.getdescripcion());	
				facturaAux.setcupo(this.factura.getcupo());	
				facturaAux.setsaldo(this.factura.getsaldo());	
				facturaAux.setdocumentos(this.factura.getdocumentos());	
				facturaAux.setdisponible(this.factura.getdisponible());	
				facturaAux.setporcentaje_descuento(this.factura.getporcentaje_descuento());	
				facturaAux.settotal_iva(this.factura.gettotal_iva());	
				facturaAux.setsuman(this.factura.getsuman());	
				facturaAux.setdescuento_valor(this.factura.getdescuento_valor());	
				facturaAux.settotal_sin_iva(this.factura.gettotal_sin_iva());	
				facturaAux.settotal_descuento(this.factura.gettotal_descuento());	
				facturaAux.settotal_flete(this.factura.gettotal_flete());	
				facturaAux.settotal(this.factura.gettotal());	
				facturaAux.setsub_total(this.factura.getsub_total());	
				facturaAux.settotal_otro(this.factura.gettotal_otro());	
				facturaAux.setultimo_costo(this.factura.getultimo_costo());	
				facturaAux.setiva(this.factura.getiva());	
				facturaAux.setdescuento(this.factura.getdescuento());	
				facturaAux.setfinanciamiento(this.factura.getfinanciamiento());	
				facturaAux.setmargen_utilidad(this.factura.getmargen_utilidad());	
				facturaAux.setice(this.factura.getice());	
				facturaAux.setanticipo(this.factura.getanticipo());	
				facturaAux.setotros_valores(this.factura.getotros_valores());	
				facturaAux.settotal_retencion(this.factura.gettotal_retencion());	
				facturaAux.settotal_consumo_especial(this.factura.gettotal_consumo_especial());	
				facturaAux.setretencion(this.factura.getretencion());	
				
				if(this.factura.getid_tipo_cambio()!=null && this.factura.getid_tipo_cambio()>0L) {
					facturaAux.setid_tipo_cambio(this.factura.getid_tipo_cambio());
				} else {
					facturaAux.setid_tipo_cambio(null);
				}	
				facturaAux.setes_cliente(this.factura.getes_cliente());	
				
				if(this.factura.getid_asiento_contable()!=null && this.factura.getid_asiento_contable()>0L) {
					facturaAux.setid_asiento_contable(this.factura.getid_asiento_contable());
				} else {
					facturaAux.setid_asiento_contable(null);
				}	
				
				if(this.factura.getid_pedido()!=null && this.factura.getid_pedido()>0L) {
					facturaAux.setid_pedido(this.factura.getid_pedido());
				} else {
					facturaAux.setid_pedido(null);
				}	
				
				if(this.factura.getid_responsable()!=null && this.factura.getid_responsable()>0L) {
					facturaAux.setid_responsable(this.factura.getid_responsable());
				} else {
					facturaAux.setid_responsable(null);
				}	
				
				if(this.factura.getid_estado_fisico_factura_empresa()!=null && this.factura.getid_estado_fisico_factura_empresa()>0L) {
					facturaAux.setid_estado_fisico_factura_empresa(this.factura.getid_estado_fisico_factura_empresa());
				} else {
					facturaAux.setid_estado_fisico_factura_empresa(null);
				}	
				facturaAux.setfecha(this.factura.getfecha());	
				facturaAux.setfecha_autorizacion(this.factura.getfecha_autorizacion());	
				facturaAux.setfecha_cliente(this.factura.getfecha_cliente());	
				facturaAux.setnumero_documento(this.factura.getnumero_documento());	
				facturaAux.setnumero_dau(this.factura.getnumero_dau());	
				facturaAux.setnumero_referendo(this.factura.getnumero_referendo());	
				facturaAux.setfecha_referendo(this.factura.getfecha_referendo());	
				facturaAux.setaforo_referendo(this.factura.getaforo_referendo());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(facturaAux,facturaLogic.getFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaAux,facturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.facturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.saveFacturas();//WithConnection
						//facturaLogic.getSetVersionRowFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.factura,facturaAux);
					
					this.refrescarForeignKeysDescripcionesFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos().addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas().addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos.addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas.addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaLogic.saveFacturaRelaciones(facturaAux,this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos(),this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());//WithConnection
								//facturaLogic.getSetVersionRowFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.factura,facturaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.setDetaFormaPagos(new ArrayList<DetaFormaPago>());
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos= new ArrayList<DetaFormaPago>();
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas= new ArrayList<DetalleFactura>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos());

							if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaAux,facturaLogic.getFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaAux,facturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.factura,facturaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				facturaAux=new  Factura();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.facturaSessionBean.getEsGuardarRelacionado() 
					|| (this.facturaSessionBean.getEsGuardarRelacionado() && this.factura.getId()>=0)) {
						
					facturaAux.setIsNew(false);
				}
				
				facturaAux.setIsDeleted(false);
			
				facturaAux.setId(this.factura.getId());	
				facturaAux.setVersionRow(this.factura.getVersionRow());	
				facturaAux.setid_empresa(this.factura.getid_empresa());	
				facturaAux.setid_sucursal(this.factura.getid_sucursal());	
				facturaAux.setid_ejercicio(this.factura.getid_ejercicio());	
				facturaAux.setid_periodo(this.factura.getid_periodo());	
				facturaAux.setid_anio(this.factura.getid_anio());	
				facturaAux.setid_mes(this.factura.getid_mes());	
				facturaAux.setid_usuario(this.factura.getid_usuario());	
				facturaAux.setnumero_pre_impreso(this.factura.getnumero_pre_impreso());	
				facturaAux.setfecha_emision(this.factura.getfecha_emision());	
				facturaAux.setnumero_dias(this.factura.getnumero_dias());	
				facturaAux.setfecha_vencimiento(this.factura.getfecha_vencimiento());	
				facturaAux.setid_moneda(this.factura.getid_moneda());	
				facturaAux.setcotizacion(this.factura.getcotizacion());	
				facturaAux.setid_empleado(this.factura.getid_empleado());	
				facturaAux.setid_formato(this.factura.getid_formato());	
				facturaAux.setdireccion(this.factura.getdireccion());	
				facturaAux.setruc(this.factura.getruc());	
				facturaAux.setid_cliente(this.factura.getid_cliente());	
				facturaAux.setid_tipo_precio(this.factura.getid_tipo_precio());	
				facturaAux.settelefono(this.factura.gettelefono());	
				
				if(this.factura.getid_sub_cliente()!=null && this.factura.getid_sub_cliente()>0L) {
					facturaAux.setid_sub_cliente(this.factura.getid_sub_cliente());
				} else {
					facturaAux.setid_sub_cliente(null);
				}	
				facturaAux.setid_vendedor(this.factura.getid_vendedor());	
				
				if(this.factura.getid_transporte()!=null && this.factura.getid_transporte()>0L) {
					facturaAux.setid_transporte(this.factura.getid_transporte());
				} else {
					facturaAux.setid_transporte(null);
				}	
				
				if(this.factura.getid_transportista()!=null && this.factura.getid_transportista()>0L) {
					facturaAux.setid_transportista(this.factura.getid_transportista());
				} else {
					facturaAux.setid_transportista(null);
				}	
				facturaAux.setorden(this.factura.getorden());	
				facturaAux.setid_tipo_llamada(this.factura.getid_tipo_llamada());	
				facturaAux.sethora_inicio(this.factura.gethora_inicio());	
				facturaAux.sethora_fin(this.factura.gethora_fin());	
				facturaAux.setid_tipo_factura(this.factura.getid_tipo_factura());	
				facturaAux.setdescripcion(this.factura.getdescripcion());	
				facturaAux.setcupo(this.factura.getcupo());	
				facturaAux.setsaldo(this.factura.getsaldo());	
				facturaAux.setdocumentos(this.factura.getdocumentos());	
				facturaAux.setdisponible(this.factura.getdisponible());	
				facturaAux.setporcentaje_descuento(this.factura.getporcentaje_descuento());	
				facturaAux.settotal_iva(this.factura.gettotal_iva());	
				facturaAux.setsuman(this.factura.getsuman());	
				facturaAux.setdescuento_valor(this.factura.getdescuento_valor());	
				facturaAux.settotal_sin_iva(this.factura.gettotal_sin_iva());	
				facturaAux.settotal_descuento(this.factura.gettotal_descuento());	
				facturaAux.settotal_flete(this.factura.gettotal_flete());	
				facturaAux.settotal(this.factura.gettotal());	
				facturaAux.setsub_total(this.factura.getsub_total());	
				facturaAux.settotal_otro(this.factura.gettotal_otro());	
				facturaAux.setultimo_costo(this.factura.getultimo_costo());	
				facturaAux.setiva(this.factura.getiva());	
				facturaAux.setdescuento(this.factura.getdescuento());	
				facturaAux.setfinanciamiento(this.factura.getfinanciamiento());	
				facturaAux.setmargen_utilidad(this.factura.getmargen_utilidad());	
				facturaAux.setice(this.factura.getice());	
				facturaAux.setanticipo(this.factura.getanticipo());	
				facturaAux.setotros_valores(this.factura.getotros_valores());	
				facturaAux.settotal_retencion(this.factura.gettotal_retencion());	
				facturaAux.settotal_consumo_especial(this.factura.gettotal_consumo_especial());	
				facturaAux.setretencion(this.factura.getretencion());	
				
				if(this.factura.getid_tipo_cambio()!=null && this.factura.getid_tipo_cambio()>0L) {
					facturaAux.setid_tipo_cambio(this.factura.getid_tipo_cambio());
				} else {
					facturaAux.setid_tipo_cambio(null);
				}	
				facturaAux.setes_cliente(this.factura.getes_cliente());	
				
				if(this.factura.getid_asiento_contable()!=null && this.factura.getid_asiento_contable()>0L) {
					facturaAux.setid_asiento_contable(this.factura.getid_asiento_contable());
				} else {
					facturaAux.setid_asiento_contable(null);
				}	
				
				if(this.factura.getid_pedido()!=null && this.factura.getid_pedido()>0L) {
					facturaAux.setid_pedido(this.factura.getid_pedido());
				} else {
					facturaAux.setid_pedido(null);
				}	
				
				if(this.factura.getid_responsable()!=null && this.factura.getid_responsable()>0L) {
					facturaAux.setid_responsable(this.factura.getid_responsable());
				} else {
					facturaAux.setid_responsable(null);
				}	
				
				if(this.factura.getid_estado_fisico_factura_empresa()!=null && this.factura.getid_estado_fisico_factura_empresa()>0L) {
					facturaAux.setid_estado_fisico_factura_empresa(this.factura.getid_estado_fisico_factura_empresa());
				} else {
					facturaAux.setid_estado_fisico_factura_empresa(null);
				}	
				facturaAux.setfecha(this.factura.getfecha());	
				facturaAux.setfecha_autorizacion(this.factura.getfecha_autorizacion());	
				facturaAux.setfecha_cliente(this.factura.getfecha_cliente());	
				facturaAux.setnumero_documento(this.factura.getnumero_documento());	
				facturaAux.setnumero_dau(this.factura.getnumero_dau());	
				facturaAux.setnumero_referendo(this.factura.getnumero_referendo());	
				facturaAux.setfecha_referendo(this.factura.getfecha_referendo());	
				facturaAux.setaforo_referendo(this.factura.getaforo_referendo());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaAux,facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaAux,facturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.facturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.saveFacturas();//WithConnection
						//facturaLogic.getSetVersionRowFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.factura,facturaAux);
					
					this.refrescarForeignKeysDescripcionesFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos().addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas().addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos.addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas.addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaLogic.saveFacturaRelaciones(facturaAux,this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos(),this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());//WithConnection
								//facturaLogic.getSetVersionRowFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.factura,facturaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.setDetaFormaPagos(new ArrayList<DetaFormaPago>());
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos= new ArrayList<DetaFormaPago>();
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas= new ArrayList<DetalleFactura>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos());

							if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaAux,facturaLogic.getFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaAux,facturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.factura,facturaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				facturaAux=new  Factura();
				
				facturaAux.setIsNew(false);
				facturaAux.setIsChanged(false);
				
				facturaAux.setIsDeleted(true);
				
				facturaAux.setId(this.factura.getId());	
				facturaAux.setVersionRow(this.factura.getVersionRow());	
				facturaAux.setid_empresa(this.factura.getid_empresa());	
				facturaAux.setid_sucursal(this.factura.getid_sucursal());	
				facturaAux.setid_ejercicio(this.factura.getid_ejercicio());	
				facturaAux.setid_periodo(this.factura.getid_periodo());	
				facturaAux.setid_anio(this.factura.getid_anio());	
				facturaAux.setid_mes(this.factura.getid_mes());	
				facturaAux.setid_usuario(this.factura.getid_usuario());	
				facturaAux.setnumero_pre_impreso(this.factura.getnumero_pre_impreso());	
				facturaAux.setfecha_emision(this.factura.getfecha_emision());	
				facturaAux.setnumero_dias(this.factura.getnumero_dias());	
				facturaAux.setfecha_vencimiento(this.factura.getfecha_vencimiento());	
				facturaAux.setid_moneda(this.factura.getid_moneda());	
				facturaAux.setcotizacion(this.factura.getcotizacion());	
				facturaAux.setid_empleado(this.factura.getid_empleado());	
				facturaAux.setid_formato(this.factura.getid_formato());	
				facturaAux.setdireccion(this.factura.getdireccion());	
				facturaAux.setruc(this.factura.getruc());	
				facturaAux.setid_cliente(this.factura.getid_cliente());	
				facturaAux.setid_tipo_precio(this.factura.getid_tipo_precio());	
				facturaAux.settelefono(this.factura.gettelefono());	
				
				if(this.factura.getid_sub_cliente()!=null && this.factura.getid_sub_cliente()>0L) {
					facturaAux.setid_sub_cliente(this.factura.getid_sub_cliente());
				} else {
					facturaAux.setid_sub_cliente(null);
				}	
				facturaAux.setid_vendedor(this.factura.getid_vendedor());	
				
				if(this.factura.getid_transporte()!=null && this.factura.getid_transporte()>0L) {
					facturaAux.setid_transporte(this.factura.getid_transporte());
				} else {
					facturaAux.setid_transporte(null);
				}	
				
				if(this.factura.getid_transportista()!=null && this.factura.getid_transportista()>0L) {
					facturaAux.setid_transportista(this.factura.getid_transportista());
				} else {
					facturaAux.setid_transportista(null);
				}	
				facturaAux.setorden(this.factura.getorden());	
				facturaAux.setid_tipo_llamada(this.factura.getid_tipo_llamada());	
				facturaAux.sethora_inicio(this.factura.gethora_inicio());	
				facturaAux.sethora_fin(this.factura.gethora_fin());	
				facturaAux.setid_tipo_factura(this.factura.getid_tipo_factura());	
				facturaAux.setdescripcion(this.factura.getdescripcion());	
				facturaAux.setcupo(this.factura.getcupo());	
				facturaAux.setsaldo(this.factura.getsaldo());	
				facturaAux.setdocumentos(this.factura.getdocumentos());	
				facturaAux.setdisponible(this.factura.getdisponible());	
				facturaAux.setporcentaje_descuento(this.factura.getporcentaje_descuento());	
				facturaAux.settotal_iva(this.factura.gettotal_iva());	
				facturaAux.setsuman(this.factura.getsuman());	
				facturaAux.setdescuento_valor(this.factura.getdescuento_valor());	
				facturaAux.settotal_sin_iva(this.factura.gettotal_sin_iva());	
				facturaAux.settotal_descuento(this.factura.gettotal_descuento());	
				facturaAux.settotal_flete(this.factura.gettotal_flete());	
				facturaAux.settotal(this.factura.gettotal());	
				facturaAux.setsub_total(this.factura.getsub_total());	
				facturaAux.settotal_otro(this.factura.gettotal_otro());	
				facturaAux.setultimo_costo(this.factura.getultimo_costo());	
				facturaAux.setiva(this.factura.getiva());	
				facturaAux.setdescuento(this.factura.getdescuento());	
				facturaAux.setfinanciamiento(this.factura.getfinanciamiento());	
				facturaAux.setmargen_utilidad(this.factura.getmargen_utilidad());	
				facturaAux.setice(this.factura.getice());	
				facturaAux.setanticipo(this.factura.getanticipo());	
				facturaAux.setotros_valores(this.factura.getotros_valores());	
				facturaAux.settotal_retencion(this.factura.gettotal_retencion());	
				facturaAux.settotal_consumo_especial(this.factura.gettotal_consumo_especial());	
				facturaAux.setretencion(this.factura.getretencion());	
				
				if(this.factura.getid_tipo_cambio()!=null && this.factura.getid_tipo_cambio()>0L) {
					facturaAux.setid_tipo_cambio(this.factura.getid_tipo_cambio());
				} else {
					facturaAux.setid_tipo_cambio(null);
				}	
				facturaAux.setes_cliente(this.factura.getes_cliente());	
				
				if(this.factura.getid_asiento_contable()!=null && this.factura.getid_asiento_contable()>0L) {
					facturaAux.setid_asiento_contable(this.factura.getid_asiento_contable());
				} else {
					facturaAux.setid_asiento_contable(null);
				}	
				
				if(this.factura.getid_pedido()!=null && this.factura.getid_pedido()>0L) {
					facturaAux.setid_pedido(this.factura.getid_pedido());
				} else {
					facturaAux.setid_pedido(null);
				}	
				
				if(this.factura.getid_responsable()!=null && this.factura.getid_responsable()>0L) {
					facturaAux.setid_responsable(this.factura.getid_responsable());
				} else {
					facturaAux.setid_responsable(null);
				}	
				
				if(this.factura.getid_estado_fisico_factura_empresa()!=null && this.factura.getid_estado_fisico_factura_empresa()>0L) {
					facturaAux.setid_estado_fisico_factura_empresa(this.factura.getid_estado_fisico_factura_empresa());
				} else {
					facturaAux.setid_estado_fisico_factura_empresa(null);
				}	
				facturaAux.setfecha(this.factura.getfecha());	
				facturaAux.setfecha_autorizacion(this.factura.getfecha_autorizacion());	
				facturaAux.setfecha_cliente(this.factura.getfecha_cliente());	
				facturaAux.setnumero_documento(this.factura.getnumero_documento());	
				facturaAux.setnumero_dau(this.factura.getnumero_dau());	
				facturaAux.setnumero_referendo(this.factura.getnumero_referendo());	
				facturaAux.setfecha_referendo(this.factura.getfecha_referendo());	
				facturaAux.setaforo_referendo(this.factura.getaforo_referendo());	
				
				if(this.facturaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.facturaAux.getId()>=0) {	
						this.facturasEliminados.add(facturaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(facturaAux,facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaAux,facturas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.facturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.saveFacturas();//WithConnection
						//facturaLogic.getSetVersionRowFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos().addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas().addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos.addAll(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagosEliminados);
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas.addAll(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jInternalFrameDetalleFormDetaFormaPago.bancoformapagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaLogic.saveFacturaRelaciones(facturaAux,this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos(),this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());//WithConnection
								//facturaLogic.getSetVersionRowFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.setDetaFormaPagos(new ArrayList<DetaFormaPago>());
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.setDetalleFacturas(new ArrayList<DetalleFactura>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos= new ArrayList<DetaFormaPago>();
							this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas= new ArrayList<DetalleFactura>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos());

							if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaAux.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.facturaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.facturaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(facturaAux,facturaLogic.getFacturas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(facturaAux,facturas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getFacturas().addAll(this.facturasEliminados);
					
					facturaLogic.saveFacturas();//WithConnection
					//facturaLogic.getSetVersionRowFacturas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesFactura();
				
				this.facturasEliminados= new ArrayList<Factura>();		
			}
			
			if(this.facturaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Factura GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.factura=facturaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessFactura();
      	}
		
	}	
	
	public void actualizarRelaciones(Factura facturaLocal) throws Exception {
		
		if(this.facturaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				facturaLocal.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos());
				facturaLocal.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());
			
			} else {
			
				facturaLocal.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagos);
				facturaLocal.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturas);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Factura facturaLocal) throws Exception {	
		if(this.facturaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				facturaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				facturaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				facturaLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				facturaLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				facturaLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				facturaLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				facturaLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				facturaLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				facturaLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				facturaLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				facturaLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				facturaLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SubClienteDetalleFormJInternalFrame.class)) {
				SubClienteBeanSwingJInternalFrame subclienteBeanSwingJInternalFrameLocal=(SubClienteBeanSwingJInternalFrame) ((SubClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				subclienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSubCliente(subclienteBeanSwingJInternalFrameLocal.getsubcliente(),true);
				subclienteBeanSwingJInternalFrameLocal.actualizarLista(subclienteBeanSwingJInternalFrameLocal.subcliente,this.subclientesForeignKey);

				subclienteBeanSwingJInternalFrameLocal.actualizarRelaciones(subclienteBeanSwingJInternalFrameLocal.subcliente);

				facturaLocal.setSubCliente(subclienteBeanSwingJInternalFrameLocal.subcliente);

				this.addItemDefectoCombosForeignKeySubCliente();
				this.cargarCombosFrameSubClientesForeignKey("Formulario");
				this.setActualSubClienteForeignKey(subclienteBeanSwingJInternalFrameLocal.subcliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				facturaLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransporteDetalleFormJInternalFrame.class)) {
				TransporteBeanSwingJInternalFrame transporteBeanSwingJInternalFrameLocal=(TransporteBeanSwingJInternalFrame) ((TransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransporte(transporteBeanSwingJInternalFrameLocal.gettransporte(),true);
				transporteBeanSwingJInternalFrameLocal.actualizarLista(transporteBeanSwingJInternalFrameLocal.transporte,this.transportesForeignKey);

				transporteBeanSwingJInternalFrameLocal.actualizarRelaciones(transporteBeanSwingJInternalFrameLocal.transporte);

				facturaLocal.setTransporte(transporteBeanSwingJInternalFrameLocal.transporte);

				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey("Formulario");
				this.setActualTransporteForeignKey(transporteBeanSwingJInternalFrameLocal.transporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				facturaLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoLlamadaDetalleFormJInternalFrame.class)) {
				TipoLlamadaBeanSwingJInternalFrame tipollamadaBeanSwingJInternalFrameLocal=(TipoLlamadaBeanSwingJInternalFrame) ((TipoLlamadaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipollamadaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoLlamada(tipollamadaBeanSwingJInternalFrameLocal.gettipollamada(),true);
				tipollamadaBeanSwingJInternalFrameLocal.actualizarLista(tipollamadaBeanSwingJInternalFrameLocal.tipollamada,this.tipollamadasForeignKey);

				tipollamadaBeanSwingJInternalFrameLocal.actualizarRelaciones(tipollamadaBeanSwingJInternalFrameLocal.tipollamada);

				facturaLocal.setTipoLlamada(tipollamadaBeanSwingJInternalFrameLocal.tipollamada);

				this.addItemDefectoCombosForeignKeyTipoLlamada();
				this.cargarCombosFrameTipoLlamadasForeignKey("Formulario");
				this.setActualTipoLlamadaForeignKey(tipollamadaBeanSwingJInternalFrameLocal.tipollamada.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoFacturaDetalleFormJInternalFrame.class)) {
				TipoFacturaBeanSwingJInternalFrame tipofacturaBeanSwingJInternalFrameLocal=(TipoFacturaBeanSwingJInternalFrame) ((TipoFacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipofacturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoFactura(tipofacturaBeanSwingJInternalFrameLocal.gettipofactura(),true);
				tipofacturaBeanSwingJInternalFrameLocal.actualizarLista(tipofacturaBeanSwingJInternalFrameLocal.tipofactura,this.tipofacturasForeignKey);

				tipofacturaBeanSwingJInternalFrameLocal.actualizarRelaciones(tipofacturaBeanSwingJInternalFrameLocal.tipofactura);

				facturaLocal.setTipoFactura(tipofacturaBeanSwingJInternalFrameLocal.tipofactura);

				this.addItemDefectoCombosForeignKeyTipoFactura();
				this.cargarCombosFrameTipoFacturasForeignKey("Formulario");
				this.setActualTipoFacturaForeignKey(tipofacturaBeanSwingJInternalFrameLocal.tipofactura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				facturaLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				facturaLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PedidoDetalleFormJInternalFrame.class)) {
				PedidoBeanSwingJInternalFrame pedidoBeanSwingJInternalFrameLocal=(PedidoBeanSwingJInternalFrame) ((PedidoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				pedidoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPedido(pedidoBeanSwingJInternalFrameLocal.getpedido(),true);
				pedidoBeanSwingJInternalFrameLocal.actualizarLista(pedidoBeanSwingJInternalFrameLocal.pedido,this.pedidosForeignKey);

				pedidoBeanSwingJInternalFrameLocal.actualizarRelaciones(pedidoBeanSwingJInternalFrameLocal.pedido);

				facturaLocal.setPedido(pedidoBeanSwingJInternalFrameLocal.pedido);

				this.addItemDefectoCombosForeignKeyPedido();
				this.cargarCombosFramePedidosForeignKey("Formulario");
				this.setActualPedidoForeignKey(pedidoBeanSwingJInternalFrameLocal.pedido.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ResponsableDetalleFormJInternalFrame.class)) {
				ResponsableBeanSwingJInternalFrame responsableBeanSwingJInternalFrameLocal=(ResponsableBeanSwingJInternalFrame) ((ResponsableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				responsableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoResponsable(responsableBeanSwingJInternalFrameLocal.getresponsable(),true);
				responsableBeanSwingJInternalFrameLocal.actualizarLista(responsableBeanSwingJInternalFrameLocal.responsable,this.responsablesForeignKey);

				responsableBeanSwingJInternalFrameLocal.actualizarRelaciones(responsableBeanSwingJInternalFrameLocal.responsable);

				facturaLocal.setResponsable(responsableBeanSwingJInternalFrameLocal.responsable);

				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey("Formulario");
				this.setActualResponsableForeignKey(responsableBeanSwingJInternalFrameLocal.responsable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoFisicoFacturaEmpresaDetalleFormJInternalFrame.class)) {
				EstadoFisicoFacturaEmpresaBeanSwingJInternalFrame estadofisicofacturaempresaBeanSwingJInternalFrameLocal=(EstadoFisicoFacturaEmpresaBeanSwingJInternalFrame) ((EstadoFisicoFacturaEmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadofisicofacturaempresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoFisicoFacturaEmpresa(estadofisicofacturaempresaBeanSwingJInternalFrameLocal.getestadofisicofacturaempresa(),true);
				estadofisicofacturaempresaBeanSwingJInternalFrameLocal.actualizarLista(estadofisicofacturaempresaBeanSwingJInternalFrameLocal.estadofisicofacturaempresa,this.estadofisicofacturaempresasForeignKey);

				estadofisicofacturaempresaBeanSwingJInternalFrameLocal.actualizarRelaciones(estadofisicofacturaempresaBeanSwingJInternalFrameLocal.estadofisicofacturaempresa);

				facturaLocal.setEstadoFisicoFacturaEmpresa(estadofisicofacturaempresaBeanSwingJInternalFrameLocal.estadofisicofacturaempresa);

				this.addItemDefectoCombosForeignKeyEstadoFisicoFacturaEmpresa();
				this.cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey("Formulario");
				this.setActualEstadoFisicoFacturaEmpresaForeignKey(estadofisicofacturaempresaBeanSwingJInternalFrameLocal.estadofisicofacturaempresa.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarFacturaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosFactura.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = facturaValidator.getInvalidValues(this.factura);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Factura factura,List<Factura> facturas) throws Exception {
		try	{		
			FacturaConstantesFunciones.actualizarLista(factura,facturas,this.facturaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Factura factura,List<Factura> facturas) throws Exception {
		try	{			
			FacturaConstantesFunciones.actualizarSelectedLista(factura,facturas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Factura> facturasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				facturasLocal=this.facturaLogic.getFacturas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				facturasLocal=this.facturas;
			}
			//ARCHITECTURE
		
			for(Factura facturaLocal:facturasLocal) {
				if(this.permiteMantenimiento(facturaLocal) && facturaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+FacturaConstantesFunciones.getFacturaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_empresaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_sucursalFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_ejercicioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_periodoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_anioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_mesFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_usuarioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.NUMEROPREIMPRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_pre_impresoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_emisionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.NUMERODIAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_diasFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_vencimientoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_monedaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelcotizacionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_empleadoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_formatoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DIRECCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldireccionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelrucFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_clienteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_precioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TELEFONO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltelefonoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDSUBCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_sub_clienteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_vendedorFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_transporteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_transportistaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.ORDEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelordenFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTIPOLLAMADA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_llamadaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.HORAINICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelhora_inicioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.HORAFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelhora_finFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTIPOFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_facturaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescripcionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.CUPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelcupoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.SALDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsaldoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DOCUMENTOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldocumentosFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldisponibleFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.PORCENTAJEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelporcentaje_descuentoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_ivaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.SUMAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsumanFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescuento_valorFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALSINIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_sin_ivaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_descuentoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALFLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_fleteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotalFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsub_totalFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALOTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_otroFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.ULTIMOCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelultimo_costoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelivaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescuentoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FINANCIAMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfinanciamientoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.MARGENUTILIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelmargen_utilidadFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeliceFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.ANTICIPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelanticipoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.OTROSVALORES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelotros_valoresFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALRETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_retencionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.TOTALCONSUMOESPECIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_consumo_especialFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.RETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelretencionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_cambioFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.ESCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeles_clienteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_asiento_contableFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_pedidoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDRESPONSABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_responsableFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.IDESTADOFISICOFACTURAEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelid_estado_fisico_factura_empresaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfechaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHAAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_autorizacionFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_clienteFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.NUMERODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_documentoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.NUMERODAU)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_dauFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.NUMEROREFERENDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_referendoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.FECHAREFERENDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_referendoFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaConstantesFunciones.AFOROREFERENDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelaforo_referendoFactura,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_empresaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_sucursalFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_ejercicioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_periodoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_anioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_mesFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_usuarioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelnumero_pre_impresoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfecha_emisionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelnumero_diasFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfecha_vencimientoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_monedaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelcotizacionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_empleadoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_formatoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldireccionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelrucFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_clienteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_precioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltelefonoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_sub_clienteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_vendedorFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_transporteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_transportistaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelordenFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_llamadaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelhora_inicioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelhora_finFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_facturaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldescripcionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelcupoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelsaldoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldocumentosFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldisponibleFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelporcentaje_descuentoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_ivaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelsumanFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldescuento_valorFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_sin_ivaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_descuentoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_fleteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotalFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelsub_totalFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_otroFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelultimo_costoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelivaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeldescuentoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfinanciamientoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelmargen_utilidadFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeliceFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelanticipoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelotros_valoresFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_retencionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeltotal_consumo_especialFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelretencionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_tipo_cambioFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabeles_clienteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_asiento_contableFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_pedidoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_responsableFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelid_estado_fisico_factura_empresaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfechaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfecha_autorizacionFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfecha_clienteFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelnumero_documentoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelnumero_dauFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelnumero_referendoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelfecha_referendoFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFactura.jLabelaforo_referendoFactura,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetaFormaPago")) {
			if(this.factura==null) {
				this.factura= new Factura();
			}

			if(this.facturaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoFactura
				this.setVariablesFormularioToObjetoActualFactura(this.factura,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.getdetaformapago().setFactura(this.factura);
			}

			return;
		}
		 else  if(sTipo.equals("DetalleFactura")) {
			if(this.factura==null) {
				this.factura= new Factura();
			}

			if(this.facturaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoFactura
				this.setVariablesFormularioToObjetoActualFactura(this.factura,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.getdetallefactura().setFactura(this.factura);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoFactura--;	
		
		
		this.facturaAux=new Factura();
		
		this.facturaAux.setId(this.iIdNuevoFactura);
		this.facturaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturaLogic.getFacturas().add(this.facturaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.facturas.add(this.facturaAux);
		}
		//ARCHITECTURE
		
		this.factura=this.facturaAux;
		
		if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioFactura(this.factura);
			this.setVariablesObjetoActualToFormularioForeignKeyFactura(this.factura);
		}
				
		//this.setDefaultControlesFactura();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyFactura();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyFactura();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyFactura();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFactura(this.facturaBean,this.factura,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(FacturaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.facturaSessionBean.getConGuardarRelaciones()) {
			classes=FacturaConstantesFunciones.getClassesRelationshipsOfFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.facturaReturnGeneral=facturaLogic.procesarEventosFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaLogic.getFacturas(),this.factura,this.facturaParameterGeneral,this.isEsNuevoFactura,classes);//this.facturaLogic.getFactura()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanFactura(this.facturaReturnGeneral,this.facturaBean,false);
		
		if(this.facturaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyFactura(this.facturaReturnGeneral.getFactura());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioFactura(this.facturaReturnGeneral.getFactura());
		}
		
		if(this.facturaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioFactura(this.facturaReturnGeneral.getFactura(),classes);//this.facturaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualFactura(this.factura,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyFactura();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyFactura();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaBeanSwingJInternalFrameAdditional.RecargarFormFactura(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingFactura(false);
						
			if(facturaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.getEsGuardarRelacionado() && DetaFormaPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaFormaPagoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.getEsGuardarRelacionado() && DetalleFacturaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFactura();
			}
			
			this.actualizarVisualTableDatosFactura();
			
			this.jTableDatosFactura.setRowSelectionInterval(this.getIndiceNuevoFactura(), this.getIndiceNuevoFactura());
			
			this.seleccionarFilaTablaFacturaActual();
						
			this.actualizarEstadoCeldasBotonesFactura("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesFactura(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarnumero_pre_impresoFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfecha_emisionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarnumero_diasFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfecha_vencimientoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarcotizacionFactura);
		this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardireccionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarrucFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartelefonoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarordenFactura);
		this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarhora_inicioFactura);
		this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarhora_finFactura);
		this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardescripcionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarcupoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarsaldoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardocumentosFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardisponibleFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarporcentaje_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarsumanFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardescuento_valorFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_sin_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_fleteFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotalFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarsub_totalFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_otroFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarultimo_costoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activardescuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfinanciamientoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarmargen_utilidadFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activariceFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activaranticipoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarotros_valoresFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_retencionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_retencionFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_consumo_especialFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activartotal_consumo_especialFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldretencionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarretencionFactura);//
		this.jInternalFrameDetalleFormFactura.jCheckBoxes_clienteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activares_clienteFactura);//
		this.jInternalFrameDetalleFormFactura.jDateChooserfechaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfechaFactura);//
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_autorizacionFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfecha_autorizacionFactura);//
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_clienteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfecha_clienteFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_documentoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarnumero_documentoFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_dauFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarnumero_dauFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_referendoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarnumero_referendoFactura);//
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_referendoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarfecha_referendoFactura);//
		this.jInternalFrameDetalleFormFactura.jTextFieldaforo_referendoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activaraforo_referendoFactura);	
		//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_empresaFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_sucursalFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_ejercicioFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_periodoFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_anioFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_mesFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_usuarioFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_monedaFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_empleadoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_formatoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_tipo_precioFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_sub_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_vendedorFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_transporteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_transportistaFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_tipo_llamadaFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_tipo_facturaFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_tipo_cambioFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_asiento_contableFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_pedidoFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_responsableFactura);//
		this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setEnabled(isHabilitar && this.facturaConstantesFunciones.activarid_estado_fisico_factura_empresaFactura);
	};
	
	public void setDefaultControlesFactura() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoFactura(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.facturaSessionBean.setConGuardarRelaciones(true);			
			this.facturaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.facturaSessionBean.setConGuardarRelaciones(false);			
			this.facturaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoFactura() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Factura facturaAux:this.facturaLogic.getFacturas()) {
				if(facturaAux.getId().equals(this.iIdNuevoFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Factura facturaAux:this.facturas) {
				if(facturaAux.getId().equals(this.iIdNuevoFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualFactura(Factura factura,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Factura facturaAux:this.facturaLogic.getFacturas()) {
				if(facturaAux.getId().equals(factura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Factura facturaAux:this.facturas) {
				if(facturaAux.getId().equals(factura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalFactura(Factura facturaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Factura facturaAux:this.facturaLogic.getFacturas()) {
				if(facturaAux.getFacturaOriginal().getId().equals(facturaOriginal.getId())) {
					existe=true;
					facturaOriginal.setId(facturaAux.getId());
					facturaOriginal.setVersionRow(facturaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Factura facturaAux:this.facturas) {
				if(facturaAux.getFacturaOriginal().getId().equals(facturaOriginal.getId())) {
					existe=true;
					facturaOriginal.setId(facturaAux.getId());
					facturaOriginal.setVersionRow(facturaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosFactura(Boolean esParaCancelar) throws Exception {
		facturasAux=new ArrayList<Factura>();
		facturaAux=new Factura();
		
		if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Factura facturaAux:this.facturaLogic.getFacturas()) {
					if(facturaAux.getId()<0) {
						facturasAux.add(facturaAux);
					}		
				}
				this.iIdNuevoFactura=0L;
				this.facturaLogic.getFacturas().removeAll(facturasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Factura facturaAux:this.facturas) {
					if(facturaAux.getId()<0) {
						facturasAux.add(facturaAux);
					}		
				}
				this.iIdNuevoFactura=0L;
				this.facturas.removeAll(facturasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoFactura 
					&& this.facturaLogic.getFacturas().size()>0
					) {
					facturaAux=this.facturaLogic.getFacturas().get(this.facturaLogic.getFacturas().size() - 1);
				
					if(facturaAux.getId()<0) {
						this.facturaLogic.getFacturas().remove(facturaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoFactura && this.facturas.size()>0) {
					facturaAux=this.facturas.get(this.facturas.size() - 1);
				
					if(facturaAux.getId()<0) {
						this.facturas.remove(facturaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoFactura(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(factura.getId()<0) {
				this.facturaLogic.getFacturas().remove(this.factura);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(factura.getId()<0) {
				this.facturas.remove(this.factura);
			}
		}			
	}
	
	public void setEstadosInicialesFactura(List<Factura> facturasAux) throws Exception {
		FacturaConstantesFunciones.setEstadosInicialesFactura(facturasAux);
	}
	
	public void setEstadosInicialesFactura(Factura facturaAux) throws Exception {
		FacturaConstantesFunciones.setEstadosInicialesFactura(facturaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarFacturaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarFacturaActual()) {
				if(!this.isEsNuevoFactura) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoFactura=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarFacturaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Factura ?", "MANTENIMIENTO DE Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Factura factura) throws Exception {
		FacturaConstantesFunciones.seleccionarAsignar(this.factura,factura);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarFactura=this.isPermisoActualizarOriginalFactura;
			
			
			this.seleccionarAsignar(factura);
			
			

			idEmpleadoActual=factura.getid_empleado();
			this.seleccionarEmpleadoActual();

			idClienteActual=factura.getid_cliente();
			this.seleccionarClienteActual();

			idVendedorActual=factura.getid_vendedor();
			this.seleccionarVendedorActual();

			idTipoCambioActual=factura.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();

			idAsientoContableActual=factura.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaConstantesFunciones.quitarEspaciosFactura(this.factura,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.facturaSessionBean.setsFuncionBusquedaRapida(this.facturaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarVendedorActual() throws Exception {
		try	{
			Vendedor vendedorAux=new Vendedor();

			if(this.idVendedorActual != null && this.idVendedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(this.idVendedorActual);
					vendedorAux= vendedorLogic.getVendedor();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				vendedorsForeignKey=new ArrayList<Vendedor>();
				vendedorsForeignKey.add(vendedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoFactura) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosFactura(esParaCancelar);				
				this.cancelarNuevoFactura(esParaCancelar);								
			}
			
			this.factura=new Factura();
			
			this.inicializarFactura();
			
			this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarFactura() throws Exception {
		try {
			FacturaConstantesFunciones.inicializarFactura(this.factura);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.facturaLogic.getFacturas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteFacturas(String sAccionBusqueda,List<Factura> facturasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Factura"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="FacturaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("FacturaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Factura"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Facturas");		
		parameters.put("busquedapor", FacturaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetaFormaPago.class));
			classes.add(new Classe(DetalleFactura.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					FacturaLogic facturaLogicAuxiliar=new FacturaLogic();
					facturaLogicAuxiliar.setDatosCliente(facturaLogic.getDatosCliente());				
					facturaLogicAuxiliar.setFacturas(facturasParaReportes);
					
					facturaLogicAuxiliar.cargarRelacionesLoteForeignKeyFacturaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					facturasParaReportes=facturaLogicAuxiliar.getFacturas();
					
					//facturaLogic.getNewConnexionToDeep();
					
					//for (Factura factura:facturasParaReportes) {
					//	facturaLogic.deepLoad(factura, false, DeepLoadType.INCLUDE, classes);
					//}						
					//facturaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//facturaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetaFormaPago = AuxiliarReportes.class.getResourceAsStream("DetaFormaPagoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detaformapago", reportFileDetaFormaPago);

			InputStream reportFileDetalleFactura = AuxiliarReportes.class.getResourceAsStream("DetalleFacturaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallefactura", reportFileDetalleFactura);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceFactura=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			FacturaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			FacturaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceFactura=new JRBeanArrayDataSource(FacturaJInternalFrame.TraerFacturaBeans(facturasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceFactura);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+FacturaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+FacturaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(FacturaBean.TraerFacturaBeans(facturasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoFacturaActionPerformed(null);
					//this.generarExcelReporteFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesFacturas(sAccionBusqueda,sTipoArchivoReporte,facturasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<Factura> facturasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Facturas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFactura("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Factura factura : facturasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			FacturaConstantesFunciones.generarExcelReporteDataFactura("NORMAL",row,workbook,factura,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderFactura(String sTipo,Row row,Workbook workbook) {
		
		FacturaConstantesFunciones.generarExcelReporteHeaderFactura(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<Factura> facturasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Facturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Factura factura : facturasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(FacturaConstantesFunciones.getFacturaDescripcion(factura));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getnumero_pre_impreso());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_NUMERODIAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODIAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getnumero_dias());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DIRECCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DIRECCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdireccion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TELEFONO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TELEFONO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettelefono());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDSUBCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUBCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getsubcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_ORDEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_ORDEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getorden());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettipollamada_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_HORAINICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAINICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gethora_inicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_HORAFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gethora_fin());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTIPOFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettipofactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_CUPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_CUPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getcupo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_SALDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_SALDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getsaldo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DOCUMENTOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DOCUMENTOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdocumentos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdisponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getporcentaje_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_SUMAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_SUMAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getsuman());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALSINIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALSINIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_sin_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALFLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALFLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_flete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALOTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALOTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_otro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getultimo_costo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfinanciamiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getmargen_utilidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_ANTICIPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_ANTICIPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getanticipo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_OTROSVALORES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_OTROSVALORES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getotros_valores());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALRETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALRETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettotal_consumo_especial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_RETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_RETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getretencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_ESCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_ESCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(factura.getes_cliente()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getpedido_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDRESPONSABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDRESPONSABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getresponsable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getestadofisicofacturaempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha_autorizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getnumero_documento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_NUMERODAU))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODAU);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getnumero_dau());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getnumero_referendo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_FECHAREFERENDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAREFERENDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getfecha_referendo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaConstantesFunciones.LABEL_AFOROREFERENDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaConstantesFunciones.LABEL_AFOROREFERENDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(factura.getaforo_referendo());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<Factura> facturasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Factura> facturasRespaldo=null;
		
		classes=FacturaConstantesFunciones.getClassesRelationshipsOfFactura(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.facturaLogic.setDatosCliente(this.datosCliente);
		this.facturaLogic.setDatosDeep(this.datosDeep);
		this.facturaLogic.setIsConDeep(true);
		
		facturasRespaldo=this.facturaLogic.getFacturas();
		
		this.facturaLogic.setFacturas(facturasParaReportes);	
		this.facturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		facturasParaReportes=this.facturaLogic.getFacturas();
		this.facturaLogic.setFacturas(facturasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Facturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFactura("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Factura factura : facturasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderFactura("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			FacturaConstantesFunciones.generarExcelReporteDataFactura("NORMAL",row,workbook,factura,cellStyleDataAux);
		
			
			


				//DetaFormaPago
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetaFormaPagoConstantesFunciones.SCLASSWEBTITULO))) {

				if(factura.getDetaFormaPagos()!=null && factura.getDetaFormaPagos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetaFormaPagoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetaFormaPagoConstantesFunciones.generarExcelReporteHeaderDetaFormaPago("RELACIONADO",row,workbook);
				}

				if(factura.getDetaFormaPagos()!=null) {
					i2=0;
					for(DetaFormaPago detaformapago : factura.getDetaFormaPagos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetaFormaPagoConstantesFunciones.generarExcelReporteDataDetaFormaPago("RELACIONADO",row,workbook,detaformapago,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//DetalleFactura
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO))) {

				if(factura.getDetalleFacturas()!=null && factura.getDetalleFacturas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleFacturaConstantesFunciones.generarExcelReporteHeaderDetalleFactura("RELACIONADO",row,workbook);
				}

				if(factura.getDetalleFacturas()!=null) {
					i2=0;
					for(DetalleFactura detallefactura : factura.getDetalleFacturas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleFacturaConstantesFunciones.generarExcelReporteDataDetalleFactura("RELACIONADO",row,workbook,detallefactura,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(FacturaConstantesFunciones.getFacturaDescripcion(factura));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFactura.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFactura.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessFactura() throws Exception {		
		this.startProcessFactura(true);
	}
	
	public void startProcessFactura(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasFactura ,this.jPanelParametrosReportesFactura, this.jScrollPanelDatosFactura,this.jPanelPaginacionFactura, this.jScrollPanelDatosEdicionFactura, this.jPanelAccionesFactura,this.jPanelAccionesFormularioFactura,this.jmenuBarFactura,this.jmenuBarDetalleFactura,this.jTtoolBarFactura,this.jTtoolBarDetalleFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasFactura=this.jTabbedPaneBusquedasFactura; 
		
		final JPanel jPanelParametrosReportesFactura=this.jPanelParametrosReportesFactura;
		//final JScrollPane jScrollPanelDatosFactura=this.jScrollPanelDatosFactura;
		final JTable jTableDatosFactura=this.jTableDatosFactura;		
		final JPanel jPanelPaginacionFactura=this.jPanelPaginacionFactura;
		//final JScrollPane jScrollPanelDatosEdicionFactura=this.jScrollPanelDatosEdicionFactura;
		final JPanel jPanelAccionesFactura=this.jPanelAccionesFactura;
		
		JPanel jPanelCamposAuxiliarFactura=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarFactura=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
			jPanelCamposAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jPanelCamposFactura;
			jPanelAccionesFormularioAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jPanelAccionesFormularioFactura;
		}
		
		final JPanel jPanelCamposFactura=jPanelCamposAuxiliarFactura;
		final JPanel jPanelAccionesFormularioFactura=jPanelAccionesFormularioAuxiliarFactura;
		
		
		final JMenuBar jmenuBarFactura=this.jmenuBarFactura;
		final JToolBar jTtoolBarFactura=this.jTtoolBarFactura;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFactura=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
			jmenuBarDetalleAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jmenuBarDetalleFactura;
			jTtoolBarDetalleAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jTtoolBarDetalleFactura;
		}
		
		final JMenuBar jmenuBarDetalleFactura=jmenuBarDetalleAuxiliarFactura;
		final JToolBar jTtoolBarDetalleFactura=jTtoolBarDetalleAuxiliarFactura;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFactura;
			processRunnable.jTableDatos=jTableDatosFactura;
			processRunnable.jPanelCampos=jPanelCamposFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionFactura;
			processRunnable.jPanelAcciones=jPanelAccionesFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFactura;
			
			
			processRunnable.jmenuBar=jmenuBarFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFactura;
			processRunnable.jTtoolBar=jTtoolBarFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFactura ,jPanelParametrosReportesFactura,jTableDatosFactura, /*jScrollPanelDatosFactura,*/jPanelCamposFactura,jPanelPaginacionFactura, /*jScrollPanelDatosEdicionFactura,*/ jPanelAccionesFactura,jPanelAccionesFormularioFactura,jmenuBarFactura,jmenuBarDetalleFactura,jTtoolBarFactura,jTtoolBarDetalleFactura);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFactura ,jPanelParametrosReportesFactura, jScrollPanelDatosFactura,jPanelPaginacionFactura, jScrollPanelDatosEdicionFactura, jPanelAccionesFactura,jPanelAccionesFormularioFactura,jmenuBarFactura,jmenuBarDetalleFactura,jTtoolBarFactura,jTtoolBarDetalleFactura);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessFactura() {// throws Exception 
		this.finishProcessFactura(true);
	}
	
	public void finishProcessFactura(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasFactura ,this.jPanelParametrosReportesFactura, this.jScrollPanelDatosFactura,this.jPanelPaginacionFactura, this.jScrollPanelDatosEdicionFactura, this.jPanelAccionesFactura,this.jPanelAccionesFormularioFactura,this.jmenuBarFactura,this.jmenuBarDetalleFactura,this.jTtoolBarFactura,this.jTtoolBarDetalleFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasFactura=this.jTabbedPaneBusquedasFactura; 
		
		final JPanel jPanelParametrosReportesFactura=this.jPanelParametrosReportesFactura;
		//final JScrollPane jScrollPanelDatosFactura=this.jScrollPanelDatosFactura;
		final JTable jTableDatosFactura=this.jTableDatosFactura;		
		final JPanel jPanelPaginacionFactura=this.jPanelPaginacionFactura;
		//final JScrollPane jScrollPanelDatosEdicionFactura=this.jScrollPanelDatosEdicionFactura;
		final JPanel jPanelAccionesFactura=this.jPanelAccionesFactura;
		
		JPanel jPanelCamposAuxiliarFactura=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarFactura=new JPanel();
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
			jPanelCamposAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jPanelCamposFactura;
			jPanelAccionesFormularioAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jPanelAccionesFormularioFactura;
		}
		
		final JPanel jPanelCamposFactura=jPanelCamposAuxiliarFactura;
		final JPanel jPanelAccionesFormularioFactura=jPanelAccionesFormularioAuxiliarFactura;
		
		
		final JMenuBar jmenuBarFactura=this.jmenuBarFactura;		
		final JToolBar jTtoolBarFactura=this.jTtoolBarFactura;
				
		JMenuBar jmenuBarDetalleAuxiliarFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFactura=new JToolBar();
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
			jmenuBarDetalleAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jmenuBarDetalleFactura;
			jTtoolBarDetalleAuxiliarFactura=this.jInternalFrameDetalleFormFactura.jTtoolBarDetalleFactura;		
		}
		
		final JMenuBar jmenuBarDetalleFactura=jmenuBarDetalleAuxiliarFactura;
		final JToolBar jTtoolBarDetalleFactura=jTtoolBarDetalleAuxiliarFactura;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFactura;
			processRunnable.jTableDatos=jTableDatosFactura;
			processRunnable.jPanelCampos=jPanelCamposFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionFactura;
			processRunnable.jPanelAcciones=jPanelAccionesFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFactura;
			
			
			processRunnable.jmenuBar=jmenuBarFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFactura;
			processRunnable.jTtoolBar=jTtoolBarFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasFactura ,jPanelParametrosReportesFactura, jTableDatosFactura,/*jScrollPanelDatosFactura,*/jPanelCamposFactura,jPanelPaginacionFactura, /*jScrollPanelDatosEdicionFactura,*/ jPanelAccionesFactura,jPanelAccionesFormularioFactura,jmenuBarFactura,jmenuBarDetalleFactura,jTtoolBarFactura,jTtoolBarDetalleFactura));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesFactura(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarFactura(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuFactura(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFactura,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFactura,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.facturaConstantesFunciones.getsFinalQueryFactura();
		String  finalQueryPaginacionTodos=this.facturaConstantesFunciones.getsFinalQueryFactura();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=FacturaConstantesFunciones.getArrayColumnasGlobalesNoFactura(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.facturasEliminados= new ArrayList<Factura>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessFactura();
		
				///*FacturaSessionBean*/this.facturaSessionBean=new FacturaSessionBean();
			
			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=FacturaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=FacturaConstantesFunciones.getClassesForeignKeysOfFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/factura."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			facturasAux= new ArrayList<Factura>();
			
				
			facturaLogic.setDatosCliente(this.datosCliente);
			facturaLogic.setDatosDeep(this.datosDeep);
			facturaLogic.setIsConDeep(true);
			
			
			facturaLogic.getFacturaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					facturaLogic.getTodosFacturas(finalQueryGlobal,pagination);
					
					//facturaLogic.getTodosFacturasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(facturaLogic.getFacturas()==null|| facturaLogic.getFacturas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturasAux= new ArrayList<Factura>();
							facturasAux.addAll(facturaLogic.getFacturas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux= new ArrayList<Factura>();
							facturasAux.addAll(facturas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaLogic.getTodosFacturas(finalQueryGlobal+"",this.pagination);												
							
							//facturaLogic.getTodosFacturasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteFacturas("Todos",facturaLogic.getFacturas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaLogic.setFacturas(new ArrayList<Factura>());					
							facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idFactura=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idFactura=this.idActual;
				
				} else if(this.idFacturaActual!=null && this.idFacturaActual!=0L) {
					idFactura=idFacturaActual;
				}
				
					
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndicePorId(idFactura);
				
				this.facturas=new ArrayList<Factura>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					facturaLogic.getEntity(idFactura);
					
					//facturaLogic.getEntityWithConnection(idFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.setFacturas(new ArrayList<Factura>());
					facturaLogic.getFacturas().add(facturaLogic.getFactura());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturas=new ArrayList<Factura>();
					this.facturas.add(factura);
				}
				
				if(facturaLogic.getFactura()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorNumeroPreImpreso")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numero_pre_impresoBusquedaPorNumeroPreImpreso);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasBusquedaPorNumeroPreImpreso(finalQueryGlobal,pagination,numero_pre_impresoBusquedaPorNumeroPreImpreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numero_pre_impresoBusquedaPorNumeroPreImpreso);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numero_pre_impresoBusquedaPorNumeroPreImpreso);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasBusquedaPorNumeroPreImpreso(finalQueryGlobal,pagination,numero_pre_impresoBusquedaPorNumeroPreImpreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numero_pre_impresoBusquedaPorNumeroPreImpreso);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numero_pre_impresoBusquedaPorNumeroPreImpreso);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("BusquedaPorNumeroPreImpreso",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("BusquedaPorNumeroPreImpreso",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdCliente",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdCliente",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdEjercicio",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdEjercicio",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdEmpresa",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdEmpresa",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoFisicoFacturaEmpresa")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEstadoFisicoFacturaEmpresa(id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdEstadoFisicoFacturaEmpresa(finalQueryGlobal,pagination,id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEstadoFisicoFacturaEmpresa(id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEstadoFisicoFacturaEmpresa(id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdEstadoFisicoFacturaEmpresa(finalQueryGlobal,pagination,id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEstadoFisicoFacturaEmpresa(id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdEstadoFisicoFacturaEmpresa(id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdEstadoFisicoFacturaEmpresa",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdEstadoFisicoFacturaEmpresa",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPedido")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPedido(id_pedidoFK_IdPedido);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdPedido(finalQueryGlobal,pagination,id_pedidoFK_IdPedido);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPedido(id_pedidoFK_IdPedido);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPedido(id_pedidoFK_IdPedido);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdPedido(finalQueryGlobal,pagination,id_pedidoFK_IdPedido);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPedido(id_pedidoFK_IdPedido);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPedido(id_pedidoFK_IdPedido);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdPedido",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdPedido",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdPeriodo",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdPeriodo",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdResponsable")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdResponsable(finalQueryGlobal,pagination,id_responsableFK_IdResponsable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdResponsable(finalQueryGlobal,pagination,id_responsableFK_IdResponsable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdResponsable",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdResponsable",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSubCliente")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSubCliente(id_sub_clienteFK_IdSubCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdSubCliente(finalQueryGlobal,pagination,id_sub_clienteFK_IdSubCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSubCliente(id_sub_clienteFK_IdSubCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSubCliente(id_sub_clienteFK_IdSubCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdSubCliente(finalQueryGlobal,pagination,id_sub_clienteFK_IdSubCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSubCliente(id_sub_clienteFK_IdSubCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSubCliente(id_sub_clienteFK_IdSubCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdSubCliente",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdSubCliente",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdSucursal",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdSucursal",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransportista")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdTransportista",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdTransportista",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdUsuario",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdUsuario",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaLogic.getFacturasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaLogic.getFacturas()==null||facturaLogic.getFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturas==null|| facturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturasAux=new ArrayList<Factura>();
						facturasAux.addAll(facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturasAux=new ArrayList<Factura>();
							facturasAux.addAll(facturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaLogic.getFacturasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturas("FK_IdVendedor",facturaLogic.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturas("FK_IdVendedor",facturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaLogic.setFacturas(new ArrayList<Factura>());
						facturaLogic.getFacturas().addAll(facturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturas=new ArrayList<Factura>();
							facturas.addAll(facturasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesFactura();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessFactura();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaLogic.getFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaLogic.getFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Factura factura) {
		Boolean permite=true;
		
		if(this.factura.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=FacturaConstantesFunciones.getOrderByListaFactura();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=FacturaConstantesFunciones.getOrderByListaFactura();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Factura factura:facturaLogic.getFacturas()) {
				if(factura.getsType().equals(Constantes2.S_TOTALES)) {
					facturaTotales=factura;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Factura factura:this.facturas) {
				if(factura.getsType().equals(Constantes2.S_TOTALES)) {
					facturaTotales=factura;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.facturaAux=new Factura();
			this.facturaAux.setsType(Constantes2.S_TOTALES);
			this.facturaAux.setIsNew(false);
			this.facturaAux.setIsChanged(false);
			this.facturaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				FacturaConstantesFunciones.TotalizarValoresFilaFactura(this.facturaLogic.getFacturas(),this.facturaAux);
				
				this.facturaLogic.getFacturas().add(this.facturaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				FacturaConstantesFunciones.TotalizarValoresFilaFactura(this.facturas,this.facturaAux);
				
				this.facturas.add(this.facturaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		facturaTotales=new Factura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturaLogic.getFacturas().remove(facturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturas.remove(facturaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		facturaTotales=new Factura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Factura factura:facturaLogic.getFacturas()) {
				if(factura.getsType().equals(Constantes2.S_TOTALES)) {
					facturaTotales=factura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaConstantesFunciones.TotalizarValoresFilaFactura(this.facturaLogic.getFacturas(),facturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Factura factura:this.facturas) {
				if(factura.getsType().equals(Constantes2.S_TOTALES)) {
					facturaTotales=factura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaConstantesFunciones.TotalizarValoresFilaFactura(this.facturas,facturaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getFacturasBusquedaPorNumeroPreImpreso()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroPreImpreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdEstadoFisicoFacturaEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoFisicoFacturaEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdPedido()throws Exception {
		try {
			sAccionBusqueda="FK_IdPedido";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdResponsable()throws Exception {
		try {
			sAccionBusqueda="FK_IdResponsable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdSubCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdSubCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTipoCambio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCambio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTipoFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTipoLlamada()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoLlamada";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturasFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getFacturasBusquedaPorNumeroPreImpreso(String sFinalQuery,String numero_pre_impreso)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasBusquedaPorNumeroPreImpreso(sFinalQuery,this.pagination,numero_pre_impreso);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdEstadoFisicoFacturaEmpresa(String sFinalQuery,Long id_estado_fisico_factura_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdEstadoFisicoFacturaEmpresa(sFinalQuery,this.pagination,id_estado_fisico_factura_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdPedido(String sFinalQuery,Long id_pedido)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdPedido(sFinalQuery,this.pagination,id_pedido);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdResponsable(String sFinalQuery,Long id_responsable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdResponsable(sFinalQuery,this.pagination,id_responsable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdSubCliente(String sFinalQuery,Long id_sub_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdSubCliente(sFinalQuery,this.pagination,id_sub_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTipoCambio(String sFinalQuery,Long id_tipo_cambio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTipoCambio(sFinalQuery,this.pagination,id_tipo_cambio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTipoFactura(String sFinalQuery,Long id_tipo_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTipoFactura(sFinalQuery,this.pagination,id_tipo_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTipoLlamada(String sFinalQuery,Long id_tipo_llamada)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTipoLlamada(sFinalQuery,this.pagination,id_tipo_llamada);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTransporte(String sFinalQuery,Long id_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTransporte(sFinalQuery,this.pagination,id_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturasFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getFacturasFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosFactura() {
		this.isPermisoTodoFactura=false;
		this.isPermisoNuevoFactura=false;
		this.isPermisoActualizarFactura=false;
		this.isPermisoActualizarOriginalFactura=false;
		this.isPermisoEliminarFactura=false;
		this.isPermisoGuardarCambiosFactura=false;
		this.isPermisoConsultaFactura=false;
		this.isPermisoBusquedaFactura=false;
		this.isPermisoReporteFactura=false;		
		this.isPermisoOrdenFactura=false;		
		this.isPermisoPaginacionMedioFactura=false;		
		this.isPermisoPaginacionAltoFactura=false;
		this.isPermisoPaginacionTodoFactura=false;
		this.isPermisoCopiarFactura=false;		
		this.isPermisoVerFormFactura=false;		
		this.isPermisoDuplicarFactura=false;		
		this.isPermisoOrdenFactura=false;		
	}
	
	public void setPermisosUsuarioFactura(Boolean isPermiso) {
		this.isPermisoTodoFactura=isPermiso;
		this.isPermisoNuevoFactura=isPermiso;
		this.isPermisoActualizarFactura=isPermiso;
		this.isPermisoActualizarOriginalFactura=isPermiso;
		this.isPermisoEliminarFactura=isPermiso;
		this.isPermisoGuardarCambiosFactura=isPermiso;
		this.isPermisoConsultaFactura=isPermiso;
		this.isPermisoBusquedaFactura=isPermiso;
		this.isPermisoReporteFactura=isPermiso;
		this.isPermisoOrdenFactura=isPermiso;		
		this.isPermisoPaginacionMedioFactura=isPermiso;		
		this.isPermisoPaginacionAltoFactura=isPermiso;		
		this.isPermisoPaginacionTodoFactura=isPermiso;		
		this.isPermisoCopiarFactura=isPermiso;		
		this.isPermisoVerFormFactura=isPermiso;		
		this.isPermisoDuplicarFactura=isPermiso;
		this.isPermisoOrdenFactura=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioFactura(Boolean isPermiso) {
		//this.isPermisoTodoFactura=isPermiso;
		this.isPermisoNuevoFactura=isPermiso;
		this.isPermisoActualizarFactura=isPermiso;
		this.isPermisoActualizarOriginalFactura=isPermiso;
		this.isPermisoEliminarFactura=isPermiso;
		this.isPermisoGuardarCambiosFactura=isPermiso;
		//this.isPermisoConsultaFactura=isPermiso;
		//this.isPermisoBusquedaFactura=isPermiso;
		//this.isPermisoReporteFactura=isPermiso;
		//this.isPermisoOrdenFactura=isPermiso;		
		//this.isPermisoPaginacionMedioFactura=isPermiso;		
		//this.isPermisoPaginacionAltoFactura=isPermiso;		
		//this.isPermisoPaginacionTodoFactura=isPermiso;		
		//this.isPermisoCopiarFactura=isPermiso;		
		//this.isPermisoDuplicarFactura=isPermiso;
		//this.isPermisoOrdenFactura=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioFacturaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetaFormaPagoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(DetalleFacturaConstantesFunciones.SNOMBREOPCION);
		
		if(FacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetaFormaPago=false;
		this.isTienePermisosDetaFormaPago=this.verificarGetPermisosUsuarioOpcionFacturaClaseRelacionada(this.opcionsRelacionadas,DetaFormaPagoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosDetalleFactura=false;
		this.isTienePermisosDetalleFactura=this.verificarGetPermisosUsuarioOpcionFacturaClaseRelacionada(this.opcionsRelacionadas,DetalleFacturaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebFactura(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioFacturaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetaFormaPago=conPermiso;
		this.isTienePermisosDetalleFactura=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioFacturaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionFacturaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioFacturaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetaFormaPago && this.jInternalFrameDetalleFormFactura!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.remove(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosDetalleFactura && this.jInternalFrameDetalleFormFactura!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.remove(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioFactura() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(FacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.facturaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, FacturaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoFactura=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarFactura=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalFactura=this.isPermisoActualizarFactura;
			this.isPermisoEliminarFactura=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosFactura=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaFactura=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaFactura=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoFactura=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteFactura=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioFactura=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoFactura=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoFactura=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarFactura=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormFactura=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarFactura=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.facturaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosFactura.setToolTipText(this.jTableDatosFactura.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioFactura(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioFactura(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(FacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(FacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioFactura() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetaFormaPago && this.facturaConstantesFunciones.mostrarDetaFormaPagoFactura && !FacturaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Deta Forma Pago");
			reporte.setsDescripcion("Deta Forma Pago");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosDetalleFactura && this.facturaConstantesFunciones.mostrarDetalleFacturaFactura && !FacturaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Factura");
			reporte.setsDescripcion("Detalle Factura");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyFacturaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.subclientesForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.transportesForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
				this.tipollamadasForeignKey=new ArrayList();
				this.tipofacturasForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.pedidosForeignKey=new ArrayList();
				this.responsablesForeignKey=new ArrayList();
				this.estadofisicofacturaempresasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(FacturaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyFacturaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySubClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoLlamadaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoFisicoFacturaEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySubClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.subclientesForeignKey==null||this.subclientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SubClienteConstantesFunciones.getArrayColumnasGlobalesSubCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SubClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SubClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosSubClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoLlamadaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipollamadasForeignKey==null||this.tipollamadasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoLlamadaConstantesFunciones.getArrayColumnasGlobalesTipoLlamada(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoLlamadaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoLlamadaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoLlamadasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipofacturasForeignKey==null||this.tipofacturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoFacturaConstantesFunciones.getArrayColumnasGlobalesTipoFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoFacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPedidoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.pedidosForeignKey==null||this.pedidosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PedidoConstantesFunciones.getArrayColumnasGlobalesPedido(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PedidoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PedidoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPedidosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ResponsableConstantesFunciones.SFINALQUERY;

				this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoFisicoFacturaEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadofisicofacturaempresasForeignKey==null||this.estadofisicofacturaempresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoFisicoFacturaEmpresaConstantesFunciones.getArrayColumnasGlobalesEstadoFisicoFacturaEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoFisicoFacturaEmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoFisicoFacturaEmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoFisicoFacturaEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			FacturaParameterReturnGeneral facturaReturnGeneral=new FacturaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_empresaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_empresaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_sucursalFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_sucursalFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_ejercicioFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_ejercicioFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_periodoFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_periodoFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_anioFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_anioFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_mesFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_mesFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_usuarioFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_usuarioFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_monedaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_monedaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_empleadoFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_empleadoFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_formatoFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_formatoFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_clienteFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_clienteFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_tipo_precioFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_tipo_precioFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalSubCliente="";

				if(((this.subclientesForeignKey==null||this.subclientesForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_sub_clienteFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_sub_clienteFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSubCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SubClienteConstantesFunciones.getArrayColumnasGlobalesSubCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSubCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SubClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalSubCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalSubCliente, "");
						finalQueryGlobalSubCliente+=SubClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSubClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSubCliente=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidSubClienteActual();
					}
				} else {
					finalQueryGlobalSubCliente="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_vendedorFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_vendedorFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalTransporte="";

				if(((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_transporteFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_transporteFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalTransporte, "");
						finalQueryGlobalTransporte+=TransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransporte=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTransporteActual();
					}
				} else {
					finalQueryGlobalTransporte="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_transportistaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_transportistaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}


				String finalQueryGlobalTipoLlamada="";

				if(((this.tipollamadasForeignKey==null||this.tipollamadasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_tipo_llamadaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_tipo_llamadaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoLlamada()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoLlamadaConstantesFunciones.getArrayColumnasGlobalesTipoLlamada(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoLlamada=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoLlamadaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoLlamada=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoLlamada, "");
						finalQueryGlobalTipoLlamada+=TipoLlamadaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoLlamadasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoLlamada=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTipoLlamadaActual();
					}
				} else {
					finalQueryGlobalTipoLlamada="NONE";
				}


				String finalQueryGlobalTipoFactura="";

				if(((this.tipofacturasForeignKey==null||this.tipofacturasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_tipo_facturaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_tipo_facturaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoFacturaConstantesFunciones.getArrayColumnasGlobalesTipoFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoFactura, "");
						finalQueryGlobalTipoFactura+=TipoFacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoFactura=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTipoFacturaActual();
					}
				} else {
					finalQueryGlobalTipoFactura="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_tipo_cambioFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_tipo_cambioFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_asiento_contableFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_asiento_contableFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalPedido="";

				if(((this.pedidosForeignKey==null||this.pedidosForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_pedidoFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_pedidoFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPedido()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PedidoConstantesFunciones.getArrayColumnasGlobalesPedido(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPedido=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PedidoConstantesFunciones.TABLENAME);

						finalQueryGlobalPedido=Funciones.GetFinalQueryAppend(finalQueryGlobalPedido, "");
						finalQueryGlobalPedido+=PedidoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPedidosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPedido=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidPedidoActual();
					}
				} else {
					finalQueryGlobalPedido="NONE";
				}


				String finalQueryGlobalResponsable="";

				if(((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_responsableFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_responsableFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalResponsable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

						finalQueryGlobalResponsable=Funciones.GetFinalQueryAppend(finalQueryGlobalResponsable, "");
						finalQueryGlobalResponsable+=ResponsableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalResponsable=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidResponsableActual();
					}
				} else {
					finalQueryGlobalResponsable="NONE";
				}


				String finalQueryGlobalEstadoFisicoFacturaEmpresa="";

				if(((this.estadofisicofacturaempresasForeignKey==null||this.estadofisicofacturaempresasForeignKey.size()<=0) && this.facturaConstantesFunciones.cargarid_estado_fisico_factura_empresaFactura)
					 || (this.esRecargarFks && this.facturaConstantesFunciones.cargarid_estado_fisico_factura_empresaFactura)) {

					if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFisicoFacturaEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoFisicoFacturaEmpresaConstantesFunciones.getArrayColumnasGlobalesEstadoFisicoFacturaEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoFisicoFacturaEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoFisicoFacturaEmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoFisicoFacturaEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoFisicoFacturaEmpresa, "");
						finalQueryGlobalEstadoFisicoFacturaEmpresa+=EstadoFisicoFacturaEmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoFisicoFacturaEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoFisicoFacturaEmpresa=" WHERE " + ConstantesSql.ID + "="+facturaSessionBean.getlidEstadoFisicoFacturaEmpresaActual();
					}
				} else {
					finalQueryGlobalEstadoFisicoFacturaEmpresa="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				facturaReturnGeneral=facturaLogic.cargarCombosLoteForeignKeyFactura(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalMoneda,finalQueryGlobalEmpleado,finalQueryGlobalFormato,finalQueryGlobalCliente,finalQueryGlobalTipoPrecio,finalQueryGlobalSubCliente,finalQueryGlobalVendedor,finalQueryGlobalTransporte,finalQueryGlobalTransportista,finalQueryGlobalTipoLlamada,finalQueryGlobalTipoFactura,finalQueryGlobalTipoCambio,finalQueryGlobalAsientoContable,finalQueryGlobalPedido,finalQueryGlobalResponsable,finalQueryGlobalEstadoFisicoFacturaEmpresa);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=facturaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=facturaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=facturaReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=facturaReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=facturaReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=facturaReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=facturaReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=facturaReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=facturaReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=facturaReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=facturaReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=facturaReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalSubCliente.equals("NONE")) {
				this.subclientesForeignKey=facturaReturnGeneral.getsubclientesForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=facturaReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalTransporte.equals("NONE")) {
				this.transportesForeignKey=facturaReturnGeneral.gettransportesForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=facturaReturnGeneral.gettransportistasForeignKey();
			}

			if(!finalQueryGlobalTipoLlamada.equals("NONE")) {
				this.tipollamadasForeignKey=facturaReturnGeneral.gettipollamadasForeignKey();
			}

			if(!finalQueryGlobalTipoFactura.equals("NONE")) {
				this.tipofacturasForeignKey=facturaReturnGeneral.gettipofacturasForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=facturaReturnGeneral.gettipocambiosForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=facturaReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalPedido.equals("NONE")) {
				this.pedidosForeignKey=facturaReturnGeneral.getpedidosForeignKey();
			}

			if(!finalQueryGlobalResponsable.equals("NONE")) {
				this.responsablesForeignKey=facturaReturnGeneral.getresponsablesForeignKey();
			}

			if(!finalQueryGlobalEstadoFisicoFacturaEmpresa.equals("NONE")) {
				this.estadofisicofacturaempresasForeignKey=facturaReturnGeneral.getestadofisicofacturaempresasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyFactura()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeySubCliente();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyTransporte();
			this.addItemDefectoCombosForeignKeyTransportista();
			this.addItemDefectoCombosForeignKeyTipoLlamada();
			this.addItemDefectoCombosForeignKeyTipoFactura();
			this.addItemDefectoCombosForeignKeyTipoCambio();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyPedido();
			this.addItemDefectoCombosForeignKeyResponsable();
			this.addItemDefectoCombosForeignKeyEstadoFisicoFacturaEmpresa();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySubCliente()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionSubCliente()) {
				SubCliente subcliente=new SubCliente();
				SubClienteConstantesFunciones.setSubClienteDescripcion(subcliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				subcliente.setId(null);

				if(!SubClienteConstantesFunciones.ExisteEnLista(this.subclientesForeignKey,subcliente,true)) {

					this.subclientesForeignKey.add(0,subcliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransporte()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				Transporte transporte=new Transporte();
				TransporteConstantesFunciones.setTransporteDescripcion(transporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				transporte.setId(null);

				if(!TransporteConstantesFunciones.ExisteEnLista(this.transportesForeignKey,transporte,true)) {

					this.transportesForeignKey.add(0,transporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoLlamada()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoLlamada()) {
				TipoLlamada tipollamada=new TipoLlamada();
				TipoLlamadaConstantesFunciones.setTipoLlamadaDescripcion(tipollamada,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipollamada.setId(null);

				if(!TipoLlamadaConstantesFunciones.ExisteEnLista(this.tipollamadasForeignKey,tipollamada,true)) {

					this.tipollamadasForeignKey.add(0,tipollamada);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoFactura()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFactura()) {
				TipoFactura tipofactura=new TipoFactura();
				TipoFacturaConstantesFunciones.setTipoFacturaDescripcion(tipofactura,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipofactura.setId(null);

				if(!TipoFacturaConstantesFunciones.ExisteEnLista(this.tipofacturasForeignKey,tipofactura,true)) {

					this.tipofacturasForeignKey.add(0,tipofactura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPedido()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionPedido()) {
				Pedido pedido=new Pedido();
				PedidoConstantesFunciones.setPedidoDescripcion(pedido,Constantes.SMENSAJE_ESCOJA_OPCION);
				pedido.setId(null);

				if(!PedidoConstantesFunciones.ExisteEnLista(this.pedidosForeignKey,pedido,true)) {

					this.pedidosForeignKey.add(0,pedido);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyResponsable()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				Responsable responsable=new Responsable();
				ResponsableConstantesFunciones.setResponsableDescripcion(responsable,Constantes.SMENSAJE_ESCOJA_OPCION);
				responsable.setId(null);

				if(!ResponsableConstantesFunciones.ExisteEnLista(this.responsablesForeignKey,responsable,true)) {

					this.responsablesForeignKey.add(0,responsable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoFisicoFacturaEmpresa()throws Exception {
		try {

			if(!this.facturaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFisicoFacturaEmpresa()) {
				EstadoFisicoFacturaEmpresa estadofisicofacturaempresa=new EstadoFisicoFacturaEmpresa();
				EstadoFisicoFacturaEmpresaConstantesFunciones.setEstadoFisicoFacturaEmpresaDescripcion(estadofisicofacturaempresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadofisicofacturaempresa.setId(null);

				if(!EstadoFisicoFacturaEmpresaConstantesFunciones.ExisteEnLista(this.estadofisicofacturaempresasForeignKey,estadofisicofacturaempresa,true)) {

					this.estadofisicofacturaempresasForeignKey.add(0,estadofisicofacturaempresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyFactura()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyFactura()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.factura.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.factura.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.factura.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.factura.setfecha_autorizacion(this.parametroGeneralUsuario.getfecha_sistema());
				this.factura.setfecha_cliente(this.parametroGeneralUsuario.getfecha_sistema());
				this.factura.setfecha_referendo(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyFactura();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyFactura(Factura factura)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(factura.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(factura.getid_formato(),false,"Formulario");
			this.setActualClienteForeignKey(factura.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(factura.getid_tipo_precio(),false,"Formulario");
			this.setActualSubClienteForeignKey(factura.getid_sub_cliente(),false,"Formulario");
			this.setActualVendedorForeignKey(factura.getid_vendedor(),false,"Formulario");
			this.setActualTransporteForeignKey(factura.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(factura.getid_transportista(),false,"Formulario");
			this.setActualTipoLlamadaForeignKey(factura.getid_tipo_llamada(),false,"Formulario");
			this.setActualTipoFacturaForeignKey(factura.getid_tipo_factura(),false,"Formulario");
			this.setActualTipoCambioForeignKey(factura.getid_tipo_cambio(),false,"Formulario");
			this.setActualAsientoContableForeignKey(factura.getid_asiento_contable(),false,"Formulario");
			this.setActualPedidoForeignKey(factura.getid_pedido(),false,"Formulario");
			this.setActualResponsableForeignKey(factura.getid_responsable(),false,"Formulario");
			this.setActualEstadoFisicoFacturaEmpresaForeignKey(factura.getid_estado_fisico_factura_empresa(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyFactura(Factura factura,String sTipoEvento)throws Exception {	
		try {
			
			

				if(factura.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoFactura")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(factura.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(factura.getCliente()!=null && !sTipoEvento.equals("id_clienteFactura")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(factura.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(factura.getVendedor()!=null && !sTipoEvento.equals("id_vendedorFactura")) { //sTipoEvento Evita Bucle Infinito

					this.vendedorsForeignKey=new ArrayList<Vendedor>();
					this.vendedorsForeignKey.add(factura.getVendedor());

					this.addItemDefectoCombosForeignKeyVendedor();
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				if(factura.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioFactura")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(factura.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				if(factura.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableFactura")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(factura.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyFactura()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.facturaConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(this.facturaConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualClienteForeignKey(this.facturaConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.facturaConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualSubClienteForeignKey(this.facturaConstantesFunciones.getid_sub_cliente(),false,"Formulario");
			this.setActualVendedorForeignKey(this.facturaConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualTransporteForeignKey(this.facturaConstantesFunciones.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.facturaConstantesFunciones.getid_transportista(),false,"Formulario");
			this.setActualTipoLlamadaForeignKey(this.facturaConstantesFunciones.getid_tipo_llamada(),false,"Formulario");
			this.setActualTipoFacturaForeignKey(this.facturaConstantesFunciones.getid_tipo_factura(),false,"Formulario");
			this.setActualTipoCambioForeignKey(this.facturaConstantesFunciones.getid_tipo_cambio(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.facturaConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualPedidoForeignKey(this.facturaConstantesFunciones.getid_pedido(),false,"Formulario");
			this.setActualResponsableForeignKey(this.facturaConstantesFunciones.getid_responsable(),false,"Formulario");
			this.setActualEstadoFisicoFacturaEmpresaForeignKey(this.facturaConstantesFunciones.getid_estado_fisico_factura_empresa(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyFactura()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormFactura!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormFactura!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroFactura()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyFactura()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameSubClientesForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameTransportesForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");
			this.cargarCombosFrameTipoLlamadasForeignKey("Todos");
			this.cargarCombosFrameTipoFacturasForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFramePedidosForeignKey("Todos");
			this.cargarCombosFrameResponsablesForeignKey("Todos");
			this.cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSubClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoLlamadasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePedidosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyFactura()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura!=null && this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	














































	
	

	public FacturaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public FacturaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public FacturaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.facturaSessionBean=new FacturaSessionBean(); 
		this.facturaConstantesFunciones=new FacturaConstantesFunciones(); 
		this.facturaBean=new Factura();//(this.facturaConstantesFunciones); 		
		this.facturaReturnGeneral=new FacturaParameterReturnGeneral(); 
		
		this.facturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.facturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public FacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public FacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public FacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessFactura(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.facturaConstantesFunciones=new FacturaConstantesFunciones(); 
			this.facturaBean=new Factura();//this.facturaConstantesFunciones); 			
			this.facturaReturnGeneral=new FacturaParameterReturnGeneral(); 
		
			FacturaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Factura Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.factura=new Factura();
			this.facturas = new ArrayList<Factura>();
			this.facturasAux = new ArrayList<Factura>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic=new FacturaLogic();
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			//this.facturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.facturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormFactura);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFactura);	
					}
					
					if(this.jInternalFrameImportacionFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFactura);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByFactura);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormFactura!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormFactura);
				this.jInternalFrameDetalleFormFactura.setVisible(false);
				this.jInternalFrameDetalleFormFactura.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFactura);
					this.jInternalFrameReporteDinamicoFactura.setVisible(false);
					this.jInternalFrameReporteDinamicoFactura.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionFactura);
					this.jInternalFrameImportacionFactura.setVisible(false);
					this.jInternalFrameImportacionFactura.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByFactura);
					this.jInternalFrameOrderByFactura.setVisible(false);
					this.jInternalFrameOrderByFactura.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idFacturaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=FacturaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.facturaReturnGeneral=new FacturaParameterReturnGeneral();
			
			this.facturaParameterGeneral=new FacturaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.facturaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(FacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.facturaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetaFormaPagoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(DetalleFacturaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaSessionBean.getEsGuardarRelacionado(),this.facturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaSessionBean.getEsGuardarRelacionado(),this.facturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaDuplicarFactura=true;
			this.isVisibilidadCeldaCopiarFactura=true;
			this.isVisibilidadCeldaVerFormFactura=true;
			this.isVisibilidadCeldaOrdenFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=false;
			this.isVisibilidadCeldaGuardarFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			
			
			this.isVisibilidadBusquedaPorNumeroPreImpreso=true;
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPedido=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdResponsable=true;
			this.isVisibilidadFK_IdSubCliente=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			this.isVisibilidadFK_IdTipoFactura=true;
			this.isVisibilidadFK_IdTipoLlamada=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdTransporte=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosFactura();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioFactura(false);
			
			this.setPermisosUsuarioFactura();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaSessionBean.getEsGuardarRelacionado() 
				|| (this.facturaSessionBean.getEsGuardarRelacionado() && this.facturaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioFacturaClasesRelacionadas();
			}
			
			if(this.facturaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioFacturaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!FacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosFactura();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualFactura();
			}
			
			if(!this.isPermisoBusquedaFactura) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasFactura.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioFactura,this.isPermisoPaginacionMedioFactura,this.isPermisoPaginacionTodoFactura);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(FacturaConstantesFunciones.getTiposSeleccionarFactura());
				
				this.tiposColumnasSelect=FacturaConstantesFunciones.getTiposSeleccionarFactura(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectFactura();				
				//this.tiposRelacionesSelect=FacturaConstantesFunciones.getTiposRelacionesFactura(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioFactura();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioFactura(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioFactura(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesFactura() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detaformapagoLogic=new DetaFormaPagoLogic();
			this.detallefacturaLogic=new DetalleFacturaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.monedaLogic=new MonedaLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.formatoLogic=new FormatoLogic();
			this.clienteLogic=new ClienteLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.subclienteLogic=new SubClienteLogic();
			this.vendedorLogic=new VendedorLogic();
			this.transporteLogic=new TransporteLogic();
			this.transportistaLogic=new TransportistaLogic();
			this.tipollamadaLogic=new TipoLlamadaLogic();
			this.tipofacturaLogic=new TipoFacturaLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.pedidoLogic=new PedidoLogic();
			this.responsableLogic=new ResponsableLogic();
			this.estadofisicofacturaempresaLogic=new EstadoFisicoFacturaEmpresaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				facturaImplementable= (FacturaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				facturaImplementableHome= (FacturaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.facturas= new ArrayList<Factura>();
			this.facturasEliminados= new ArrayList<Factura>();
						
			this.isEsNuevoFactura=false;
			this.esParaAccionDesdeFormularioFactura=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idEmpleadoActual=0L;
			this.idClienteActual=0L;
			this.idVendedorActual=0L;
			this.idTipoCambioActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.subclientesForeignKey=new ArrayList<SubCliente>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.transportesForeignKey=new ArrayList<Transporte>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			this.tipollamadasForeignKey=new ArrayList<TipoLlamada>() ;
			this.tipofacturasForeignKey=new ArrayList<TipoFactura>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.pedidosForeignKey=new ArrayList<Pedido>() ;
			this.responsablesForeignKey=new ArrayList<Responsable>() ;
			this.estadofisicofacturaempresasForeignKey=new ArrayList<EstadoFisicoFacturaEmpresa>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyFactura(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroFactura();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			FacturaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=FacturaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingFactura(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormFactura!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioFactura();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioFactura();
			}
			
			FacturaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasFactura.getTabCount(); i++) {
					this.jTabbedPaneBusquedasFactura.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasFactura.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessFactura(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Factura: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectFactura() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetaFormaPagoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetaFormaPagoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleFacturaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesFactura")) {
				iIndex=this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosFactura.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Facturas")) {
					if(!DetalleFacturaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessFactura();

						this.cargarParteTabPanelRelacionadaDetalleFactura(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Deta Forma Pagos")) {
					if(!DetaFormaPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessFactura();

						this.cargarParteTabPanelRelacionadaDetaFormaPago(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessFactura();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleFactura(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormFactura.cargarSessionConBeanSwingJInternalFrameDetalleFactura(false,true,iIndex);
		this.jButtonDetalleFacturaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleFactura();

		//this.jTabbedPaneRelacionesFactura.updateUI();
		//this.jTabbedPaneRelacionesFactura.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesFactura.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaDetaFormaPago(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormFactura.cargarSessionConBeanSwingJInternalFrameDetaFormaPago(false,true,iIndex);
		this.jButtonDetaFormaPagoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetaFormaPago();

		//this.jTabbedPaneRelacionesFactura.updateUI();
		//this.jTabbedPaneRelacionesFactura.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesFactura.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetaFormaPago")) {
				int row=this.jTableDatosFactura.getSelectedRow();
				jButtonDetaFormaPagoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("DetalleFactura")) {
				int row=this.jTableDatosFactura.getSelectedRow();
				jButtonDetalleFacturaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Deta Forma Pago")) {

					if(this.isTienePermisosDetaFormaPago && this.facturaConstantesFunciones.mostrarDetaFormaPagoFactura && !FacturaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Deta Forma Pagos"+"("+DetaFormaPagoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Deta Forma Pagos");

						if(facturaConstantesFunciones.resaltarDetaFormaPagoFactura!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(facturaConstantesFunciones.resaltarDetaFormaPagoFactura);
						}

						jmenuItem.setEnabled(this.facturaConstantesFunciones.activarDetaFormaPagoFactura);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetaFormaPago"));

						

						this.jInternalFrameDetalleFormFactura.jmenuDetalleFactura.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Detalle Factura")) {

					if(this.isTienePermisosDetalleFactura && this.facturaConstantesFunciones.mostrarDetalleFacturaFactura && !FacturaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Facturas"+"("+DetalleFacturaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Facturas");

						if(facturaConstantesFunciones.resaltarDetalleFacturaFactura!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(facturaConstantesFunciones.resaltarDetalleFacturaFactura);
						}

						jmenuItem.setEnabled(this.facturaConstantesFunciones.activarDetalleFacturaFactura);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleFactura"));

						

						this.jInternalFrameDetalleFormFactura.jmenuDetalleFactura.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyFactura(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyFacturaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyFactura();
		
		this.cargarCombosFrameForeignKeyFactura();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyFactura();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyFactura();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySubCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySubClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySubCliente();
				this.cargarCombosFrameSubClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSubCliente(this.subclientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransporte(this.transportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoLlamada(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoLlamadaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoLlamada();
				this.cargarCombosFrameTipoLlamadasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoLlamada(this.tipollamadasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoFactura();
				this.cargarCombosFrameTipoFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoFactura(this.tipofacturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPedido(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPedido();
				this.cargarCombosFramePedidosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPedido(this.pedidosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaResponsable(this.responsablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoFisicoFacturaEmpresa(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoFisicoFacturaEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoFisicoFacturaEmpresa();
				this.cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoFisicoFacturaEmpresa(this.estadofisicofacturaempresasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.facturaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			
			if(jTableDatosFactura.getRowCount()>=1) {
				jTableDatosFactura.removeRowSelectionInterval(0, jTableDatosFactura.getRowCount()-1);						
			}
			
			this.isEsNuevoFactura=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoFactura(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesFactura(true);			
			//this.factura=new Factura();
			//this.factura.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFactura(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFactura() ;
			
			if(FacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFactura(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.factura);	
			this.actualizarInformacion("INFO_PADRE",false,this.factura);				
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			if(this.facturaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Factura: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosFactura.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosFactura.getSelectedRows().length;			
			}
			
			facturasSeleccionados=this.getFacturasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoFactura--;			
				//Factura facturaAux= new Factura();			
				//facturaAux.setId(this.iIdNuevoFactura);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Factura facturaOrigen=new Factura();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Factura facturaOrigen : facturasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosFactura.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							facturaOrigen =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaOrigen =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaFactura();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.factura.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosFactura(facturaOrigen,this.factura,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaLogic.getFacturas().add(this.facturaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturas.add(this.facturaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaFactura(false);
				
				this.jTableDatosFactura.setRowSelectionInterval(this.getIndiceNuevoFactura(), this.getIndiceNuevoFactura());
				
				int iLastRow =  this.jTableDatosFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFactura(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();									
		
			Factura facturaOrigen=new Factura();
			Factura facturaDestino=new Factura();
				
			facturasSeleccionados=this.getFacturasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosFactura.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || facturasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosFactura.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaOrigen =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaOrigen =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaDestino =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaDestino =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				facturaOrigen =facturasSeleccionados.get(0);
				facturaDestino =facturasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosFactura(facturaOrigen,facturaDestino,true,false);
				
				facturaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaDestino,facturaLogic.getFacturas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaDestino,facturas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaFactura(false);
				
				//this.jTableDatosFactura.setRowSelectionInterval(this.getIndiceNuevoFactura(), this.getIndiceNuevoFactura());
				
				int iLastRow =  this.jTableDatosFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFactura(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormFactura.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesFactura.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasFactura.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesFactura.setVisible(!isVisible);
			this.jPanelPaginacionFactura.setVisible(!isVisible);
			this.jPanelAccionesFactura.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameFactura();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByFactura();
			
			this.abrirFrameOrderByFactura();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleFactura(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormFactura);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormFactura.isMaximum()) {
					this.jInternalFrameDetalleFormFactura.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormFactura.setSize(this.jInternalFrameDetalleFormFactura.iWidthFormulario,this.jInternalFrameDetalleFormFactura.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormFactura.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormFactura.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormFactura.isMaximum()) {
						this.jInternalFrameDetalleFormFactura.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth(),FacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth(),FacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth(),FacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleFacturaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleFactura();
					}

					if(DetaFormaPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetaFormaPago();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormFactura.setVisible(true);
	        this.jInternalFrameDetalleFormFactura.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByFactura==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFactura,false,this);
				} else {
					this.jInternalFrameOrderByFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFactura,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByFactura);
				this.jInternalFrameOrderByFactura.setVisible(false);
				this.jInternalFrameOrderByFactura.setSelected(false);
				
				this.jInternalFrameOrderByFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFactura"));
				
				this.inicializarActualizarBindingTablaOrderByFactura();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionFactura==null) {
				
				this.jInternalFrameImportacionFactura=new ImportacionJInternalFrame(FacturaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFactura);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionFactura);
				this.jInternalFrameImportacionFactura.setVisible(false);
				this.jInternalFrameImportacionFactura.setSelected(false);


				this.jInternalFrameImportacionFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFactura"));
				this.jInternalFrameImportacionFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFactura"));
				this.jInternalFrameImportacionFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFactura"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoFactura() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoFactura==null) {
				this.jInternalFrameReporteDinamicoFactura=new ReporteDinamicoJInternalFrame(FacturaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFactura);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFactura);
				this.jInternalFrameReporteDinamicoFactura.setVisible(false);
				this.jInternalFrameReporteDinamicoFactura.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFactura"));
				this.jInternalFrameReporteDinamicoFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFactura"));
				this.jInternalFrameReporteDinamicoFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFactura"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFactura();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleFactura() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFactura.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFactura.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFactura.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFactura.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaDetaFormaPago() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jScrollPanelDatosDetaFormaPago.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormFactura.jContentPaneDetalleFactura.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jScrollPanelDatosDetaFormaPago.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jScrollPanelDatosDetaFormaPago.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.jScrollPanelDatosDetaFormaPago.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleFactura() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormFactura);
			
	       	this.jInternalFrameDetalleFormFactura.setVisible(false);
	        this.jInternalFrameDetalleFormFactura.setSelected(false);
			
			//this.jInternalFrameDetalleFormFactura.dispose();
			//this.jInternalFrameDetalleFormFactura=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoFactura() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoFactura.setVisible(true);
	        this.jInternalFrameReporteDinamicoFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionFactura.setVisible(true);
	        this.jInternalFrameImportacionFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByFactura.setVisible(true);
	        this.jInternalFrameOrderByFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByFactura.setVisible(false);
	        this.jInternalFrameOrderByFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoFactura() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoFactura.setVisible(false);
	        this.jInternalFrameReporteDinamicoFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionFactura.setVisible(false);
	        this.jInternalFrameImportacionFactura.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderFactura.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarFactura(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarFactura(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFactura.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesFactura(true);
			//this.isEsNuevoFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFactura(false) ;
			
			if(facturaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.getEsGuardarRelacionado() && DetaFormaPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaFormaPagoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.getEsGuardarRelacionado() && DetalleFacturaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(FacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFactura(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaFacturaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarFactura(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFactura.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesFactura(true);
			//this.isEsNuevoFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.factura.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesFactura(false) ;
			
			if(FacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFactura(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Empleado")) {
				if(!this.facturaConstantesFunciones.cargarid_empleadoFactura) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFactura(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.facturaConstantesFunciones.cargarid_clienteFactura) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFactura(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("Vendedor")) {
				if(!this.facturaConstantesFunciones.cargarid_vendedorFactura) {
					this.cargarCombosVendedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFactura(false,false);
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_vendedor (id);

				this.recargarComboTablaVendedor(this.vendedorsForeignKey);

			}
			
			if(sType.equals("TipoCambio")) {
				if(!this.facturaConstantesFunciones.cargarid_tipo_cambioFactura) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFactura(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.facturaConstantesFunciones.cargarid_asiento_contableFactura) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFactura(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaSubCliente(List<SubCliente> subclientesForeignKey)throws Exception{
		TableColumn tableColumnSubCliente=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDSUBCLIENTE));
		TableCellEditor tableCellEditorSubCliente =tableColumnSubCliente.getCellEditor();

		SubClienteTableCell subclienteTableCellFk=(SubClienteTableCell)tableCellEditorSubCliente;

		if(subclienteTableCellFk!=null) {
			subclienteTableCellFk.setsubclientesForeignKey(subclientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//subclienteTableCellFk.setRowActual(intSelectedRow);
			//subclienteTableCellFk.setsubclientesForeignKeyActual(subclientesForeignKey);
		//}


		if(subclienteTableCellFk!=null) {
			subclienteTableCellFk.RecargarSubClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransporte(List<Transporte> transportesForeignKey)throws Exception{
		TableColumn tableColumnTransporte=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTRANSPORTE));
		TableCellEditor tableCellEditorTransporte =tableColumnTransporte.getCellEditor();

		TransporteTableCell transporteTableCellFk=(TransporteTableCell)tableCellEditorTransporte;

		if(transporteTableCellFk!=null) {
			transporteTableCellFk.settransportesForeignKey(transportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transporteTableCellFk.setRowActual(intSelectedRow);
			//transporteTableCellFk.settransportesForeignKeyActual(transportesForeignKey);
		//}


		if(transporteTableCellFk!=null) {
			transporteTableCellFk.RecargarTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoLlamada(List<TipoLlamada> tipollamadasForeignKey)throws Exception{
		TableColumn tableColumnTipoLlamada=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA));
		TableCellEditor tableCellEditorTipoLlamada =tableColumnTipoLlamada.getCellEditor();

		TipoLlamadaTableCell tipollamadaTableCellFk=(TipoLlamadaTableCell)tableCellEditorTipoLlamada;

		if(tipollamadaTableCellFk!=null) {
			tipollamadaTableCellFk.settipollamadasForeignKey(tipollamadasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipollamadaTableCellFk.setRowActual(intSelectedRow);
			//tipollamadaTableCellFk.settipollamadasForeignKeyActual(tipollamadasForeignKey);
		//}


		if(tipollamadaTableCellFk!=null) {
			tipollamadaTableCellFk.RecargarTipoLlamadasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoFactura(List<TipoFactura> tipofacturasForeignKey)throws Exception{
		TableColumn tableColumnTipoFactura=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOFACTURA));
		TableCellEditor tableCellEditorTipoFactura =tableColumnTipoFactura.getCellEditor();

		TipoFacturaTableCell tipofacturaTableCellFk=(TipoFacturaTableCell)tableCellEditorTipoFactura;

		if(tipofacturaTableCellFk!=null) {
			tipofacturaTableCellFk.settipofacturasForeignKey(tipofacturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipofacturaTableCellFk.setRowActual(intSelectedRow);
			//tipofacturaTableCellFk.settipofacturasForeignKeyActual(tipofacturasForeignKey);
		//}


		if(tipofacturaTableCellFk!=null) {
			tipofacturaTableCellFk.RecargarTipoFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPedido(List<Pedido> pedidosForeignKey)throws Exception{
		TableColumn tableColumnPedido=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDPEDIDO));
		TableCellEditor tableCellEditorPedido =tableColumnPedido.getCellEditor();

		PedidoTableCell pedidoTableCellFk=(PedidoTableCell)tableCellEditorPedido;

		if(pedidoTableCellFk!=null) {
			pedidoTableCellFk.setpedidosForeignKey(pedidosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//pedidoTableCellFk.setRowActual(intSelectedRow);
			//pedidoTableCellFk.setpedidosForeignKeyActual(pedidosForeignKey);
		//}


		if(pedidoTableCellFk!=null) {
			pedidoTableCellFk.RecargarPedidosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaResponsable(List<Responsable> responsablesForeignKey)throws Exception{
		TableColumn tableColumnResponsable=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDRESPONSABLE));
		TableCellEditor tableCellEditorResponsable =tableColumnResponsable.getCellEditor();

		ResponsableTableCell responsableTableCellFk=(ResponsableTableCell)tableCellEditorResponsable;

		if(responsableTableCellFk!=null) {
			responsableTableCellFk.setresponsablesForeignKey(responsablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//responsableTableCellFk.setRowActual(intSelectedRow);
			//responsableTableCellFk.setresponsablesForeignKeyActual(responsablesForeignKey);
		//}


		if(responsableTableCellFk!=null) {
			responsableTableCellFk.RecargarResponsablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoFisicoFacturaEmpresa(List<EstadoFisicoFacturaEmpresa> estadofisicofacturaempresasForeignKey)throws Exception{
		TableColumn tableColumnEstadoFisicoFacturaEmpresa=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA));
		TableCellEditor tableCellEditorEstadoFisicoFacturaEmpresa =tableColumnEstadoFisicoFacturaEmpresa.getCellEditor();

		EstadoFisicoFacturaEmpresaTableCell estadofisicofacturaempresaTableCellFk=(EstadoFisicoFacturaEmpresaTableCell)tableCellEditorEstadoFisicoFacturaEmpresa;

		if(estadofisicofacturaempresaTableCellFk!=null) {
			estadofisicofacturaempresaTableCellFk.setestadofisicofacturaempresasForeignKey(estadofisicofacturaempresasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadofisicofacturaempresaTableCellFk.setRowActual(intSelectedRow);
			//estadofisicofacturaempresaTableCellFk.setestadofisicofacturaempresasForeignKeyActual(estadofisicofacturaempresasForeignKey);
		//}


		if(estadofisicofacturaempresaTableCellFk!=null) {
			estadofisicofacturaempresaTableCellFk.RecargarEstadoFisicoFacturaEmpresasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_vendedor (Long id) throws Exception {
		this.setActualVendedorForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesFactura(false);
			
			//if(!this.isEsNuevoFactura) {								
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				
			}
			
			if(this.permiteMantenimiento(this.factura)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoFactura=true;
					this.inicializarActualizarBindingTablaFactura(false);
					this.isEsNuevoFactura=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoFactura=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoFactura=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFactura(false);
				
				this.habilitarDeshabilitarControlesFactura(false);
			
												
				
				if(FacturaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleFactura();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoFacturaActionPerformed(evt,facturaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualFactura(this.factura,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosFactura.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,facturaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.factura.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosFactura.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				this.factura.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				this.factura.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.factura)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((FacturaModel) this.jTableDatosFactura.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoFactura=true;
				this.inicializarActualizarBindingTablaFactura(false);
				this.isEsNuevoFactura=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFactura(false);
				
				this.habilitarDeshabilitarControlesFactura(false);
				
				
				
				if(FacturaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleFactura();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarFacturaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosFactura.getRowCount()>=1) {
				jTableDatosFactura.removeRowSelectionInterval(0, jTableDatosFactura.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesFactura(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaFactura(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFactura(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFactura(false) ;
			
			this.isEsNuevoFactura=false;
			
			if(FacturaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleFactura();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingFactura(false);
				
				//SI ES MANUAL
				if(FacturaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualFactura();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoFactura--;			
			//Factura facturaAux= new Factura();			
			//facturaAux.setId(this.iIdNuevoFactura);
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaFactura();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
			
			this.factura.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.facturaLogic.getFacturas().add(this.facturaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.facturas.add(this.facturaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaFactura(false);
			
			this.jTableDatosFactura.setRowSelectionInterval(this.getIndiceNuevoFactura(), this.getIndiceNuevoFactura());
			
			int iLastRow =  this.jTableDatosFactura.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosFactura.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosFactura.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaFactura(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingFactura(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFactura(false);
			
			//SI ES MANUAL
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFactura();
			}
			
			//this.abrirFrameTreeFactura();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE FacturaS ?", "MANTENIMIENTO DE Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionFactura.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralFactura();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.facturaReturnGeneral=facturaLogic.procesarImportacionFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.facturaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarFacturaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionFactura.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionFactura.setFileImportacion(this.jInternalFrameImportacionFactura.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionFactura.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionFactura.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionFactura.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionFactura.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		

		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("FacturaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"FacturaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteFacturas("Todos",facturasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroPreImpreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroPreImpreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroPreImpreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroPreImpreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_NUMERODIAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDias_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDias_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDias_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDias_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DIRECCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TELEFONO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefono_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefono_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefono_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefono_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDSUBCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_SubCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_SubCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_SubCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_SubCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_ORDEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_den_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_den_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_den_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_den_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoLlamada_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoLlamada_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoLlamada_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoLlamada_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_HORAINICIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_raInicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_raInicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_raInicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_raInicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_HORAFIN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_raFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_raFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_raFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_raFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_CUPO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_po_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_po_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_po_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_po_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_SALDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ldo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ldo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ldo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ldo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DOCUMENTOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cumentos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cumentos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cumentos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cumentos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_SUMAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_man_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_man_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_man_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_man_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALSINIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talSinIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talSinIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talSinIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talSinIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALFLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talFlete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talFlete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talFlete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talFlete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALOTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talOtro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talOtro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talOtro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talOtro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_ULTIMOCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_timoCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_timoCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_timoCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_timoCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nanciamiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nanciamiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nanciamiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nanciamiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_MARGENUTILIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rgenUtilidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rgenUtilidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rgenUtilidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rgenUtilidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_ANTICIPO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ticipo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ticipo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ticipo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ticipo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_OTROSVALORES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rosValores_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rosValores_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rosValores_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rosValores_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALRETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talConsumoEspecial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talConsumoEspecial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talConsumoEspecial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talConsumoEspecial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_RETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_ESCLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDPEDIDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDRESPONSABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Responsable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Responsable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Responsable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Responsable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoFisicoFacturaEmpresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoFisicoFacturaEmpresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoFisicoFacturaEmpresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoFisicoFacturaEmpresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHACLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_NUMERODAU:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDau_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDau_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDau_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDau_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_NUMEROREFERENDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroReferendo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroReferendo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroReferendo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroReferendo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_FECHAREFERENDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaReferendo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaReferendo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaReferendo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaReferendo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaConstantesFunciones.LABEL_AFOROREFERENDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_oroReferendo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_oroReferendo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_oroReferendo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_oroReferendo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoFactura.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case FacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case FacturaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case FacturaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case FacturaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case FacturaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case FacturaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case FacturaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoria="numero_pre_impreso";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoria="numero_dias";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case FacturaConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case FacturaConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case FacturaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case FacturaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case FacturaConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoria="direccion";
					break;

				case FacturaConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case FacturaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case FacturaConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoria="telefono";
					break;

				case FacturaConstantesFunciones.LABEL_IDSUBCLIENTE:
					sNombreCampoCategoria="id_sub_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoria="id_transporte";
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case FacturaConstantesFunciones.LABEL_ORDEN:
					sNombreCampoCategoria="orden";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA:
					sNombreCampoCategoria="id_tipo_llamada";
					break;

				case FacturaConstantesFunciones.LABEL_HORAINICIO:
					sNombreCampoCategoria="hora_inicio";
					break;

				case FacturaConstantesFunciones.LABEL_HORAFIN:
					sNombreCampoCategoria="hora_fin";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOFACTURA:
					sNombreCampoCategoria="id_tipo_factura";
					break;

				case FacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case FacturaConstantesFunciones.LABEL_CUPO:
					sNombreCampoCategoria="cupo";
					break;

				case FacturaConstantesFunciones.LABEL_SALDO:
					sNombreCampoCategoria="saldo";
					break;

				case FacturaConstantesFunciones.LABEL_DOCUMENTOS:
					sNombreCampoCategoria="documentos";
					break;

				case FacturaConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoria="disponible";
					break;

				case FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoria="porcentaje_descuento";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case FacturaConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoria="suman";
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoria="total_sin_iva";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoria="total_descuento";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALFLETE:
					sNombreCampoCategoria="total_flete";
					break;

				case FacturaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case FacturaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoria="total_otro";
					break;

				case FacturaConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoria="ultimo_costo";
					break;

				case FacturaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case FacturaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoria="financiamiento";
					break;

				case FacturaConstantesFunciones.LABEL_MARGENUTILIDAD:
					sNombreCampoCategoria="margen_utilidad";
					break;

				case FacturaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case FacturaConstantesFunciones.LABEL_ANTICIPO:
					sNombreCampoCategoria="anticipo";
					break;

				case FacturaConstantesFunciones.LABEL_OTROSVALORES:
					sNombreCampoCategoria="otros_valores";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALRETENCION:
					sNombreCampoCategoria="total_retencion";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL:
					sNombreCampoCategoria="total_consumo_especial";
					break;

				case FacturaConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoria="retencion";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case FacturaConstantesFunciones.LABEL_ESCLIENTE:
					sNombreCampoCategoria="es_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case FacturaConstantesFunciones.LABEL_IDPEDIDO:
					sNombreCampoCategoria="id_pedido";
					break;

				case FacturaConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoria="id_responsable";
					break;

				case FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA:
					sNombreCampoCategoria="id_estado_fisico_factura_empresa";
					break;

				case FacturaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoria="fecha_autorizacion";
					break;

				case FacturaConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoria="fecha_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoria="numero_documento";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODAU:
					sNombreCampoCategoria="numero_dau";
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROREFERENDO:
					sNombreCampoCategoria="numero_referendo";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAREFERENDO:
					sNombreCampoCategoria="fecha_referendo";
					break;

				case FacturaConstantesFunciones.LABEL_AFOROREFERENDO:
					sNombreCampoCategoria="aforo_referendo";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case FacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case FacturaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case FacturaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case FacturaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case FacturaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case FacturaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case FacturaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoriaValor="numero_pre_impreso";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoriaValor="numero_dias";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case FacturaConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case FacturaConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case FacturaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case FacturaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case FacturaConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoriaValor="direccion";
					break;

				case FacturaConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case FacturaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case FacturaConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoriaValor="telefono";
					break;

				case FacturaConstantesFunciones.LABEL_IDSUBCLIENTE:
					sNombreCampoCategoriaValor="id_sub_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoriaValor="id_transporte";
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case FacturaConstantesFunciones.LABEL_ORDEN:
					sNombreCampoCategoriaValor="orden";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA:
					sNombreCampoCategoriaValor="id_tipo_llamada";
					break;

				case FacturaConstantesFunciones.LABEL_HORAINICIO:
					sNombreCampoCategoriaValor="hora_inicio";
					break;

				case FacturaConstantesFunciones.LABEL_HORAFIN:
					sNombreCampoCategoriaValor="hora_fin";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOFACTURA:
					sNombreCampoCategoriaValor="id_tipo_factura";
					break;

				case FacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case FacturaConstantesFunciones.LABEL_CUPO:
					sNombreCampoCategoriaValor="cupo";
					break;

				case FacturaConstantesFunciones.LABEL_SALDO:
					sNombreCampoCategoriaValor="saldo";
					break;

				case FacturaConstantesFunciones.LABEL_DOCUMENTOS:
					sNombreCampoCategoriaValor="documentos";
					break;

				case FacturaConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoriaValor="disponible";
					break;

				case FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					sNombreCampoCategoriaValor="porcentaje_descuento";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case FacturaConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoriaValor="suman";
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoriaValor="total_sin_iva";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoriaValor="total_descuento";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALFLETE:
					sNombreCampoCategoriaValor="total_flete";
					break;

				case FacturaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case FacturaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALOTRO:
					sNombreCampoCategoriaValor="total_otro";
					break;

				case FacturaConstantesFunciones.LABEL_ULTIMOCOSTO:
					sNombreCampoCategoriaValor="ultimo_costo";
					break;

				case FacturaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case FacturaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoriaValor="financiamiento";
					break;

				case FacturaConstantesFunciones.LABEL_MARGENUTILIDAD:
					sNombreCampoCategoriaValor="margen_utilidad";
					break;

				case FacturaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case FacturaConstantesFunciones.LABEL_ANTICIPO:
					sNombreCampoCategoriaValor="anticipo";
					break;

				case FacturaConstantesFunciones.LABEL_OTROSVALORES:
					sNombreCampoCategoriaValor="otros_valores";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALRETENCION:
					sNombreCampoCategoriaValor="total_retencion";
					break;

				case FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL:
					sNombreCampoCategoriaValor="total_consumo_especial";
					break;

				case FacturaConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoriaValor="retencion";
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case FacturaConstantesFunciones.LABEL_ESCLIENTE:
					sNombreCampoCategoriaValor="es_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case FacturaConstantesFunciones.LABEL_IDPEDIDO:
					sNombreCampoCategoriaValor="id_pedido";
					break;

				case FacturaConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoriaValor="id_responsable";
					break;

				case FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA:
					sNombreCampoCategoriaValor="id_estado_fisico_factura_empresa";
					break;

				case FacturaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoriaValor="fecha_autorizacion";
					break;

				case FacturaConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoriaValor="fecha_cliente";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoriaValor="numero_documento";
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODAU:
					sNombreCampoCategoriaValor="numero_dau";
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROREFERENDO:
					sNombreCampoCategoriaValor="numero_referendo";
					break;

				case FacturaConstantesFunciones.LABEL_FECHAREFERENDO:
					sNombreCampoCategoriaValor="fecha_referendo";
					break;

				case FacturaConstantesFunciones.LABEL_AFOROREFERENDO:
					sNombreCampoCategoriaValor="aforo_referendo";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoFactura.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFactura.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case FacturaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case FacturaConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case FacturaConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case FacturaConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case FacturaConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case FacturaConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Pre Impreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_pre_impreso");
					break;

				case FacturaConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODIAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Dia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_dias");
					break;

				case FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case FacturaConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case FacturaConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case FacturaConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case FacturaConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case FacturaConstantesFunciones.LABEL_DIRECCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion");
					break;

				case FacturaConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case FacturaConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case FacturaConstantesFunciones.LABEL_TELEFONO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono");
					break;

				case FacturaConstantesFunciones.LABEL_IDSUBCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Contacto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sub_cliente");
					break;

				case FacturaConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transporte");
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case FacturaConstantesFunciones.LABEL_ORDEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Orden",sNombreCampoCategoria,sNombreCampoCategoriaValor,"orden");
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Llamada",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_llamada");
					break;

				case FacturaConstantesFunciones.LABEL_HORAINICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Hora Inicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"hora_inicio");
					break;

				case FacturaConstantesFunciones.LABEL_HORAFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Hora Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"hora_fin");
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_factura");
					break;

				case FacturaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case FacturaConstantesFunciones.LABEL_CUPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cupo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cupo");
					break;

				case FacturaConstantesFunciones.LABEL_SALDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Saldo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"saldo");
					break;

				case FacturaConstantesFunciones.LABEL_DOCUMENTOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Documentos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"documentos");
					break;

				case FacturaConstantesFunciones.LABEL_DISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"disponible");
					break;

				case FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_descuento");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Con Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case FacturaConstantesFunciones.LABEL_SUMAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Suman",sNombreCampoCategoria,sNombreCampoCategoriaValor,"suman");
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALSINIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_sin_iva");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_descuento");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALFLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_flete");
					break;

				case FacturaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case FacturaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALOTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_otro");
					break;

				case FacturaConstantesFunciones.LABEL_ULTIMOCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ultimo Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ultimo_costo");
					break;

				case FacturaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case FacturaConstantesFunciones.LABEL_FINANCIAMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Financiamiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"financiamiento");
					break;

				case FacturaConstantesFunciones.LABEL_MARGENUTILIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Margen Utilidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"margen_utilidad");
					break;

				case FacturaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case FacturaConstantesFunciones.LABEL_ANTICIPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anticipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anticipo");
					break;

				case FacturaConstantesFunciones.LABEL_OTROSVALORES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros Valores",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros_valores");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALRETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_retencion");
					break;

				case FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Consumo Especial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_consumo_especial");
					break;

				case FacturaConstantesFunciones.LABEL_RETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"retencion");
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case FacturaConstantesFunciones.LABEL_ESCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_cliente");
					break;

				case FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case FacturaConstantesFunciones.LABEL_IDPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Idpedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pedido");
					break;

				case FacturaConstantesFunciones.LABEL_IDRESPONSABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Responsable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_responsable");
					break;

				case FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Fisico",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_fisico_factura_empresa");
					break;

				case FacturaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_autorizacion");
					break;

				case FacturaConstantesFunciones.LABEL_FECHACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_cliente");
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_documento");
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODAU:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Dau",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_dau");
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROREFERENDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Referendo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_referendo");
					break;

				case FacturaConstantesFunciones.LABEL_FECHAREFERENDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Referendo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_referendo");
					break;

				case FacturaConstantesFunciones.LABEL_AFOROREFERENDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Aforo Referendo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"aforo_referendo");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoFacturaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Facturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case FacturaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getnumero_pre_impreso());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODIAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODIAS);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getnumero_dias());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DIRECCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DIRECCION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdireccion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_RUC);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TELEFONO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TELEFONO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettelefono());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDSUBCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUBCLIENTE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getsubcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_ORDEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_ORDEN);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getorden());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettipollamada_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_HORAINICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAINICIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gethora_inicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_HORAFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAFIN);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gethora_fin());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOFACTURA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettipofactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_CUPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_CUPO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getcupo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_SALDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_SALDO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getsaldo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DOCUMENTOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DOCUMENTOS);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdocumentos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DISPONIBLE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdisponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getporcentaje_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_SUMAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_SUMAN);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getsuman());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALSINIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALSINIVA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_sin_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALFLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALFLETE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_flete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALOTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALOTRO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_otro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_ULTIMOCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getultimo_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfinanciamiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_MARGENUTILIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getmargen_utilidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_ANTICIPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_ANTICIPO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getanticipo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_OTROSVALORES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_OTROSVALORES);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getotros_valores());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALRETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALRETENCION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettotal_consumo_especial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_RETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_RETENCION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getretencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_ESCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_ESCLIENTE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getes_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPEDIDO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getpedido_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDRESPONSABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDRESPONSABLE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getresponsable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getestadofisicofacturaempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHACLIENTE);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getnumero_documento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_NUMERODAU:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODAU);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getnumero_dau());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_NUMEROREFERENDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getnumero_referendo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_FECHAREFERENDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAREFERENDO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getfecha_referendo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaConstantesFunciones.LABEL_AFOROREFERENDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaConstantesFunciones.LABEL_AFOROREFERENDO);
					iRow++;

					for(Factura factura:facturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(factura.getaforo_referendo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelFactura(row);				
			//	iRow++;
			//}				
			
			//for(Factura facturaAux:facturasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelFactura(facturaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFactura(false);
			
			//SI ES MANUAL
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFactura();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFactura(false);
			
			//SI ES MANUAL
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFactura();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFactura(false);
			
			//SI ES MANUAL
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFactura();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaFactura() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosFactura.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosFactura.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosFactura.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosFactura.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosFactura.setMinimumSize(dimensionMinimum);
		this.jTableDatosFactura.setMaximumSize(dimensionMaximum);
		this.jTableDatosFactura.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingFactura(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingFactura(esInicializar,true);
	}
	
	public void inicializarActualizarBindingFactura(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaFactura(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesFactura(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasFactura(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFactura(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesFactura(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !FacturaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!FacturaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualFactura() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaFactura();
		
		this.inicializarActualizarBindingBotonesManualFactura(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualFactura();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFactura() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualFactura(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualFactura(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosFactura.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosFactura.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteFactura.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormFactura!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionNuevoFactura.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionSinCerrarFactura.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionSinMensajeFactura.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosFactura.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosFactura.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteFactura.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormFactura!=null) {
				this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionNuevoFactura.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionSinCerrarFactura.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormFactura.jCheckBoxPostAccionSinMensajeFactura.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionFactura.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionFactura.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesFactura.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoFactura!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesFactura.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesFactura.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoFactura!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesFactura.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralFactura.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesFactura(Boolean esInicializar) throws Exception {
		try	{	
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualFactura(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesFactura() throws Exception {
		try	{
			if(FacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFactura();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFactura() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFactura() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesFactura.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesFactura.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesFactura.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionFactura.addItem(reporte);
			}
			
			
			if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarFactura.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarFactura.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFactura();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFactura() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFactura!=null) {
				this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFactura!=null) {
				this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoFactura!=null) {
				
				if(this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFactura.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoFactura.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFactura.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=FacturaConstantesFunciones.getTiposSeleccionarFactura(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=FacturaConstantesFunciones.getTiposSeleccionarFactura(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFactura.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoFactura.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=FacturaConstantesFunciones.getTiposSeleccionarFactura(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFactura.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoFactura.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualFactura()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.numero_pre_impresoBusquedaPorNumeroPreImpreso=this.jTextFieldnumero_pre_impresoBusquedaPorNumeroPreImpresoFactura.getText();
		if(this.jComboBoxid_clienteFK_IdClienteFactura.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.getSelectedItem()!=null){this.id_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa=((EstadoFisicoFacturaEmpresa)this.jComboBoxid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_pedidoFK_IdPedidoFactura.getSelectedItem()!=null){this.id_pedidoFK_IdPedido=((Pedido)this.jComboBoxid_pedidoFK_IdPedidoFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_responsableFK_IdResponsableFactura.getSelectedItem()!=null){this.id_responsableFK_IdResponsable=((Responsable)this.jComboBoxid_responsableFK_IdResponsableFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.getSelectedItem()!=null){this.id_sub_clienteFK_IdSubCliente=((SubCliente)this.jComboBoxid_sub_clienteFK_IdSubClienteFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_transportistaFK_IdTransportistaFactura.getSelectedItem()!=null){this.id_transportistaFK_IdTransportista=((Transportista)this.jComboBoxid_transportistaFK_IdTransportistaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorFactura.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorFactura.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasFactura(Boolean esInicializar) throws Exception {				
		if(FacturaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualFactura();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaFactura() throws Exception {
		this.inicializarActualizarBindingTablaFactura(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByFactura() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByFactura.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFactura.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFactura.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosFacturaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFactura.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByFactura.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaFactura(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=facturaLogic.getFacturas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=facturas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosFactura.setModel(new FacturaModel(this.facturaLogic.getFacturas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosFactura.setModel(new FacturaModel(this.facturas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByFactura!=null && this.jInternalFrameOrderByFactura.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByFactura();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+FacturaConstantesFunciones.SCLASSWEBTITULO,facturaConstantesFunciones.resaltarSeleccionarFactura,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+FacturaConstantesFunciones.SCLASSWEBTITULO,facturaConstantesFunciones.resaltarSeleccionarFactura,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_ID));

		if(this.facturaConstantesFunciones.mostraridFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltaridFactura,this.facturaConstantesFunciones.activaridFactura,iSizeTabla,this,true,"idFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltaridFactura,this.facturaConstantesFunciones.activaridFactura,this,true,"idFactura","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.facturaConstantesFunciones.mostrarid_empresaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.facturaConstantesFunciones.resaltarid_empresaFactura,this,this.facturaConstantesFunciones.activarid_empresaFactura,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.facturaConstantesFunciones.resaltarid_empresaFactura,this,this.facturaConstantesFunciones.activarid_empresaFactura,false,"id_empresaFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.facturaConstantesFunciones.mostrarid_sucursalFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.facturaConstantesFunciones.resaltarid_sucursalFactura,this,this.facturaConstantesFunciones.activarid_sucursalFactura,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.facturaConstantesFunciones.resaltarid_sucursalFactura,this,this.facturaConstantesFunciones.activarid_sucursalFactura,false,"id_sucursalFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.facturaConstantesFunciones.mostrarid_ejercicioFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaConstantesFunciones.resaltarid_ejercicioFactura,this,this.facturaConstantesFunciones.activarid_ejercicioFactura,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaConstantesFunciones.resaltarid_ejercicioFactura,this,this.facturaConstantesFunciones.activarid_ejercicioFactura,false,"id_ejercicioFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDPERIODO));

		if(this.facturaConstantesFunciones.mostrarid_periodoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.facturaConstantesFunciones.resaltarid_periodoFactura,this,this.facturaConstantesFunciones.activarid_periodoFactura,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.facturaConstantesFunciones.resaltarid_periodoFactura,this,this.facturaConstantesFunciones.activarid_periodoFactura,false,"id_periodoFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDANIO));

		if(this.facturaConstantesFunciones.mostrarid_anioFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.facturaConstantesFunciones.resaltarid_anioFactura,this,this.facturaConstantesFunciones.activarid_anioFactura,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.facturaConstantesFunciones.resaltarid_anioFactura,this,this.facturaConstantesFunciones.activarid_anioFactura,true,"id_anioFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDMES));

		if(this.facturaConstantesFunciones.mostrarid_mesFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.facturaConstantesFunciones.resaltarid_mesFactura,this,this.facturaConstantesFunciones.activarid_mesFactura,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.facturaConstantesFunciones.resaltarid_mesFactura,this,this.facturaConstantesFunciones.activarid_mesFactura,true,"id_mesFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDUSUARIO));

		if(this.facturaConstantesFunciones.mostrarid_usuarioFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.facturaConstantesFunciones.resaltarid_usuarioFactura,this,this.facturaConstantesFunciones.activarid_usuarioFactura,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.facturaConstantesFunciones.resaltarid_usuarioFactura,this,this.facturaConstantesFunciones.activarid_usuarioFactura,false,"id_usuarioFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO));

		if(this.facturaConstantesFunciones.mostrarnumero_pre_impresoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltarnumero_pre_impresoFactura,this.facturaConstantesFunciones.activarnumero_pre_impresoFactura,iSizeTabla,this,true,"numero_pre_impresoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarnumero_pre_impresoFactura,this.facturaConstantesFunciones.activarnumero_pre_impresoFactura,this,true,"numero_pre_impresoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_FECHAEMISION));

		if(this.facturaConstantesFunciones.mostrarfecha_emisionFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaConstantesFunciones.resaltarfecha_emisionFactura,this.facturaConstantesFunciones.activarfecha_emisionFactura,iSizeTabla,this,true,"fecha_emisionFactura","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaConstantesFunciones.resaltarfecha_emisionFactura,this.facturaConstantesFunciones.activarfecha_emisionFactura,this,true,"fecha_emisionFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_NUMERODIAS));

		if(this.facturaConstantesFunciones.mostrarnumero_diasFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_NUMERODIAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarnumero_diasFactura,this.facturaConstantesFunciones.activarnumero_diasFactura,iSizeTabla,this,true,"numero_diasFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarnumero_diasFactura,this.facturaConstantesFunciones.activarnumero_diasFactura,this,true,"numero_diasFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.facturaConstantesFunciones.mostrarfecha_vencimientoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaConstantesFunciones.resaltarfecha_vencimientoFactura,this.facturaConstantesFunciones.activarfecha_vencimientoFactura,iSizeTabla,this,true,"fecha_vencimientoFactura","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaConstantesFunciones.resaltarfecha_vencimientoFactura,this.facturaConstantesFunciones.activarfecha_vencimientoFactura,this,true,"fecha_vencimientoFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDMONEDA));

		if(this.facturaConstantesFunciones.mostrarid_monedaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.facturaConstantesFunciones.resaltarid_monedaFactura,this,this.facturaConstantesFunciones.activarid_monedaFactura,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.facturaConstantesFunciones.resaltarid_monedaFactura,this,this.facturaConstantesFunciones.activarid_monedaFactura,false,"id_monedaFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_COTIZACION));

		if(this.facturaConstantesFunciones.mostrarcotizacionFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarcotizacionFactura,this.facturaConstantesFunciones.activarcotizacionFactura,iSizeTabla,this,true,"cotizacionFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarcotizacionFactura,this.facturaConstantesFunciones.activarcotizacionFactura,this,true,"cotizacionFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.facturaConstantesFunciones.mostrarid_empleadoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaConstantesFunciones.resaltarid_empleadoFactura,this,this.facturaConstantesFunciones.activarid_empleadoFactura,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaConstantesFunciones.resaltarid_empleadoFactura,this,this.facturaConstantesFunciones.activarid_empleadoFactura,true,"id_empleadoFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDFORMATO));

		if(this.facturaConstantesFunciones.mostrarid_formatoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.facturaConstantesFunciones.resaltarid_formatoFactura,this,this.facturaConstantesFunciones.activarid_formatoFactura,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.facturaConstantesFunciones.resaltarid_formatoFactura,this,this.facturaConstantesFunciones.activarid_formatoFactura,true,"id_formatoFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DIRECCION));

		if(this.facturaConstantesFunciones.mostrardireccionFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DIRECCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltardireccionFactura,this.facturaConstantesFunciones.activardireccionFactura,iSizeTabla,this,true,"direccionFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardireccionFactura,this.facturaConstantesFunciones.activardireccionFactura,this,true,"direccionFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_RUC));

		if(this.facturaConstantesFunciones.mostrarrucFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltarrucFactura,this.facturaConstantesFunciones.activarrucFactura,iSizeTabla,this,true,"rucFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarrucFactura,this.facturaConstantesFunciones.activarrucFactura,this,true,"rucFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDCLIENTE));

		if(this.facturaConstantesFunciones.mostrarid_clienteFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.facturaConstantesFunciones.resaltarid_clienteFactura,this,this.facturaConstantesFunciones.activarid_clienteFactura,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.facturaConstantesFunciones.resaltarid_clienteFactura,this,this.facturaConstantesFunciones.activarid_clienteFactura,true,"id_clienteFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.facturaConstantesFunciones.mostrarid_tipo_precioFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_precioFactura,this,this.facturaConstantesFunciones.activarid_tipo_precioFactura,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_precioFactura,this,this.facturaConstantesFunciones.activarid_tipo_precioFactura,true,"id_tipo_precioFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TELEFONO));

		if(this.facturaConstantesFunciones.mostrartelefonoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TELEFONO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltartelefonoFactura,this.facturaConstantesFunciones.activartelefonoFactura,iSizeTabla,this,true,"telefonoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartelefonoFactura,this.facturaConstantesFunciones.activartelefonoFactura,this,true,"telefonoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDSUBCLIENTE));

		if(this.facturaConstantesFunciones.mostrarid_sub_clienteFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDSUBCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SubClienteTableCell(this.subclientesForeignKey,this.facturaConstantesFunciones.resaltarid_sub_clienteFactura,this,this.facturaConstantesFunciones.activarid_sub_clienteFactura,iSizeTabla));
			tableColumn.setCellEditor(new SubClienteTableCell(this.subclientesForeignKey,this.facturaConstantesFunciones.resaltarid_sub_clienteFactura,this,this.facturaConstantesFunciones.activarid_sub_clienteFactura,true,"id_sub_clienteFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.facturaConstantesFunciones.mostrarid_vendedorFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.facturaConstantesFunciones.resaltarid_vendedorFactura,this,this.facturaConstantesFunciones.activarid_vendedorFactura,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.facturaConstantesFunciones.resaltarid_vendedorFactura,this,this.facturaConstantesFunciones.activarid_vendedorFactura,true,"id_vendedorFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTRANSPORTE));

		if(this.facturaConstantesFunciones.mostrarid_transporteFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDTRANSPORTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransporteTableCell(this.transportesForeignKey,this.facturaConstantesFunciones.resaltarid_transporteFactura,this,this.facturaConstantesFunciones.activarid_transporteFactura,iSizeTabla));
			tableColumn.setCellEditor(new TransporteTableCell(this.transportesForeignKey,this.facturaConstantesFunciones.resaltarid_transporteFactura,this,this.facturaConstantesFunciones.activarid_transporteFactura,true,"id_transporteFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA));

		if(this.facturaConstantesFunciones.mostrarid_transportistaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransportistaTableCell(this.transportistasForeignKey,this.facturaConstantesFunciones.resaltarid_transportistaFactura,this,this.facturaConstantesFunciones.activarid_transportistaFactura,iSizeTabla));
			tableColumn.setCellEditor(new TransportistaTableCell(this.transportistasForeignKey,this.facturaConstantesFunciones.resaltarid_transportistaFactura,this,this.facturaConstantesFunciones.activarid_transportistaFactura,true,"id_transportistaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_ORDEN));

		if(this.facturaConstantesFunciones.mostrarordenFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_ORDEN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltarordenFactura,this.facturaConstantesFunciones.activarordenFactura,iSizeTabla,this,true,"ordenFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarordenFactura,this.facturaConstantesFunciones.activarordenFactura,this,true,"ordenFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA));

		if(this.facturaConstantesFunciones.mostrarid_tipo_llamadaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoLlamadaTableCell(this.tipollamadasForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_llamadaFactura,this,this.facturaConstantesFunciones.activarid_tipo_llamadaFactura,iSizeTabla));
			tableColumn.setCellEditor(new TipoLlamadaTableCell(this.tipollamadasForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_llamadaFactura,this,this.facturaConstantesFunciones.activarid_tipo_llamadaFactura,true,"id_tipo_llamadaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_HORAINICIO));

		if(this.facturaConstantesFunciones.mostrarhora_inicioFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_HORAINICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TimeRenderer(this.facturaConstantesFunciones.resaltarhora_inicioFactura,this.facturaConstantesFunciones.activarhora_inicioFactura,iSizeTabla,this,true,"hora_inicioFactura","BASICO"));
			tableColumn.setCellEditor(new TimeEditorRenderer(this.facturaConstantesFunciones.resaltarhora_inicioFactura,this.facturaConstantesFunciones.activarhora_inicioFactura,iSizeTabla,this,true,"hora_inicioFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_HORAFIN));

		if(this.facturaConstantesFunciones.mostrarhora_finFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_HORAFIN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TimeRenderer(this.facturaConstantesFunciones.resaltarhora_finFactura,this.facturaConstantesFunciones.activarhora_finFactura,iSizeTabla,this,true,"hora_finFactura","BASICO"));
			tableColumn.setCellEditor(new TimeEditorRenderer(this.facturaConstantesFunciones.resaltarhora_finFactura,this.facturaConstantesFunciones.activarhora_finFactura,iSizeTabla,this,true,"hora_finFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IDTIPOFACTURA));

		if(this.facturaConstantesFunciones.mostrarid_tipo_facturaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IDTIPOFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoFacturaTableCell(this.tipofacturasForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_facturaFactura,this,this.facturaConstantesFunciones.activarid_tipo_facturaFactura,iSizeTabla));
			tableColumn.setCellEditor(new TipoFacturaTableCell(this.tipofacturasForeignKey,this.facturaConstantesFunciones.resaltarid_tipo_facturaFactura,this,this.facturaConstantesFunciones.activarid_tipo_facturaFactura,true,"id_tipo_facturaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.facturaConstantesFunciones.mostrardescripcionFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaConstantesFunciones.resaltardescripcionFactura,this.facturaConstantesFunciones.activardescripcionFactura,iSizeTabla,this,true,"descripcionFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardescripcionFactura,this.facturaConstantesFunciones.activardescripcionFactura,this,true,"descripcionFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_CUPO));

		if(this.facturaConstantesFunciones.mostrarcupoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_CUPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarcupoFactura,this.facturaConstantesFunciones.activarcupoFactura,iSizeTabla,this,true,"cupoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarcupoFactura,this.facturaConstantesFunciones.activarcupoFactura,this,true,"cupoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_SALDO));

		if(this.facturaConstantesFunciones.mostrarsaldoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_SALDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarsaldoFactura,this.facturaConstantesFunciones.activarsaldoFactura,iSizeTabla,this,true,"saldoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarsaldoFactura,this.facturaConstantesFunciones.activarsaldoFactura,this,true,"saldoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DOCUMENTOS));

		if(this.facturaConstantesFunciones.mostrardocumentosFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DOCUMENTOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltardocumentosFactura,this.facturaConstantesFunciones.activardocumentosFactura,iSizeTabla,this,true,"documentosFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardocumentosFactura,this.facturaConstantesFunciones.activardocumentosFactura,this,true,"documentosFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DISPONIBLE));

		if(this.facturaConstantesFunciones.mostrardisponibleFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltardisponibleFactura,this.facturaConstantesFunciones.activardisponibleFactura,iSizeTabla,this,true,"disponibleFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardisponibleFactura,this.facturaConstantesFunciones.activardisponibleFactura,this,true,"disponibleFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO));

		if(this.facturaConstantesFunciones.mostrarporcentaje_descuentoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarporcentaje_descuentoFactura,this.facturaConstantesFunciones.activarporcentaje_descuentoFactura,iSizeTabla,this,true,"porcentaje_descuentoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarporcentaje_descuentoFactura,this.facturaConstantesFunciones.activarporcentaje_descuentoFactura,this,true,"porcentaje_descuentoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTALIVA));

		if(this.facturaConstantesFunciones.mostrartotal_ivaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotal_ivaFactura,this.facturaConstantesFunciones.activartotal_ivaFactura,iSizeTabla,this,true,"total_ivaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotal_ivaFactura,this.facturaConstantesFunciones.activartotal_ivaFactura,this,true,"total_ivaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_SUMAN));

		if(this.facturaConstantesFunciones.mostrarsumanFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_SUMAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarsumanFactura,this.facturaConstantesFunciones.activarsumanFactura,iSizeTabla,this,true,"sumanFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarsumanFactura,this.facturaConstantesFunciones.activarsumanFactura,this,true,"sumanFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.facturaConstantesFunciones.mostrardescuento_valorFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltardescuento_valorFactura,this.facturaConstantesFunciones.activardescuento_valorFactura,iSizeTabla,this,true,"descuento_valorFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardescuento_valorFactura,this.facturaConstantesFunciones.activardescuento_valorFactura,this,true,"descuento_valorFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTALSINIVA));

		if(this.facturaConstantesFunciones.mostrartotal_sin_ivaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTALSINIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotal_sin_ivaFactura,this.facturaConstantesFunciones.activartotal_sin_ivaFactura,iSizeTabla,this,true,"total_sin_ivaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotal_sin_ivaFactura,this.facturaConstantesFunciones.activartotal_sin_ivaFactura,this,true,"total_sin_ivaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTALDESCUENTO));

		if(this.facturaConstantesFunciones.mostrartotal_descuentoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTALDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotal_descuentoFactura,this.facturaConstantesFunciones.activartotal_descuentoFactura,iSizeTabla,this,true,"total_descuentoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotal_descuentoFactura,this.facturaConstantesFunciones.activartotal_descuentoFactura,this,true,"total_descuentoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTALFLETE));

		if(this.facturaConstantesFunciones.mostrartotal_fleteFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTALFLETE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotal_fleteFactura,this.facturaConstantesFunciones.activartotal_fleteFactura,iSizeTabla,this,true,"total_fleteFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotal_fleteFactura,this.facturaConstantesFunciones.activartotal_fleteFactura,this,true,"total_fleteFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTAL));

		if(this.facturaConstantesFunciones.mostrartotalFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotalFactura,this.facturaConstantesFunciones.activartotalFactura,iSizeTabla,this,true,"totalFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotalFactura,this.facturaConstantesFunciones.activartotalFactura,this,true,"totalFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.facturaConstantesFunciones.mostrarsub_totalFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarsub_totalFactura,this.facturaConstantesFunciones.activarsub_totalFactura,iSizeTabla,this,true,"sub_totalFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarsub_totalFactura,this.facturaConstantesFunciones.activarsub_totalFactura,this,true,"sub_totalFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_TOTALOTRO));

		if(this.facturaConstantesFunciones.mostrartotal_otroFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_TOTALOTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltartotal_otroFactura,this.facturaConstantesFunciones.activartotal_otroFactura,iSizeTabla,this,true,"total_otroFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltartotal_otroFactura,this.facturaConstantesFunciones.activartotal_otroFactura,this,true,"total_otroFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_ULTIMOCOSTO));

		if(this.facturaConstantesFunciones.mostrarultimo_costoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_ULTIMOCOSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarultimo_costoFactura,this.facturaConstantesFunciones.activarultimo_costoFactura,iSizeTabla,this,true,"ultimo_costoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarultimo_costoFactura,this.facturaConstantesFunciones.activarultimo_costoFactura,this,true,"ultimo_costoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_IVA));

		if(this.facturaConstantesFunciones.mostrarivaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarivaFactura,this.facturaConstantesFunciones.activarivaFactura,iSizeTabla,this,true,"ivaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarivaFactura,this.facturaConstantesFunciones.activarivaFactura,this,true,"ivaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_DESCUENTO));

		if(this.facturaConstantesFunciones.mostrardescuentoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltardescuentoFactura,this.facturaConstantesFunciones.activardescuentoFactura,iSizeTabla,this,true,"descuentoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltardescuentoFactura,this.facturaConstantesFunciones.activardescuentoFactura,this,true,"descuentoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_FINANCIAMIENTO));

		if(this.facturaConstantesFunciones.mostrarfinanciamientoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_FINANCIAMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarfinanciamientoFactura,this.facturaConstantesFunciones.activarfinanciamientoFactura,iSizeTabla,this,true,"financiamientoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarfinanciamientoFactura,this.facturaConstantesFunciones.activarfinanciamientoFactura,this,true,"financiamientoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_MARGENUTILIDAD));

		if(this.facturaConstantesFunciones.mostrarmargen_utilidadFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_MARGENUTILIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarmargen_utilidadFactura,this.facturaConstantesFunciones.activarmargen_utilidadFactura,iSizeTabla,this,true,"margen_utilidadFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarmargen_utilidadFactura,this.facturaConstantesFunciones.activarmargen_utilidadFactura,this,true,"margen_utilidadFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_ICE));

		if(this.facturaConstantesFunciones.mostrariceFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltariceFactura,this.facturaConstantesFunciones.activariceFactura,iSizeTabla,this,true,"iceFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltariceFactura,this.facturaConstantesFunciones.activariceFactura,this,true,"iceFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_ANTICIPO));

		if(this.facturaConstantesFunciones.mostraranticipoFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_ANTICIPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltaranticipoFactura,this.facturaConstantesFunciones.activaranticipoFactura,iSizeTabla,this,true,"anticipoFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltaranticipoFactura,this.facturaConstantesFunciones.activaranticipoFactura,this,true,"anticipoFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFactura,FacturaConstantesFunciones.LABEL_OTROSVALORES));

		if(this.facturaConstantesFunciones.mostrarotros_valoresFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaConstantesFunciones.LABEL_OTROSVALORES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaConstantesFunciones.resaltarotros_valoresFactura,this.facturaConstantesFunciones.activarotros_valoresFactura,iSizeTabla,this,true,"otros_valoresFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaConstantesFunciones.resaltarotros_valoresFactura,this.facturaConstantesFunciones.activarotros_valoresFactura,this,true,"otros_valoresFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.facturaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetaFormaPago && this.facturaConstantesFunciones.mostrarDetaFormaPagoFactura && !FacturaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Deta Forma Pagos");
				tableColumn.setHeaderValue("Deta Forma Pagos");
				tableColumn.setCellRenderer(new DetaFormaPagoTableCell(facturaConstantesFunciones.resaltarDetaFormaPagoFactura,this,this.facturaConstantesFunciones.activarDetaFormaPagoFactura));
				tableColumn.setCellEditor(new DetaFormaPagoTableCell(facturaConstantesFunciones.resaltarDetaFormaPagoFactura,this,this.facturaConstantesFunciones.activarDetaFormaPagoFactura));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosFactura.addColumn(tableColumn);
			}

			if(this.isTienePermisosDetalleFactura && this.facturaConstantesFunciones.mostrarDetalleFacturaFactura && !FacturaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Facturas");
				tableColumn.setHeaderValue("Detalle Facturas");
				tableColumn.setCellRenderer(new DetalleFacturaTableCell(facturaConstantesFunciones.resaltarDetalleFacturaFactura,this,this.facturaConstantesFunciones.activarDetalleFacturaFactura));
				tableColumn.setCellEditor(new DetalleFacturaTableCell(facturaConstantesFunciones.resaltarDetalleFacturaFactura,this,this.facturaConstantesFunciones.activarDetalleFacturaFactura));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosFactura.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosFactura.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosFactura.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarFactura && this.isPermisoGuardarCambiosFactura) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.facturaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosFactura.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.facturaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosFactura.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosFactura.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFactura && this.isPermisoGuardarCambiosFactura) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFactura && this.isPermisoGuardarCambiosFactura) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosFactura.moveColumn(this.jTableDatosFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosFactura.moveColumn(this.jTableDatosFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosFactura.moveColumn(this.jTableDatosFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosFactura.moveColumn(this.jTableDatosFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosFactura.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosFactura.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosFactura,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosFactura.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosFactura.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosFactura.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosFactura.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosFactura.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=facturaLogic.getFacturas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=facturas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosFactura.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosFactura();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoFactura=false;
					
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
				if(this.facturaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormFactura==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFactura.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.factura.getsType().equals("DUPLICADO")
				   || this.factura.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoFactura=true;
				
				} else {
					this.isEsNuevoFactura=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.facturaSessionBean.getEsGuardarRelacionado()) {
					if(this.factura.getId()>=0 && !this.factura.getIsNew()) {						
						this.isEsNuevoFactura=false;
						
					} else {
						this.isEsNuevoFactura=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoFactura(esRelaciones);						
				
				this.seleccionarFactura(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.factura.getId()<0) {
					this.isEsNuevoFactura=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarFactura(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarFactura(evt,rowIndex);
				}	
				
				if(this.facturaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Factura: " + this.dDif); 
					}
				}								
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarFactura(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.factura)) {
					if(this.factura.getId()>0) {
						this.factura.setIsDeleted(true);
						
						this.facturasEliminados.add(this.factura);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaLogic.getFacturas().remove(this.factura);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturas.remove(this.factura);				
					}
					
					
					((FacturaModel) this.jTableDatosFactura.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaFactura(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarFactura(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoFactura) {
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFactura.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioFactura(this.factura);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.facturaConstantesFunciones.cargarid_empresaFactura || this.facturaConstantesFunciones.event_dependid_empresaFactura) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.factura.getid_empresa());
									//this.inicializarActualizarBindingFactura(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(factura.getEmpresa()!=null) {
							this.empresasForeignKey.add(factura.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.factura.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.facturaConstantesFunciones.cargarid_sucursalFactura || this.facturaConstantesFunciones.event_dependid_sucursalFactura) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.factura.getid_sucursal());
									//this.inicializarActualizarBindingFactura(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(factura.getSucursal()!=null) {
							this.sucursalsForeignKey.add(factura.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.factura.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.facturaConstantesFunciones.cargarid_ejercicioFactura || this.facturaConstantesFunciones.event_dependid_ejercicioFactura) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.factura.getid_ejercicio());
									//this.inicializarActualizarBindingFactura(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(factura.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(factura.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.factura.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.facturaConstantesFunciones.cargarid_periodoFactura || this.facturaConstantesFunciones.event_dependid_periodoFactura) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.factura.getid_periodo());
									//this.inicializarActualizarBindingFactura(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(factura.getPeriodo()!=null) {
							this.periodosForeignKey.add(factura.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.factura.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.facturaConstantesFunciones.cargarid_anioFactura || this.facturaConstantesFunciones.event_dependid_anioFactura) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.factura.getid_anio());
									//this.inicializarActualizarBindingFactura(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(factura.getAnio()!=null) {
							this.aniosForeignKey.add(factura.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.factura.getid_anio(),false,"Formulario");

					//Mes
					if(!this.facturaConstantesFunciones.cargarid_mesFactura || this.facturaConstantesFunciones.event_dependid_mesFactura) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.factura.getid_mes());
									//this.inicializarActualizarBindingFactura(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(factura.getMes()!=null) {
							this.messForeignKey.add(factura.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.factura.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.facturaConstantesFunciones.cargarid_usuarioFactura || this.facturaConstantesFunciones.event_dependid_usuarioFactura) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.factura.getid_usuario());
									//this.inicializarActualizarBindingFactura(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(factura.getUsuario()!=null) {
							this.usuariosForeignKey.add(factura.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.factura.getid_usuario(),false,"Formulario");

					//Moneda
					if(!this.facturaConstantesFunciones.cargarid_monedaFactura || this.facturaConstantesFunciones.event_dependid_monedaFactura) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.factura.getid_moneda());
									//this.inicializarActualizarBindingFactura(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(factura.getMoneda()!=null) {
							this.monedasForeignKey.add(factura.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.factura.getid_moneda(),false,"Formulario");

					//Empleado
					if(!this.facturaConstantesFunciones.cargarid_empleadoFactura || this.facturaConstantesFunciones.event_dependid_empleadoFactura) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.factura.getid_empleado());
									//this.inicializarActualizarBindingFactura(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(factura.getEmpleado()!=null) {
							this.empleadosForeignKey.add(factura.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.factura.getid_empleado(),false,"Formulario");

					//Formato
					if(!this.facturaConstantesFunciones.cargarid_formatoFactura || this.facturaConstantesFunciones.event_dependid_formatoFactura) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.factura.getid_formato());
									//this.inicializarActualizarBindingFactura(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(factura.getFormato()!=null) {
							this.formatosForeignKey.add(factura.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.factura.getid_formato(),false,"Formulario");

					//Cliente
					if(!this.facturaConstantesFunciones.cargarid_clienteFactura || this.facturaConstantesFunciones.event_dependid_clienteFactura) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.factura.getid_cliente());
									//this.inicializarActualizarBindingFactura(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(factura.getCliente()!=null) {
							this.clientesForeignKey.add(factura.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.factura.getid_cliente(),false,"Formulario");

					//TipoPrecio
					if(!this.facturaConstantesFunciones.cargarid_tipo_precioFactura || this.facturaConstantesFunciones.event_dependid_tipo_precioFactura) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.factura.getid_tipo_precio());
									//this.inicializarActualizarBindingFactura(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(factura.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(factura.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.factura.getid_tipo_precio(),false,"Formulario");

					//SubCliente
					if(!this.facturaConstantesFunciones.cargarid_sub_clienteFactura || this.facturaConstantesFunciones.event_dependid_sub_clienteFactura) {
						//this.cargarCombosSubClientesForeignKeyLista(" where id="+this.factura.getid_sub_cliente());
									//this.inicializarActualizarBindingFactura(false,false);
						this.subclientesForeignKey=new ArrayList<SubCliente>();

						if(factura.getSubCliente()!=null) {
							this.subclientesForeignKey.add(factura.getSubCliente());
						}

						this.addItemDefectoCombosForeignKeySubCliente();
						this.cargarCombosFrameSubClientesForeignKey("Todos");
					}
					this.setActualSubClienteForeignKey(this.factura.getid_sub_cliente(),false,"Formulario");

					//Vendedor
					if(!this.facturaConstantesFunciones.cargarid_vendedorFactura || this.facturaConstantesFunciones.event_dependid_vendedorFactura) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.factura.getid_vendedor());
									//this.inicializarActualizarBindingFactura(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(factura.getVendedor()!=null) {
							this.vendedorsForeignKey.add(factura.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.factura.getid_vendedor(),false,"Formulario");

					//Transporte
					if(!this.facturaConstantesFunciones.cargarid_transporteFactura || this.facturaConstantesFunciones.event_dependid_transporteFactura) {
						//this.cargarCombosTransportesForeignKeyLista(" where id="+this.factura.getid_transporte());
									//this.inicializarActualizarBindingFactura(false,false);
						this.transportesForeignKey=new ArrayList<Transporte>();

						if(factura.getTransporte()!=null) {
							this.transportesForeignKey.add(factura.getTransporte());
						}

						this.addItemDefectoCombosForeignKeyTransporte();
						this.cargarCombosFrameTransportesForeignKey("Todos");
					}
					this.setActualTransporteForeignKey(this.factura.getid_transporte(),false,"Formulario");

					//Transportista
					if(!this.facturaConstantesFunciones.cargarid_transportistaFactura || this.facturaConstantesFunciones.event_dependid_transportistaFactura) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.factura.getid_transportista());
									//this.inicializarActualizarBindingFactura(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(factura.getTransportista()!=null) {
							this.transportistasForeignKey.add(factura.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.factura.getid_transportista(),false,"Formulario");

					//TipoLlamada
					if(!this.facturaConstantesFunciones.cargarid_tipo_llamadaFactura || this.facturaConstantesFunciones.event_dependid_tipo_llamadaFactura) {
						//this.cargarCombosTipoLlamadasForeignKeyLista(" where id="+this.factura.getid_tipo_llamada());
									//this.inicializarActualizarBindingFactura(false,false);
						this.tipollamadasForeignKey=new ArrayList<TipoLlamada>();

						if(factura.getTipoLlamada()!=null) {
							this.tipollamadasForeignKey.add(factura.getTipoLlamada());
						}

						this.addItemDefectoCombosForeignKeyTipoLlamada();
						this.cargarCombosFrameTipoLlamadasForeignKey("Todos");
					}
					this.setActualTipoLlamadaForeignKey(this.factura.getid_tipo_llamada(),false,"Formulario");

					//TipoFactura
					if(!this.facturaConstantesFunciones.cargarid_tipo_facturaFactura || this.facturaConstantesFunciones.event_dependid_tipo_facturaFactura) {
						//this.cargarCombosTipoFacturasForeignKeyLista(" where id="+this.factura.getid_tipo_factura());
									//this.inicializarActualizarBindingFactura(false,false);
						this.tipofacturasForeignKey=new ArrayList<TipoFactura>();

						if(factura.getTipoFactura()!=null) {
							this.tipofacturasForeignKey.add(factura.getTipoFactura());
						}

						this.addItemDefectoCombosForeignKeyTipoFactura();
						this.cargarCombosFrameTipoFacturasForeignKey("Todos");
					}
					this.setActualTipoFacturaForeignKey(this.factura.getid_tipo_factura(),false,"Formulario");

					//TipoCambio
					if(!this.facturaConstantesFunciones.cargarid_tipo_cambioFactura || this.facturaConstantesFunciones.event_dependid_tipo_cambioFactura) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.factura.getid_tipo_cambio());
									//this.inicializarActualizarBindingFactura(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(factura.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(factura.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.factura.getid_tipo_cambio(),false,"Formulario");

					//AsientoContable
					if(!this.facturaConstantesFunciones.cargarid_asiento_contableFactura || this.facturaConstantesFunciones.event_dependid_asiento_contableFactura) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.factura.getid_asiento_contable());
									//this.inicializarActualizarBindingFactura(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(factura.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(factura.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.factura.getid_asiento_contable(),false,"Formulario");

					//Pedido
					if(!this.facturaConstantesFunciones.cargarid_pedidoFactura || this.facturaConstantesFunciones.event_dependid_pedidoFactura) {
						//this.cargarCombosPedidosForeignKeyLista(" where id="+this.factura.getid_pedido());
									//this.inicializarActualizarBindingFactura(false,false);
						this.pedidosForeignKey=new ArrayList<Pedido>();

						if(factura.getPedido()!=null) {
							this.pedidosForeignKey.add(factura.getPedido());
						}

						this.addItemDefectoCombosForeignKeyPedido();
						this.cargarCombosFramePedidosForeignKey("Todos");
					}
					this.setActualPedidoForeignKey(this.factura.getid_pedido(),false,"Formulario");

					//Responsable
					if(!this.facturaConstantesFunciones.cargarid_responsableFactura || this.facturaConstantesFunciones.event_dependid_responsableFactura) {
						//this.cargarCombosResponsablesForeignKeyLista(" where id="+this.factura.getid_responsable());
									//this.inicializarActualizarBindingFactura(false,false);
						this.responsablesForeignKey=new ArrayList<Responsable>();

						if(factura.getResponsable()!=null) {
							this.responsablesForeignKey.add(factura.getResponsable());
						}

						this.addItemDefectoCombosForeignKeyResponsable();
						this.cargarCombosFrameResponsablesForeignKey("Todos");
					}
					this.setActualResponsableForeignKey(this.factura.getid_responsable(),false,"Formulario");

					//EstadoFisicoFacturaEmpresa
					if(!this.facturaConstantesFunciones.cargarid_estado_fisico_factura_empresaFactura || this.facturaConstantesFunciones.event_dependid_estado_fisico_factura_empresaFactura) {
						//this.cargarCombosEstadoFisicoFacturaEmpresasForeignKeyLista(" where id="+this.factura.getid_estado_fisico_factura_empresa());
									//this.inicializarActualizarBindingFactura(false,false);
						this.estadofisicofacturaempresasForeignKey=new ArrayList<EstadoFisicoFacturaEmpresa>();

						if(factura.getEstadoFisicoFacturaEmpresa()!=null) {
							this.estadofisicofacturaempresasForeignKey.add(factura.getEstadoFisicoFacturaEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEstadoFisicoFacturaEmpresa();
						this.cargarCombosFrameEstadoFisicoFacturaEmpresasForeignKey("Todos");
					}
					this.setActualEstadoFisicoFacturaEmpresaForeignKey(this.factura.getid_estado_fisico_factura_empresa(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesFactura("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesFactura(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFactura() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoFactura(Factura factura) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoFactura(factura,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoFactura(Factura factura,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioFactura(factura);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyFactura(factura,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyFactura(factura);
	}
	
	public void setVariablesObjetoActualToFormularioFactura(Factura factura) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormFactura.jLabelidFactura.setText(factura.getId().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setText(factura.getnumero_pre_impreso());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setDate(factura.getfecha_emision());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setText(factura.getnumero_dias().toString());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setDate(factura.getfecha_vencimiento());
			this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setText(factura.getcotizacion().toString());
			this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setText(factura.getdireccion());
			this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setText(factura.getruc());
			this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setText(factura.gettelefono());
			this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setText(factura.getorden());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setValue(factura.gethora_inicio());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setValue(factura.gethora_fin());
			this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setText(factura.getdescripcion());
			this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setText(factura.getcupo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setText(factura.getsaldo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setText(factura.getdocumentos().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setText(factura.getdisponible().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setText(factura.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setText(factura.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setText(factura.getsuman().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setText(factura.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setText(factura.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setText(factura.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setText(factura.gettotal_flete().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setText(factura.gettotal().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setText(factura.getsub_total().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setText(factura.gettotal_otro().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setText(factura.getultimo_costo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setText(factura.getiva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setText(factura.getdescuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setText(factura.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setText(factura.getmargen_utilidad().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setText(factura.getice().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setText(factura.getanticipo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setText(factura.getotros_valores().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Factura facturaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,facturaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Factura facturaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				facturaLocal=this.factura;
			} else {
				facturaLocal=this.facturaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(facturaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoFactura(facturaLocal,true);
					
					if(facturaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(facturaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.facturaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(facturaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoFactura(Factura factura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFactura(factura,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysFactura(factura);
	}
	
	public void setVariablesFormularioToObjetoActualFactura(Factura factura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFactura(factura,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualFactura(Factura factura,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormFactura.jLabelidFactura.getText()==null || this.jInternalFrameDetalleFormFactura.jLabelidFactura.getText()=="" || this.jInternalFrameDetalleFormFactura.jLabelidFactura.getText()=="Id") {
				this.jInternalFrameDetalleFormFactura.jLabelidFactura.setText("0");
			}

			if(conColumnasBase) {factura.setId(Long.parseLong(this.jInternalFrameDetalleFormFactura.jLabelidFactura.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelIdFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setnumero_pre_impreso(this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_pre_impresoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setfecha_emision(this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_emisionFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setnumero_dias(Integer.parseInt(this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_NUMERODIAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelnumero_diasFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setfecha_vencimiento(this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfecha_vencimientoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelcotizacionFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdireccion(this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DIRECCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldireccionFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setruc(this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelrucFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settelefono(this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TELEFONO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltelefonoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setorden(this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_ORDEN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelordenFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.sethora_inicio(new Time(((Date)this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.getValue()).getTime()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_HORAINICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelhora_inicioFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.sethora_fin(new Time(((Date)this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.getValue()).getTime()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_HORAFIN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelhora_finFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdescripcion(this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescripcionFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setcupo(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_CUPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelcupoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setsaldo(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_SALDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsaldoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdocumentos(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DOCUMENTOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldocumentosFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdisponible(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldisponibleFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setporcentaje_descuento(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelporcentaje_descuentoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_ivaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setsuman(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_SUMAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsumanFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescuento_valorFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal_sin_iva(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTALSINIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_sin_ivaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal_descuento(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTALDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_descuentoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal_flete(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTALFLETE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_fleteFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotalFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelsub_totalFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.settotal_otro(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_TOTALOTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeltotal_otroFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setultimo_costo(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_ULTIMOCOSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelultimo_costoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setiva(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelivaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeldescuentoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setfinanciamiento(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_FINANCIAMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelfinanciamientoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setmargen_utilidad(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_MARGENUTILIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelmargen_utilidadFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setice(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabeliceFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setanticipo(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_ANTICIPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelanticipoFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			factura.setotros_valores(Double.parseDouble(this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaConstantesFunciones.LABEL_OTROSVALORES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFactura.jLabelotros_valoresFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFactura(Factura facturaBean,Factura factura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosFactura(Factura facturaOrigen,Factura factura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaOrigen.getId()!=null && !facturaOrigen.getId().equals(0L))) {factura.setId(facturaOrigen.getId());}}
			if(conDefault || (!conDefault && facturaOrigen.getnumero_pre_impreso()!=null && !facturaOrigen.getnumero_pre_impreso().equals(""))) {factura.setnumero_pre_impreso(facturaOrigen.getnumero_pre_impreso());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha_emision()!=null && !facturaOrigen.getfecha_emision().equals(new Date()))) {factura.setfecha_emision(facturaOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && facturaOrigen.getnumero_dias()!=null && !facturaOrigen.getnumero_dias().equals(0))) {factura.setnumero_dias(facturaOrigen.getnumero_dias());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha_vencimiento()!=null && !facturaOrigen.getfecha_vencimiento().equals(new Date()))) {factura.setfecha_vencimiento(facturaOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && facturaOrigen.getcotizacion()!=null && !facturaOrigen.getcotizacion().equals(0.0))) {factura.setcotizacion(facturaOrigen.getcotizacion());}
			if(conDefault || (!conDefault && facturaOrigen.getdireccion()!=null && !facturaOrigen.getdireccion().equals(""))) {factura.setdireccion(facturaOrigen.getdireccion());}
			if(conDefault || (!conDefault && facturaOrigen.getruc()!=null && !facturaOrigen.getruc().equals(""))) {factura.setruc(facturaOrigen.getruc());}
			if(conDefault || (!conDefault && facturaOrigen.gettelefono()!=null && !facturaOrigen.gettelefono().equals(""))) {factura.settelefono(facturaOrigen.gettelefono());}
			if(conDefault || (!conDefault && facturaOrigen.getorden()!=null && !facturaOrigen.getorden().equals(""))) {factura.setorden(facturaOrigen.getorden());}
			if(conDefault || (!conDefault && facturaOrigen.gethora_inicio()!=null && !facturaOrigen.gethora_inicio().equals(new Time((new Date()).getTime())))) {factura.sethora_inicio(facturaOrigen.gethora_inicio());}
			if(conDefault || (!conDefault && facturaOrigen.gethora_fin()!=null && !facturaOrigen.gethora_fin().equals(new Time((new Date()).getTime())))) {factura.sethora_fin(facturaOrigen.gethora_fin());}
			if(conDefault || (!conDefault && facturaOrigen.getdescripcion()!=null && !facturaOrigen.getdescripcion().equals(""))) {factura.setdescripcion(facturaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && facturaOrigen.getcupo()!=null && !facturaOrigen.getcupo().equals(0.0))) {factura.setcupo(facturaOrigen.getcupo());}
			if(conDefault || (!conDefault && facturaOrigen.getsaldo()!=null && !facturaOrigen.getsaldo().equals(0.0))) {factura.setsaldo(facturaOrigen.getsaldo());}
			if(conDefault || (!conDefault && facturaOrigen.getdocumentos()!=null && !facturaOrigen.getdocumentos().equals(0.0))) {factura.setdocumentos(facturaOrigen.getdocumentos());}
			if(conDefault || (!conDefault && facturaOrigen.getdisponible()!=null && !facturaOrigen.getdisponible().equals(0.0))) {factura.setdisponible(facturaOrigen.getdisponible());}
			if(conDefault || (!conDefault && facturaOrigen.getporcentaje_descuento()!=null && !facturaOrigen.getporcentaje_descuento().equals(0.0))) {factura.setporcentaje_descuento(facturaOrigen.getporcentaje_descuento());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_iva()!=null && !facturaOrigen.gettotal_iva().equals(0.0))) {factura.settotal_iva(facturaOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && facturaOrigen.getsuman()!=null && !facturaOrigen.getsuman().equals(0.0))) {factura.setsuman(facturaOrigen.getsuman());}
			if(conDefault || (!conDefault && facturaOrigen.getdescuento_valor()!=null && !facturaOrigen.getdescuento_valor().equals(0.0))) {factura.setdescuento_valor(facturaOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_sin_iva()!=null && !facturaOrigen.gettotal_sin_iva().equals(0.0))) {factura.settotal_sin_iva(facturaOrigen.gettotal_sin_iva());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_descuento()!=null && !facturaOrigen.gettotal_descuento().equals(0.0))) {factura.settotal_descuento(facturaOrigen.gettotal_descuento());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_flete()!=null && !facturaOrigen.gettotal_flete().equals(0.0))) {factura.settotal_flete(facturaOrigen.gettotal_flete());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal()!=null && !facturaOrigen.gettotal().equals(0.0))) {factura.settotal(facturaOrigen.gettotal());}
			if(conDefault || (!conDefault && facturaOrigen.getsub_total()!=null && !facturaOrigen.getsub_total().equals(0.0))) {factura.setsub_total(facturaOrigen.getsub_total());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_otro()!=null && !facturaOrigen.gettotal_otro().equals(0.0))) {factura.settotal_otro(facturaOrigen.gettotal_otro());}
			if(conDefault || (!conDefault && facturaOrigen.getultimo_costo()!=null && !facturaOrigen.getultimo_costo().equals(0.0))) {factura.setultimo_costo(facturaOrigen.getultimo_costo());}
			if(conDefault || (!conDefault && facturaOrigen.getiva()!=null && !facturaOrigen.getiva().equals(0.0))) {factura.setiva(facturaOrigen.getiva());}
			if(conDefault || (!conDefault && facturaOrigen.getdescuento()!=null && !facturaOrigen.getdescuento().equals(0.0))) {factura.setdescuento(facturaOrigen.getdescuento());}
			if(conDefault || (!conDefault && facturaOrigen.getfinanciamiento()!=null && !facturaOrigen.getfinanciamiento().equals(0.0))) {factura.setfinanciamiento(facturaOrigen.getfinanciamiento());}
			if(conDefault || (!conDefault && facturaOrigen.getmargen_utilidad()!=null && !facturaOrigen.getmargen_utilidad().equals(0.0))) {factura.setmargen_utilidad(facturaOrigen.getmargen_utilidad());}
			if(conDefault || (!conDefault && facturaOrigen.getice()!=null && !facturaOrigen.getice().equals(0.0))) {factura.setice(facturaOrigen.getice());}
			if(conDefault || (!conDefault && facturaOrigen.getanticipo()!=null && !facturaOrigen.getanticipo().equals(0.0))) {factura.setanticipo(facturaOrigen.getanticipo());}
			if(conDefault || (!conDefault && facturaOrigen.getotros_valores()!=null && !facturaOrigen.getotros_valores().equals(0.0))) {factura.setotros_valores(facturaOrigen.getotros_valores());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_retencion()!=null && !facturaOrigen.gettotal_retencion().equals(0.0))) {factura.settotal_retencion(facturaOrigen.gettotal_retencion());}
			if(conDefault || (!conDefault && facturaOrigen.gettotal_consumo_especial()!=null && !facturaOrigen.gettotal_consumo_especial().equals(0.0))) {factura.settotal_consumo_especial(facturaOrigen.gettotal_consumo_especial());}
			if(conDefault || (!conDefault && facturaOrigen.getretencion()!=null && !facturaOrigen.getretencion().equals(0.0))) {factura.setretencion(facturaOrigen.getretencion());}
			if(conDefault || (!conDefault && facturaOrigen.getes_cliente()!=null && !facturaOrigen.getes_cliente().equals(false))) {factura.setes_cliente(facturaOrigen.getes_cliente());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha()!=null && !facturaOrigen.getfecha().equals(new Date()))) {factura.setfecha(facturaOrigen.getfecha());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha_autorizacion()!=null && !facturaOrigen.getfecha_autorizacion().equals(new Date()))) {factura.setfecha_autorizacion(facturaOrigen.getfecha_autorizacion());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha_cliente()!=null && !facturaOrigen.getfecha_cliente().equals(new Date()))) {factura.setfecha_cliente(facturaOrigen.getfecha_cliente());}
			if(conDefault || (!conDefault && facturaOrigen.getnumero_documento()!=null && !facturaOrigen.getnumero_documento().equals(""))) {factura.setnumero_documento(facturaOrigen.getnumero_documento());}
			if(conDefault || (!conDefault && facturaOrigen.getnumero_dau()!=null && !facturaOrigen.getnumero_dau().equals(""))) {factura.setnumero_dau(facturaOrigen.getnumero_dau());}
			if(conDefault || (!conDefault && facturaOrigen.getnumero_referendo()!=null && !facturaOrigen.getnumero_referendo().equals(""))) {factura.setnumero_referendo(facturaOrigen.getnumero_referendo());}
			if(conDefault || (!conDefault && facturaOrigen.getfecha_referendo()!=null && !facturaOrigen.getfecha_referendo().equals(new Date()))) {factura.setfecha_referendo(facturaOrigen.getfecha_referendo());}
			if(conDefault || (!conDefault && facturaOrigen.getaforo_referendo()!=null && !facturaOrigen.getaforo_referendo().equals(""))) {factura.setaforo_referendo(facturaOrigen.getaforo_referendo());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFactura(Factura factura) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFactura.jLabelidFactura.setText(factura.getId().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setText(factura.getnumero_pre_impreso());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setDate(factura.getfecha_emision());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setText(factura.getnumero_dias().toString());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setDate(factura.getfecha_vencimiento());
			this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setText(factura.getcotizacion().toString());
			this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setText(factura.getdireccion());
			this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setText(factura.getruc());
			this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setText(factura.gettelefono());
			this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setText(factura.getorden());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setValue(factura.gethora_inicio());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setValue(factura.gethora_fin());
			this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setText(factura.getdescripcion());
			this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setText(factura.getcupo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setText(factura.getsaldo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setText(factura.getdocumentos().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setText(factura.getdisponible().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setText(factura.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setText(factura.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setText(factura.getsuman().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setText(factura.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setText(factura.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setText(factura.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setText(factura.gettotal_flete().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setText(factura.gettotal().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setText(factura.getsub_total().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setText(factura.gettotal_otro().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setText(factura.getultimo_costo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setText(factura.getiva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setText(factura.getdescuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setText(factura.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setText(factura.getmargen_utilidad().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setText(factura.getice().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setText(factura.getanticipo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setText(factura.getotros_valores().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFactura(FacturaBean facturaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFactura.jLabelidFactura.setText(facturaBean.getId().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setText(facturaBean.getnumero_pre_impreso());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setDate(facturaBean.getfecha_emision());
			this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setText(facturaBean.getnumero_dias().toString());
			this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setDate(facturaBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setText(facturaBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setText(facturaBean.getdireccion());
			this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setText(facturaBean.getruc());
			this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setText(facturaBean.gettelefono());
			this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setText(facturaBean.getorden());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setValue(facturaBean.gethora_inicio());
			this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setValue(facturaBean.gethora_fin());
			this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setText(facturaBean.getdescripcion());
			this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setText(facturaBean.getcupo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setText(facturaBean.getsaldo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setText(facturaBean.getdocumentos().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setText(facturaBean.getdisponible().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setText(facturaBean.getporcentaje_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setText(facturaBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setText(facturaBean.getsuman().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setText(facturaBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setText(facturaBean.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setText(facturaBean.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setText(facturaBean.gettotal_flete().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setText(facturaBean.gettotal().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setText(facturaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setText(facturaBean.gettotal_otro().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setText(facturaBean.getultimo_costo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setText(facturaBean.getiva().toString());
			this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setText(facturaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setText(facturaBean.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setText(facturaBean.getmargen_utilidad().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setText(facturaBean.getice().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setText(facturaBean.getanticipo().toString());
			this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setText(facturaBean.getotros_valores().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanFactura(FacturaParameterReturnGeneral facturaReturnGeneral,FacturaBean facturaBean,Boolean conDefault) throws Exception { 
		try {
			Factura facturaLocal=new Factura();
			
			facturaLocal=facturaReturnGeneral.getFactura();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaLocal.getId()!=null && !facturaLocal.getId().equals(0L))) {facturaBean.setId(facturaLocal.getId());}}
			if(conDefault || (!conDefault && facturaLocal.getnumero_pre_impreso()!=null && !facturaLocal.getnumero_pre_impreso().equals(""))) {facturaBean.setnumero_pre_impreso(facturaLocal.getnumero_pre_impreso());}
			if(conDefault || (!conDefault && facturaLocal.getfecha_emision()!=null && !facturaLocal.getfecha_emision().equals(new Date()))) {facturaBean.setfecha_emision(facturaLocal.getfecha_emision());}
			if(conDefault || (!conDefault && facturaLocal.getnumero_dias()!=null && !facturaLocal.getnumero_dias().equals(0))) {facturaBean.setnumero_dias(facturaLocal.getnumero_dias());}
			if(conDefault || (!conDefault && facturaLocal.getfecha_vencimiento()!=null && !facturaLocal.getfecha_vencimiento().equals(new Date()))) {facturaBean.setfecha_vencimiento(facturaLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && facturaLocal.getcotizacion()!=null && !facturaLocal.getcotizacion().equals(0.0))) {facturaBean.setcotizacion(facturaLocal.getcotizacion());}
			if(conDefault || (!conDefault && facturaLocal.getdireccion()!=null && !facturaLocal.getdireccion().equals(""))) {facturaBean.setdireccion(facturaLocal.getdireccion());}
			if(conDefault || (!conDefault && facturaLocal.getruc()!=null && !facturaLocal.getruc().equals(""))) {facturaBean.setruc(facturaLocal.getruc());}
			if(conDefault || (!conDefault && facturaLocal.gettelefono()!=null && !facturaLocal.gettelefono().equals(""))) {facturaBean.settelefono(facturaLocal.gettelefono());}
			if(conDefault || (!conDefault && facturaLocal.getorden()!=null && !facturaLocal.getorden().equals(""))) {facturaBean.setorden(facturaLocal.getorden());}
			if(conDefault || (!conDefault && facturaLocal.gethora_inicio()!=null && !facturaLocal.gethora_inicio().equals(new Time((new Date()).getTime())))) {facturaBean.sethora_inicio(facturaLocal.gethora_inicio());}
			if(conDefault || (!conDefault && facturaLocal.gethora_fin()!=null && !facturaLocal.gethora_fin().equals(new Time((new Date()).getTime())))) {facturaBean.sethora_fin(facturaLocal.gethora_fin());}
			if(conDefault || (!conDefault && facturaLocal.getdescripcion()!=null && !facturaLocal.getdescripcion().equals(""))) {facturaBean.setdescripcion(facturaLocal.getdescripcion());}
			if(conDefault || (!conDefault && facturaLocal.getcupo()!=null && !facturaLocal.getcupo().equals(0.0))) {facturaBean.setcupo(facturaLocal.getcupo());}
			if(conDefault || (!conDefault && facturaLocal.getsaldo()!=null && !facturaLocal.getsaldo().equals(0.0))) {facturaBean.setsaldo(facturaLocal.getsaldo());}
			if(conDefault || (!conDefault && facturaLocal.getdocumentos()!=null && !facturaLocal.getdocumentos().equals(0.0))) {facturaBean.setdocumentos(facturaLocal.getdocumentos());}
			if(conDefault || (!conDefault && facturaLocal.getdisponible()!=null && !facturaLocal.getdisponible().equals(0.0))) {facturaBean.setdisponible(facturaLocal.getdisponible());}
			if(conDefault || (!conDefault && facturaLocal.getporcentaje_descuento()!=null && !facturaLocal.getporcentaje_descuento().equals(0.0))) {facturaBean.setporcentaje_descuento(facturaLocal.getporcentaje_descuento());}
			if(conDefault || (!conDefault && facturaLocal.gettotal_iva()!=null && !facturaLocal.gettotal_iva().equals(0.0))) {facturaBean.settotal_iva(facturaLocal.gettotal_iva());}
			if(conDefault || (!conDefault && facturaLocal.getsuman()!=null && !facturaLocal.getsuman().equals(0.0))) {facturaBean.setsuman(facturaLocal.getsuman());}
			if(conDefault || (!conDefault && facturaLocal.getdescuento_valor()!=null && !facturaLocal.getdescuento_valor().equals(0.0))) {facturaBean.setdescuento_valor(facturaLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && facturaLocal.gettotal_sin_iva()!=null && !facturaLocal.gettotal_sin_iva().equals(0.0))) {facturaBean.settotal_sin_iva(facturaLocal.gettotal_sin_iva());}
			if(conDefault || (!conDefault && facturaLocal.gettotal_descuento()!=null && !facturaLocal.gettotal_descuento().equals(0.0))) {facturaBean.settotal_descuento(facturaLocal.gettotal_descuento());}
			if(conDefault || (!conDefault && facturaLocal.gettotal_flete()!=null && !facturaLocal.gettotal_flete().equals(0.0))) {facturaBean.settotal_flete(facturaLocal.gettotal_flete());}
			if(conDefault || (!conDefault && facturaLocal.gettotal()!=null && !facturaLocal.gettotal().equals(0.0))) {facturaBean.settotal(facturaLocal.gettotal());}
			if(conDefault || (!conDefault && facturaLocal.getsub_total()!=null && !facturaLocal.getsub_total().equals(0.0))) {facturaBean.setsub_total(facturaLocal.getsub_total());}
			if(conDefault || (!conDefault && facturaLocal.gettotal_otro()!=null && !facturaLocal.gettotal_otro().equals(0.0))) {facturaBean.settotal_otro(facturaLocal.gettotal_otro());}
			if(conDefault || (!conDefault && facturaLocal.getultimo_costo()!=null && !facturaLocal.getultimo_costo().equals(0.0))) {facturaBean.setultimo_costo(facturaLocal.getultimo_costo());}
			if(conDefault || (!conDefault && facturaLocal.getiva()!=null && !facturaLocal.getiva().equals(0.0))) {facturaBean.setiva(facturaLocal.getiva());}
			if(conDefault || (!conDefault && facturaLocal.getdescuento()!=null && !facturaLocal.getdescuento().equals(0.0))) {facturaBean.setdescuento(facturaLocal.getdescuento());}
			if(conDefault || (!conDefault && facturaLocal.getfinanciamiento()!=null && !facturaLocal.getfinanciamiento().equals(0.0))) {facturaBean.setfinanciamiento(facturaLocal.getfinanciamiento());}
			if(conDefault || (!conDefault && facturaLocal.getmargen_utilidad()!=null && !facturaLocal.getmargen_utilidad().equals(0.0))) {facturaBean.setmargen_utilidad(facturaLocal.getmargen_utilidad());}
			if(conDefault || (!conDefault && facturaLocal.getice()!=null && !facturaLocal.getice().equals(0.0))) {facturaBean.setice(facturaLocal.getice());}
			if(conDefault || (!conDefault && facturaLocal.getanticipo()!=null && !facturaLocal.getanticipo().equals(0.0))) {facturaBean.setanticipo(facturaLocal.getanticipo());}
			if(conDefault || (!conDefault && facturaLocal.getotros_valores()!=null && !facturaLocal.getotros_valores().equals(0.0))) {facturaBean.setotros_valores(facturaLocal.getotros_valores());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxFacturaGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxFactura,List<Factura> facturasLocal)throws Exception {
		try {
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasLocal) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			jComboBoxFactura.setSelectedItem(facturaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxFacturaGenerico(JComboBox jComboBoxFactura,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFactura.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFactura.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetaFormaPago")) {
			jButtonDetaFormaPagoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("DetalleFactura")) {
			jButtonDetalleFacturaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			factura=(Factura) facturaLogic.getFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			factura =(Factura) facturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getempleado_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getformato_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("SubCliente")) {
			//sDescripcion=this.getActualSubClienteForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getsubcliente_descripcion();
			} else {
				//sDescripcion=this.getActualSubClienteForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getsubcliente_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Transporte")) {
			//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettransporte_descripcion();
			} else {
				//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettransporte_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettransportista_descripcion();
			}
		}

		if(sTipo.equals("TipoLlamada")) {
			//sDescripcion=this.getActualTipoLlamadaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettipollamada_descripcion();
			} else {
				//sDescripcion=this.getActualTipoLlamadaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettipollamada_descripcion();
			}
		}

		if(sTipo.equals("TipoFactura")) {
			//sDescripcion=this.getActualTipoFacturaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettipofactura_descripcion();
			} else {
				//sDescripcion=this.getActualTipoFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettipofactura_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=factura.gettipocambio_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("Pedido")) {
			//sDescripcion=this.getActualPedidoForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getpedido_descripcion();
			} else {
				//sDescripcion=this.getActualPedidoForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getpedido_descripcion();
			}
		}

		if(sTipo.equals("Responsable")) {
			//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getresponsable_descripcion();
			} else {
				//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getresponsable_descripcion();
			}
		}

		if(sTipo.equals("EstadoFisicoFacturaEmpresa")) {
			//sDescripcion=this.getActualEstadoFisicoFacturaEmpresaForeignKeyDescripcion((Long)value);
			if(!factura.getIsNew() && !factura.getIsChanged() && !factura.getIsDeleted()) {
				sDescripcion=factura.getestadofisicofacturaempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoFisicoFacturaEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=factura.getestadofisicofacturaempresa_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Factura facturaRow=new Factura();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaRow=(Factura) facturaLogic.getFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturaRow=(Factura) facturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetaFormaPagoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Factura factura) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormFactura==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura = (Factura)this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.factura = (Factura)this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(factura!=null) {
						this.factura = factura;
					} else {
						this.factura = new Factura();
					}
				}

				if(this.isTienePermisosDetaFormaPago && this.permiteMantenimiento(this.factura)) {
					DetaFormaPagoBeanSwingJInternalFrame detaformapagoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup=new DetaFormaPagoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detaformapagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup;
					} else {
						detaformapagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame;
					}

					List<Factura> facturas=new ArrayList<Factura>();
					facturas.add(this.factura);
					if(!esRelacionado) {
						//detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.setConGuardarRelaciones(false);
						//detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detaformapagoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormFactura.cargarDetaFormaPagoBeanSwingJInternalFrame(facturas,this.factura,detaformapagoBeanSwingJInternalFrame,/*conInicializar,*/detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.getConGuardarRelaciones(),detaformapagoBeanSwingJInternalFrame.detaformapagoSessionBean.getEsGuardarRelacionado());
					detaformapagoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detaformapagoBeanSwingJInternalFrame.actualizarEstadoPanelsDetaFormaPago("no_relacionado");

						detaformapagoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetaFormaPagoConstantesFunciones.ITAMANIOFILATABLA + (DetaFormaPagoConstantesFunciones.ITAMANIOFILATABLA/2));

						detaformapagoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
						TitledBorder titledBorderDetaFormaPago=(TitledBorder)detaformapagoBeanSwingJInternalFrame.jScrollPanelDatosDetaFormaPago.getBorder();

						titledBorderDetaFormaPago.setTitle(titledBorderFactura.getTitle() + " -> Deta Forma Pago");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detaformapagoBeanSwingJInternalFrame);
						}

						detaformapagoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detaformapagoBeanSwingJInternalFrame);

						detaformapagoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.facturaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Deta Forma Pago",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonDetalleFacturaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Factura factura) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormFactura==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura = (Factura)this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.factura = (Factura)this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(factura!=null) {
						this.factura = factura;
					} else {
						this.factura = new Factura();
					}
				}

				if(this.isTienePermisosDetalleFactura && this.permiteMantenimiento(this.factura)) {
					DetalleFacturaBeanSwingJInternalFrame detallefacturaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup=new DetalleFacturaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallefacturaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup;
					} else {
						detallefacturaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame;
					}

					List<Factura> facturas=new ArrayList<Factura>();
					facturas.add(this.factura);
					if(!esRelacionado) {
						//detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.setConGuardarRelaciones(false);
						//detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallefacturaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormFactura.cargarDetalleFacturaBeanSwingJInternalFrame(facturas,this.factura,detallefacturaBeanSwingJInternalFrame,/*conInicializar,*/detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.getConGuardarRelaciones(),detallefacturaBeanSwingJInternalFrame.detallefacturaSessionBean.getEsGuardarRelacionado());
					detallefacturaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallefacturaBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleFactura("no_relacionado");

						detallefacturaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleFacturaConstantesFunciones.ITAMANIOFILATABLA + (DetalleFacturaConstantesFunciones.ITAMANIOFILATABLA/2));

						detallefacturaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
						TitledBorder titledBorderDetalleFactura=(TitledBorder)detallefacturaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFactura.getBorder();

						titledBorderDetalleFactura.setTitle(titledBorderFactura.getTitle() + " -> Detalle Factura");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallefacturaBeanSwingJInternalFrame);
						}

						detallefacturaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallefacturaBeanSwingJInternalFrame);

						detallefacturaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.facturaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Factura",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualFactura(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura));			
			this.jButtonDuplicarFactura.setVisible((this.isVisibilidadCeldaDuplicarFactura && this.isPermisoDuplicarFactura));			
			this.jButtonCopiarFactura.setVisible((this.isVisibilidadCeldaCopiarFactura && this.isPermisoCopiarFactura));
			this.jButtonVerFormFactura.setVisible((this.isVisibilidadCeldaVerFormFactura && this.isPermisoVerFormFactura));
			
			this.jButtonAbrirOrderByFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));			
			
			this.jButtonNuevoRelacionesFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesFactura && this.isPermisoNuevoFactura));			
			this.jButtonNuevoGuardarCambiosFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura && this.isPermisoGuardarCambiosFactura));
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.jInternalFrameDetalleFormFactura.jButtonModificarFactura.setVisible((this.isVisibilidadCeldaModificarFactura && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.setVisible((this.isVisibilidadCeldaActualizarFactura && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.setVisible((this.isVisibilidadCeldaEliminarFactura && this.isPermisoEliminarFactura));
			this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.setVisible(this.isVisibilidadCeldaCancelarFactura);							
			this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.setVisible((this.isVisibilidadCeldaGuardarFactura && this.isPermisoGuardarCambiosFactura));			
			
			}
						
			this.jButtonGuardarCambiosTablaFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosFactura && this.isPermisoGuardarCambiosFactura));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura));						
			this.jButtonDuplicarToolBarFactura.setVisible((this.isVisibilidadCeldaDuplicarFactura && this.isPermisoDuplicarFactura));						
			this.jButtonCopiarToolBarFactura.setVisible((this.isVisibilidadCeldaCopiarFactura && this.isPermisoCopiarFactura));			
			this.jButtonVerFormToolBarFactura.setVisible((this.isVisibilidadCeldaVerFormFactura && this.isPermisoVerFormFactura));			
			this.jButtonAbrirOrderByToolBarFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));
			this.jButtonNuevoRelacionesToolBarFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesFactura && this.isPermisoNuevoFactura));			
			this.jButtonNuevoGuardarCambiosToolBarFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura && this.isPermisoGuardarCambiosFactura));			
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.jInternalFrameDetalleFormFactura.jButtonModificarToolBarFactura.setVisible((this.isVisibilidadCeldaModificarFactura && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jButtonActualizarToolBarFactura.setVisible((this.isVisibilidadCeldaActualizarFactura  && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jButtonEliminarToolBarFactura.setVisible((this.isVisibilidadCeldaEliminarFactura && this.isPermisoEliminarFactura));
			this.jInternalFrameDetalleFormFactura.jButtonCancelarToolBarFactura.setVisible(this.isVisibilidadCeldaCancelarFactura);				
			this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosToolBarFactura.setVisible((this.isVisibilidadCeldaGuardarFactura && this.isPermisoGuardarCambiosFactura));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosFactura && this.isPermisoGuardarCambiosFactura));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura));			
			this.jMenuItemDuplicarFactura.setVisible((this.isVisibilidadCeldaDuplicarFactura && this.isPermisoDuplicarFactura));			
			this.jMenuItemCopiarFactura.setVisible((this.isVisibilidadCeldaCopiarFactura && this.isPermisoCopiarFactura));			
			this.jMenuItemVerFormFactura.setVisible((this.isVisibilidadCeldaVerFormFactura && this.isPermisoVerFormFactura));			
			this.jMenuItemAbrirOrderByFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));			
			//this.jMenuItemMostrarOcultarFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));
			this.jMenuItemDetalleAbrirOrderByFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));			
			//this.jMenuItemDetalleMostrarOcultarFactura.setVisible((this.isVisibilidadCeldaOrdenFactura && this.isPermisoOrdenFactura));			
			this.jMenuItemNuevoRelacionesFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesFactura && this.isPermisoNuevoFactura));			
			this.jMenuItemNuevoGuardarCambiosFactura.setVisible((this.isVisibilidadCeldaNuevoFactura && this.isPermisoNuevoFactura && this.isPermisoGuardarCambiosFactura));									
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.jInternalFrameDetalleFormFactura.jMenuItemModificarFactura.setVisible((this.isVisibilidadCeldaModificarFactura && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jMenuItemActualizarFactura.setVisible((this.isVisibilidadCeldaActualizarFactura && this.isPermisoActualizarFactura));	
			this.jInternalFrameDetalleFormFactura.jMenuItemEliminarFactura.setVisible((this.isVisibilidadCeldaEliminarFactura && this.isPermisoEliminarFactura));
			this.jInternalFrameDetalleFormFactura.jMenuItemCancelarFactura.setVisible(this.isVisibilidadCeldaCancelarFactura);				
			}
			
			this.jMenuItemGuardarCambiosFactura.setVisible((this.isVisibilidadCeldaGuardarFactura && this.isPermisoGuardarCambiosFactura));						
			this.jMenuItemGuardarCambiosTablaFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosFactura && this.isPermisoGuardarCambiosFactura));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoFactura=this.jButtonNuevoFactura.isVisible();
			this.isVisibilidadCeldaDuplicarFactura=this.jButtonDuplicarFactura.isVisible();
			this.isVisibilidadCeldaCopiarFactura=this.jButtonCopiarFactura.isVisible();
			this.isVisibilidadCeldaVerFormFactura=this.jButtonVerFormFactura.isVisible();
			
			this.isVisibilidadCeldaOrdenFactura=this.jButtonAbrirOrderByFactura.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesFactura=this.jButtonNuevoRelacionesFactura.isVisible();
			this.isVisibilidadCeldaModificarFactura=this.jButtonModificarFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.isVisibilidadCeldaActualizarFactura=this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.isVisible();
			this.isVisibilidadCeldaEliminarFactura=this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.isVisible();
			this.isVisibilidadCeldaCancelarFactura=this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.isVisible();
			this.isVisibilidadCeldaGuardarFactura=this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosFactura=this.jButtonGuardarCambiosTablaFactura.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoFactura=this.jButtonNuevoToolBarFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFactura=this.jButtonNuevoRelacionesToolBarFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.isVisibilidadCeldaModificarFactura=this.jInternalFrameDetalleFormFactura.jButtonModificarToolBarFactura.isVisible();
			this.isVisibilidadCeldaActualizarFactura=this.jInternalFrameDetalleFormFactura.jButtonActualizarToolBarFactura.isVisible();
			this.isVisibilidadCeldaEliminarFactura=this.jInternalFrameDetalleFormFactura.jButtonEliminarToolBarFactura.isVisible();
			this.isVisibilidadCeldaCancelarFactura=this.jInternalFrameDetalleFormFactura.jButtonCancelarToolBarFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFactura=this.jButtonGuardarCambiosToolBarFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFactura=this.jButtonGuardarCambiosTablaToolBarFactura.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoFactura=this.jMenuItemNuevoFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFactura=this.jMenuItemNuevoRelacionesFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormFactura!=null) {
			this.isVisibilidadCeldaModificarFactura=this.jInternalFrameDetalleFormFactura.jMenuItemModificarFactura.isVisible();
			this.isVisibilidadCeldaActualizarFactura=this.jInternalFrameDetalleFormFactura.jMenuItemActualizarFactura.isVisible();
			this.isVisibilidadCeldaEliminarFactura=this.jInternalFrameDetalleFormFactura.jMenuItemEliminarFactura.isVisible();
			this.isVisibilidadCeldaCancelarFactura=this.jInternalFrameDetalleFormFactura.jMenuItemCancelarFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFactura=this.jMenuItemGuardarCambiosFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFactura=this.jMenuItemGuardarCambiosTablaFactura.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesFactura(Boolean esInicializar) {
		if(FacturaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.facturaSessionBean.getConGuardarRelaciones()) {
				//if(this.facturaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesFactura();
			}
			
			this.inicializarActualizarBindingBotonesManualFactura(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualFactura() {
		this.jButtonNuevoFactura.setVisible(this.isPermisoNuevoFactura);			
		this.jButtonDuplicarFactura.setVisible(this.isPermisoDuplicarFactura);			
		this.jButtonCopiarFactura.setVisible(this.isPermisoCopiarFactura);			
		this.jButtonVerFormFactura.setVisible(this.isPermisoVerFormFactura);			
		
		this.jButtonAbrirOrderByFactura.setVisible(this.isPermisoOrdenFactura);					
		
		this.jButtonNuevoRelacionesFactura.setVisible(this.isPermisoNuevoFactura);			
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonModificarFactura.setVisible(this.isPermisoActualizarFactura);	
			this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.setVisible(this.isPermisoActualizarFactura);	
			this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.setVisible(this.isPermisoEliminarFactura);
			this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.setVisible(this.isVisibilidadCeldaCancelarFactura);						
			this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.setVisible(this.isPermisoGuardarCambiosFactura);							
		}
		
		this.jButtonGuardarCambiosTablaFactura.setVisible(this.isPermisoActualizarFactura);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleFactura() {
		this.jInternalFrameDetalleFormFactura.jButtonModificarFactura.setVisible(this.isPermisoActualizarFactura);	
		this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.setVisible(this.isPermisoActualizarFactura);	
		this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.setVisible(this.isPermisoEliminarFactura);
		this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.setVisible(this.isVisibilidadCeldaCancelarFactura);							
		this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.setVisible((this.isVisibilidadCeldaGuardarFactura && this.isPermisoGuardarCambiosFactura));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosFactura() {
		if(FacturaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualFactura();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesFactura() {
	}
	
	public void jTableDatosFacturaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarFactura(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.factura.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebFactura(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.factura.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderFactura.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.factura.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebFactura(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.factura.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderFactura.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.factura.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebFactura(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.factura.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderFactura.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.factura.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebFactura(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.factura.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderFactura.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.factura.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebFactura(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.factura.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderFactura.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.factura.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebFactura(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.factura.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderFactura.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.factura.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebFactura(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.factura.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderFactura.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.factura.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_pre_impresoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getnumero_pre_impreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_pre_impreso like '%"+this.factura.getnumero_pre_impreso()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.factura.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_diasFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getnumero_dias()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_dias = "+this.factura.getnumero_dias().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.factura.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebFactura(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.factura.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderFactura.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.factura.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.factura.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFactura=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFactura.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebFactura(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.factura.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFactura.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.factura.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebFactura(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.factura.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderFactura.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.factura.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdireccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion like '%"+this.factura.getdireccion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.factura.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFactura=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFactura.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebFactura(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.factura.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFactura.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.factura.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebFactura(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.factura.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderFactura.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.factura.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefonoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettelefono()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono like '%"+this.factura.gettelefono()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sub_clienteFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosubcliente=true;

			idTienePermisosubcliente=this.tienePermisosUsuarioEnPaginaWebFactura(SubClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisosubcliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.subclienteBeanSwingJInternalFrame=new SubClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.subclienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.subclienteBeanSwingJInternalFrame.getSubClienteLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_sub_cliente()!=null) {
					this.subclienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.subclienteBeanSwingJInternalFrame.setIdActual(this.factura.getid_sub_cliente());
					this.subclienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.subclienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.subclienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaSubCliente();
				}

				JInternalFrameBase jinternalFrame =this.subclienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordersubcliente=(TitledBorder)this.subclienteBeanSwingJInternalFrame.jScrollPanelDatosSubCliente.getBorder();

				titledBordersubcliente.setTitle(titledBorderFactura.getTitle() + " -> Sub Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sub_clienteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_sub_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sub_cliente = "+this.factura.getid_sub_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="Vendedor";

			if(!this.sFinalQueryGeneral_vendedor.equals("")) {
				this.vendedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_vendedor);
				this.vendedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.vendedorBeanSwingJInternalFrame.procesarBusqueda(this.vendedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingVendedor(false);
			}

			if(!this.sFinalQueryComboVendedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFactura=null;
			TitledBorder titledBordervendedor=null;

			if(!this.jScrollPanelDatosFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderFactura.getTitle() + " -> Vendedor");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_vendedorFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebFactura(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.factura.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderFactura.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.factura.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transporteFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransporte=true;

			idTienePermisotransporte=this.tienePermisosUsuarioEnPaginaWebFactura(TransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisotransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.transporteBeanSwingJInternalFrame=new TransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transporteBeanSwingJInternalFrame.getTransporteLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_transporte()!=null) {
					this.transporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transporteBeanSwingJInternalFrame.setIdActual(this.factura.getid_transporte());
					this.transporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.transporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertransporte=(TitledBorder)this.transporteBeanSwingJInternalFrame.jScrollPanelDatosTransporte.getBorder();

				titledBordertransporte.setTitle(titledBorderFactura.getTitle() + " -> Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transporteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transporte = "+this.factura.getid_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebFactura(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.factura.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderFactura.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.factura.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonordenFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getorden()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where orden like '%"+this.factura.getorden()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_llamadaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipollamada=true;

			idTienePermisotipollamada=this.tienePermisosUsuarioEnPaginaWebFactura(TipoLlamadaConstantesFunciones.CLASSNAME);

			if(idTienePermisotipollamada) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.tipollamadaBeanSwingJInternalFrame=new TipoLlamadaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipollamadaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipollamadaBeanSwingJInternalFrame.getTipoLlamadaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_tipo_llamada()!=null) {
					this.tipollamadaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipollamadaBeanSwingJInternalFrame.setIdActual(this.factura.getid_tipo_llamada());
					this.tipollamadaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipollamadaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipollamadaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoLlamada();
				}

				JInternalFrameBase jinternalFrame =this.tipollamadaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertipollamada=(TitledBorder)this.tipollamadaBeanSwingJInternalFrame.jScrollPanelDatosTipoLlamada.getBorder();

				titledBordertipollamada.setTitle(titledBorderFactura.getTitle() + " -> Tipo Llamada");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_llamadaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_tipo_llamada()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_llamada = "+this.factura.getid_tipo_llamada().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonhora_inicioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gethora_inicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where hora_inicio = "+this.factura.gethora_inicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonhora_finFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gethora_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where hora_fin = "+this.factura.gethora_fin().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_facturaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipofactura=true;

			idTienePermisotipofactura=this.tienePermisosUsuarioEnPaginaWebFactura(TipoFacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisotipofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.tipofacturaBeanSwingJInternalFrame=new TipoFacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipofacturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipofacturaBeanSwingJInternalFrame.getTipoFacturaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_tipo_factura()!=null) {
					this.tipofacturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipofacturaBeanSwingJInternalFrame.setIdActual(this.factura.getid_tipo_factura());
					this.tipofacturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipofacturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipofacturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoFactura();
				}

				JInternalFrameBase jinternalFrame =this.tipofacturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertipofactura=(TitledBorder)this.tipofacturaBeanSwingJInternalFrame.jScrollPanelDatosTipoFactura.getBorder();

				titledBordertipofactura.setTitle(titledBorderFactura.getTitle() + " -> Tipo Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_facturaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_tipo_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_factura = "+this.factura.getid_tipo_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.factura.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncupoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getcupo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cupo = "+this.factura.getcupo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsaldoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getsaldo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where saldo = "+this.factura.getsaldo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondocumentosFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdocumentos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where documentos = "+this.factura.getdocumentos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondisponibleFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdisponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where disponible = "+this.factura.getdisponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_descuentoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getporcentaje_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_descuento = "+this.factura.getporcentaje_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.factura.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsumanFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getsuman()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where suman = "+this.factura.getsuman().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.factura.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_sin_ivaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_sin_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_sin_iva = "+this.factura.gettotal_sin_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_descuentoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_descuento = "+this.factura.gettotal_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_fleteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_flete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_flete = "+this.factura.gettotal_flete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.factura.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.factura.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_otroFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_otro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_otro = "+this.factura.gettotal_otro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonultimo_costoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getultimo_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ultimo_costo = "+this.factura.getultimo_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.factura.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.factura.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfinanciamientoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfinanciamiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where financiamiento = "+this.factura.getfinanciamiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmargen_utilidadFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getmargen_utilidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where margen_utilidad = "+this.factura.getmargen_utilidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.factura.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanticipoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getanticipo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anticipo = "+this.factura.getanticipo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotros_valoresFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getotros_valores()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros_valores = "+this.factura.getotros_valores().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_retencionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_retencion = "+this.factura.gettotal_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_consumo_especialFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.gettotal_consumo_especial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_consumo_especial = "+this.factura.gettotal_consumo_especial().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonretencionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getretencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where retencion = "+this.factura.getretencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFactura=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderFactura.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebFactura(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.factura.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderFactura.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.factura.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_clienteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getes_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_cliente = "+this.factura.getes_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFactura=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderFactura.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebFactura(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.factura.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderFactura.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.factura.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_pedidoFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopedido=true;

			idTienePermisopedido=this.tienePermisosUsuarioEnPaginaWebFactura(PedidoConstantesFunciones.CLASSNAME);

			if(idTienePermisopedido) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.pedidoBeanSwingJInternalFrame=new PedidoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.pedidoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.pedidoBeanSwingJInternalFrame.getPedidoLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_pedido()!=null) {
					this.pedidoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.pedidoBeanSwingJInternalFrame.setIdActual(this.factura.getid_pedido());
					this.pedidoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.pedidoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.pedidoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPedido();
				}

				JInternalFrameBase jinternalFrame =this.pedidoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderpedido=(TitledBorder)this.pedidoBeanSwingJInternalFrame.jScrollPanelDatosPedido.getBorder();

				titledBorderpedido.setTitle(titledBorderFactura.getTitle() + " -> Pedido");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_pedidoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pedido = "+this.factura.getid_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_responsableFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoresponsable=true;

			idTienePermisoresponsable=this.tienePermisosUsuarioEnPaginaWebFactura(ResponsableConstantesFunciones.CLASSNAME);

			if(idTienePermisoresponsable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.responsableBeanSwingJInternalFrame=new ResponsableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.responsableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.responsableBeanSwingJInternalFrame.getResponsableLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_responsable()!=null) {
					this.responsableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.responsableBeanSwingJInternalFrame.setIdActual(this.factura.getid_responsable());
					this.responsableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.inicializarActualizarBindingTablaResponsable();
				}

				JInternalFrameBase jinternalFrame =this.responsableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderresponsable=(TitledBorder)this.responsableBeanSwingJInternalFrame.jScrollPanelDatosResponsable.getBorder();

				titledBorderresponsable.setTitle(titledBorderFactura.getTitle() + " -> Responsable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_responsableFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_responsable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_responsable = "+this.factura.getid_responsable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_fisico_factura_empresaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadofisicofacturaempresa=true;

			idTienePermisoestadofisicofacturaempresa=this.tienePermisosUsuarioEnPaginaWebFactura(EstadoFisicoFacturaEmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadofisicofacturaempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);

				this.estadofisicofacturaempresaBeanSwingJInternalFrame=new EstadoFisicoFacturaEmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadofisicofacturaempresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadofisicofacturaempresaBeanSwingJInternalFrame.getEstadoFisicoFacturaEmpresaLogic().setConnexion(this.facturaLogic.getConnexion());

				if(this.factura.getid_estado_fisico_factura_empresa()!=null) {
					this.estadofisicofacturaempresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadofisicofacturaempresaBeanSwingJInternalFrame.setIdActual(this.factura.getid_estado_fisico_factura_empresa());
					this.estadofisicofacturaempresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadofisicofacturaempresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadofisicofacturaempresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoFisicoFacturaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.estadofisicofacturaempresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFactura=(TitledBorder)this.jScrollPanelDatosFactura.getBorder();
				TitledBorder titledBorderestadofisicofacturaempresa=(TitledBorder)this.estadofisicofacturaempresaBeanSwingJInternalFrame.jScrollPanelDatosEstadoFisicoFacturaEmpresa.getBorder();

				titledBorderestadofisicofacturaempresa.setTitle(titledBorderFactura.getTitle() + " -> Estado Fisico Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_fisico_factura_empresaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getid_estado_fisico_factura_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_fisico_factura_empresa = "+this.factura.getid_estado_fisico_factura_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.factura.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_autorizacionFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_autorizacion = '"+Funciones2.getStringPostgresDate(this.factura.getfecha_autorizacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_clienteFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_cliente = '"+Funciones2.getStringPostgresDate(this.factura.getfecha_cliente())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_documentoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getnumero_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_documento like '%"+this.factura.getnumero_documento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_dauFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getnumero_dau()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_dau like '%"+this.factura.getnumero_dau()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_referendoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getnumero_referendo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_referendo like '%"+this.factura.getnumero_referendo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_referendoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getfecha_referendo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_referendo = '"+Funciones2.getStringPostgresDate(this.factura.getfecha_referendo())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonaforo_referendoFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFactura(this.getfactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.factura==null) {
						this.factura = new Factura();
					}

					this.setVariablesFormularioToObjetoActualFactura(this.factura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);
				}

				if(this.factura.getaforo_referendo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where aforo_referendo like '%"+this.factura.getaforo_referendo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorNumeroPreImpresoFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasBusquedaPorNumeroPreImpreso();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAnioFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdAnio();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdAsientoContable();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdCliente();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdEjercicio();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdEmpleado();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdEmpresa();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoFisicoFacturaEmpresaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdEstadoFisicoFacturaEmpresa();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdFormato();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdMes();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdMoneda();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPedidoFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdPedido();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdPeriodo();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdResponsableFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdResponsable();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSubClienteFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdSubCliente();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdSucursal();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCambioFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTipoCambio();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoFacturaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTipoFactura();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoLlamadaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTipoLlamada();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTipoPrecio();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransporteFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTransporte();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdTransportista();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdUsuario();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFactura(false,false);

			this.getFacturasFK_IdVendedor();

			this.inicializarActualizarBindingFactura(false);

			//if(FacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameFactura() {
		if(this.jInternalFrameDetalleFormFactura!=null) {
		

		if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
			this.jInternalFrameDetalleFormFactura.setVisible(false);	    			
			this.jInternalFrameDetalleFormFactura.dispose();
			this.jInternalFrameDetalleFormFactura=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoFactura!=null) {
			this.jInternalFrameReporteDinamicoFactura.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoFactura.dispose();
			this.jInternalFrameReporteDinamicoFactura=null;
		}
		
		if(this.jInternalFrameImportacionFactura!=null) {
			this.jInternalFrameImportacionFactura.setVisible(false);	    			
			this.jInternalFrameImportacionFactura.dispose();
			this.jInternalFrameImportacionFactura=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessFactura();
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			
			if(sTipo.equals("NuevoFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarFactura")) {
				jButtonDuplicarFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarFactura")) {
				jButtonCopiarFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormFactura")) {
				jButtonVerFormFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarFactura")) {
				jButtonDuplicarFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarFactura")) {
				jButtonDuplicarFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarFactura")) {
				jButtonModificarFacturaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarFactura")) {
				jButtonModificarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarFactura")) {
				jButtonModificarFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarFactura")) {
				jButtonActualizarFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarFactura")) {
				jButtonActualizarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarFactura")) {
				jButtonActualizarFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarFactura")) {
				jButtonEliminarFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarFactura")) {
				jButtonEliminarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarFactura")) {
				jButtonEliminarFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarFactura")) {
				jButtonCancelarFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarFactura")) {
				jButtonCancelarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarFactura")) {
				jButtonCancelarFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarFactura")) {
				jButtonCerrarFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarFactura")) {
				jButtonCerrarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarFactura")) {
				jButtonCerrarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarFactura")) {
				jButtonMostrarOcultarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarFactura")) {
				jButtonCancelarFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarFactura")) {
				jButtonCopiarFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarFactura")) {
				jButtonVerFormFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarFactura")) {
				jButtonCopiarFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormFactura")) {
				jButtonVerFormFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionFactura")) {
				jButtonRecargarInformacionFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarFactura")) {
				jButtonRecargarInformacionFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionFactura")) {
				jButtonRecargarInformacionFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresFactura")) {
				jButtonAnterioresFacturaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarFactura")) {
				jButtonAnterioresFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreFactura")) {
				jButtonAnterioresFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesFactura")) {
				jButtonSiguientesFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarFactura")) {
				jButtonSiguientesFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesFactura")) {
				jButtonSiguientesFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByFactura") || sTipo.equals("MenuItemDetalleAbrirOrderByFactura")) {
				jButtonAbrirOrderByFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarFactura") || sTipo.equals("MenuItemDetalleMostrarOcultarFactura")) {
				jButtonMostrarOcultarFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosFactura")) {
				jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarFactura")) {
				jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosFactura")) {
				jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoFactura")) {
				jButtonCerrarReporteDinamicoFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoFactura")) {
				jButtonGenerarReporteDinamicoFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoFactura")) {
				
				jButtonGenerarExcelReporteDinamicoFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionFactura")) {
				jButtonCerrarImportacionFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionFactura")) {
				
				jButtonGenerarImportacionFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionFactura")) {
				
				jButtonAbrirImportacionFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesFactura")) {
				jComboBoxTiposAccionesFacturaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesFactura")) {
				jComboBoxTiposRelacionesFacturaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioFactura")) {
				jComboBoxTiposAccionesFacturaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarFactura")) {
				
				jComboBoxTiposSeleccionarFacturaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralFactura")) {
				jTextFieldValorCampoGeneralFacturaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByFactura")) {
				jButtonAbrirOrderByFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarFactura")) {
				jButtonAbrirOrderByFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByFactura")) {
				jButtonCerrarOrderByFacturaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaBusqueda")) {
				this.jButtonidFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaUpdate")) {
				this.jButtonid_empresaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaBusqueda")) {
				this.jButtonid_empresaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaUpdate")) {
				this.jButtonid_sucursalFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaBusqueda")) {
				this.jButtonid_sucursalFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaUpdate")) {
				this.jButtonid_ejercicioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaBusqueda")) {
				this.jButtonid_ejercicioFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaUpdate")) {
				this.jButtonid_periodoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaBusqueda")) {
				this.jButtonid_periodoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaUpdate")) {
				this.jButtonid_anioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaBusqueda")) {
				this.jButtonid_anioFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaUpdate")) {
				this.jButtonid_mesFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaBusqueda")) {
				this.jButtonid_mesFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioFacturaUpdate")) {
				this.jButtonid_usuarioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioFacturaBusqueda")) {
				this.jButtonid_usuarioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_pre_impresoFacturaBusqueda")) {
				this.jButtonnumero_pre_impresoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaBusqueda")) {
				this.jButtonfecha_emisionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasFacturaBusqueda")) {
				this.jButtonnumero_diasFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoFacturaBusqueda")) {
				this.jButtonfecha_vencimientoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaUpdate")) {
				this.jButtonid_monedaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaBusqueda")) {
				this.jButtonid_monedaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionFacturaBusqueda")) {
				this.jButtoncotizacionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFactura")) {
				this.jButtonid_empleadoFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaUpdate")) {
				this.jButtonid_empleadoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaBusqueda")) {
				this.jButtonid_empleadoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoFacturaUpdate")) {
				this.jButtonid_formatoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoFacturaBusqueda")) {
				this.jButtonid_formatoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionFacturaBusqueda")) {
				this.jButtondireccionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaBusqueda")) {
				this.jButtonrucFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFactura")) {
				this.jButtonid_clienteFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaUpdate")) {
				this.jButtonid_clienteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaBusqueda")) {
				this.jButtonid_clienteFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaUpdate")) {
				this.jButtonid_tipo_precioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaBusqueda")) {
				this.jButtonid_tipo_precioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoFacturaBusqueda")) {
				this.jButtontelefonoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sub_clienteFacturaUpdate")) {
				this.jButtonid_sub_clienteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sub_clienteFacturaBusqueda")) {
				this.jButtonid_sub_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorFactura")) {
				this.jButtonid_vendedorFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorFacturaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorFacturaUpdate")) {
				this.jButtonid_vendedorFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorFacturaBusqueda")) {
				this.jButtonid_vendedorFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteFacturaUpdate")) {
				this.jButtonid_transporteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteFacturaBusqueda")) {
				this.jButtonid_transporteFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaFacturaUpdate")) {
				this.jButtonid_transportistaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaFacturaBusqueda")) {
				this.jButtonid_transportistaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ordenFacturaBusqueda")) {
				this.jButtonordenFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_llamadaFacturaUpdate")) {
				this.jButtonid_tipo_llamadaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_llamadaFacturaBusqueda")) {
				this.jButtonid_tipo_llamadaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("hora_inicioFacturaBusqueda")) {
				this.jButtonhora_inicioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("hora_finFacturaBusqueda")) {
				this.jButtonhora_finFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_facturaFacturaUpdate")) {
				this.jButtonid_tipo_facturaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_facturaFacturaBusqueda")) {
				this.jButtonid_tipo_facturaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaBusqueda")) {
				this.jButtondescripcionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cupoFacturaBusqueda")) {
				this.jButtoncupoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("saldoFacturaBusqueda")) {
				this.jButtonsaldoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("documentosFacturaBusqueda")) {
				this.jButtondocumentosFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleFacturaBusqueda")) {
				this.jButtondisponibleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoFacturaBusqueda")) {
				this.jButtonporcentaje_descuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaBusqueda")) {
				this.jButtontotal_ivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanFacturaBusqueda")) {
				this.jButtonsumanFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorFacturaBusqueda")) {
				this.jButtondescuento_valorFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaFacturaBusqueda")) {
				this.jButtontotal_sin_ivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoFacturaBusqueda")) {
				this.jButtontotal_descuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_fleteFacturaBusqueda")) {
				this.jButtontotal_fleteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaBusqueda")) {
				this.jButtontotalFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalFacturaBusqueda")) {
				this.jButtonsub_totalFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroFacturaBusqueda")) {
				this.jButtontotal_otroFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoFacturaBusqueda")) {
				this.jButtonultimo_costoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaFacturaBusqueda")) {
				this.jButtonivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoFacturaBusqueda")) {
				this.jButtondescuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoFacturaBusqueda")) {
				this.jButtonfinanciamientoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("margen_utilidadFacturaBusqueda")) {
				this.jButtonmargen_utilidadFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceFacturaBusqueda")) {
				this.jButtoniceFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anticipoFacturaBusqueda")) {
				this.jButtonanticipoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_valoresFacturaBusqueda")) {
				this.jButtonotros_valoresFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_retencionFacturaBusqueda")) {
				this.jButtontotal_retencionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_consumo_especialFacturaBusqueda")) {
				this.jButtontotal_consumo_especialFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionFacturaBusqueda")) {
				this.jButtonretencionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioFactura")) {
				this.jButtonid_tipo_cambioFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioFacturaUpdate")) {
				this.jButtonid_tipo_cambioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioFacturaBusqueda")) {
				this.jButtonid_tipo_cambioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_clienteFacturaBusqueda")) {
				this.jButtones_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableFactura")) {
				this.jButtonid_asiento_contableFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaUpdate")) {
				this.jButtonid_asiento_contableFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaBusqueda")) {
				this.jButtonid_asiento_contableFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_pedidoFacturaUpdate")) {
				this.jButtonid_pedidoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_pedidoFacturaBusqueda")) {
				this.jButtonid_pedidoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableFacturaUpdate")) {
				this.jButtonid_responsableFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableFacturaBusqueda")) {
				this.jButtonid_responsableFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_fisico_factura_empresaFacturaUpdate")) {
				this.jButtonid_estado_fisico_factura_empresaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_fisico_factura_empresaFacturaBusqueda")) {
				this.jButtonid_estado_fisico_factura_empresaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaFacturaBusqueda")) {
				this.jButtonfechaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionFacturaBusqueda")) {
				this.jButtonfecha_autorizacionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteFacturaBusqueda")) {
				this.jButtonfecha_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoFacturaBusqueda")) {
				this.jButtonnumero_documentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_dauFacturaBusqueda")) {
				this.jButtonnumero_dauFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_referendoFacturaBusqueda")) {
				this.jButtonnumero_referendoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_referendoFacturaBusqueda")) {
				this.jButtonfecha_referendoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("aforo_referendoFacturaBusqueda")) {
				this.jButtonaforo_referendoFacturaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteFactura")) {
				this.jButtonid_clienteFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("id_vendedorFactura")) {
				this.jButtonid_vendedorFacturaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorNumeroPreImpresoFactura")) {
				this.jButtonBusquedaPorNumeroPreImpresoFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteFactura")) {
				this.jButtonFK_IdClienteFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoFisicoFacturaEmpresaFactura")) {
				this.jButtonFK_IdEstadoFisicoFacturaEmpresaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPedidoFactura")) {
				this.jButtonFK_IdPedidoFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdResponsableFactura")) {
				this.jButtonFK_IdResponsableFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdSubClienteFactura")) {
				this.jButtonFK_IdSubClienteFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransportistaFactura")) {
				this.jButtonFK_IdTransportistaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorFactura")) {
				this.jButtonFK_IdVendedorFacturaActionPerformed(evt);
			}
			
			;
			
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessFactura();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Factura facturaLocal=null;
			
			if(!this.getEsControlTabla()) {
				facturaLocal=this.factura;
			} else {
				facturaLocal=this.facturaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
							
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
								
						
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
								
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
							
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
								
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosFactura")) {
					jCheckBoxSeleccionarTodosFacturaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosFactura")) {
					jCheckBoxSeleccionadosFacturaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarFactura")) {
					
				}
				
				


				
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
												
				
				


				
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.factura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.factura);
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Factura.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Factura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaAnterior =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaAnterior =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarFactura")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosFactura.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.factura =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.factura =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.factura);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarFactura")) {
				
				}
				
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarFactura")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosFactura.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarFactura")) {
			
			}
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessFactura();
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			if(sTipo.equals("NuevoFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarFactura")) {
				jButtonDuplicarFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarFactura")) {
				jButtonCopiarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormFactura")) {
				jButtonVerFormFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesFactura")) {
				jButtonNuevoFacturaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarFactura")) {
				jButtonModificarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarFactura")) {
				jButtonActualizarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarFactura")) {
				jButtonEliminarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarFactura")) {
				jButtonCancelarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarFactura")) {
				jButtonCerrarFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosFactura")) {
				jButtonGuardarCambiosFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosFactura")) {
				jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByFactura")) {
				jButtonAbrirOrderByFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionFactura")) {
				jButtonRecargarInformacionFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresFactura")) {
				jButtonAnterioresFacturaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesFactura")) {
				jButtonSiguientesFacturaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaBusqueda")) {
				this.jButtonidFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaUpdate")) {
				this.jButtonid_empresaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaBusqueda")) {
				this.jButtonid_empresaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaUpdate")) {
				this.jButtonid_sucursalFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaBusqueda")) {
				this.jButtonid_sucursalFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaUpdate")) {
				this.jButtonid_ejercicioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaBusqueda")) {
				this.jButtonid_ejercicioFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaUpdate")) {
				this.jButtonid_periodoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaBusqueda")) {
				this.jButtonid_periodoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaUpdate")) {
				this.jButtonid_anioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaBusqueda")) {
				this.jButtonid_anioFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaUpdate")) {
				this.jButtonid_mesFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaBusqueda")) {
				this.jButtonid_mesFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioFacturaUpdate")) {
				this.jButtonid_usuarioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioFacturaBusqueda")) {
				this.jButtonid_usuarioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_pre_impresoFacturaBusqueda")) {
				this.jButtonnumero_pre_impresoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaBusqueda")) {
				this.jButtonfecha_emisionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasFacturaBusqueda")) {
				this.jButtonnumero_diasFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoFacturaBusqueda")) {
				this.jButtonfecha_vencimientoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaUpdate")) {
				this.jButtonid_monedaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaBusqueda")) {
				this.jButtonid_monedaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionFacturaBusqueda")) {
				this.jButtoncotizacionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFactura")) {
				this.jButtonid_empleadoFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaUpdate")) {
				this.jButtonid_empleadoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaBusqueda")) {
				this.jButtonid_empleadoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoFacturaUpdate")) {
				this.jButtonid_formatoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoFacturaBusqueda")) {
				this.jButtonid_formatoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionFacturaBusqueda")) {
				this.jButtondireccionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaBusqueda")) {
				this.jButtonrucFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFactura")) {
				this.jButtonid_clienteFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaUpdate")) {
				this.jButtonid_clienteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaBusqueda")) {
				this.jButtonid_clienteFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaUpdate")) {
				this.jButtonid_tipo_precioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaBusqueda")) {
				this.jButtonid_tipo_precioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoFacturaBusqueda")) {
				this.jButtontelefonoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sub_clienteFacturaUpdate")) {
				this.jButtonid_sub_clienteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sub_clienteFacturaBusqueda")) {
				this.jButtonid_sub_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorFactura")) {
				this.jButtonid_vendedorFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorFacturaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorFacturaUpdate")) {
				this.jButtonid_vendedorFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorFacturaBusqueda")) {
				this.jButtonid_vendedorFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteFacturaUpdate")) {
				this.jButtonid_transporteFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteFacturaBusqueda")) {
				this.jButtonid_transporteFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaFacturaUpdate")) {
				this.jButtonid_transportistaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaFacturaBusqueda")) {
				this.jButtonid_transportistaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ordenFacturaBusqueda")) {
				this.jButtonordenFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_llamadaFacturaUpdate")) {
				this.jButtonid_tipo_llamadaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_llamadaFacturaBusqueda")) {
				this.jButtonid_tipo_llamadaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("hora_inicioFacturaBusqueda")) {
				this.jButtonhora_inicioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("hora_finFacturaBusqueda")) {
				this.jButtonhora_finFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_facturaFacturaUpdate")) {
				this.jButtonid_tipo_facturaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_facturaFacturaBusqueda")) {
				this.jButtonid_tipo_facturaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaBusqueda")) {
				this.jButtondescripcionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cupoFacturaBusqueda")) {
				this.jButtoncupoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("saldoFacturaBusqueda")) {
				this.jButtonsaldoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("documentosFacturaBusqueda")) {
				this.jButtondocumentosFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleFacturaBusqueda")) {
				this.jButtondisponibleFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_descuentoFacturaBusqueda")) {
				this.jButtonporcentaje_descuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaBusqueda")) {
				this.jButtontotal_ivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanFacturaBusqueda")) {
				this.jButtonsumanFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorFacturaBusqueda")) {
				this.jButtondescuento_valorFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaFacturaBusqueda")) {
				this.jButtontotal_sin_ivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoFacturaBusqueda")) {
				this.jButtontotal_descuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_fleteFacturaBusqueda")) {
				this.jButtontotal_fleteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaBusqueda")) {
				this.jButtontotalFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalFacturaBusqueda")) {
				this.jButtonsub_totalFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_otroFacturaBusqueda")) {
				this.jButtontotal_otroFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ultimo_costoFacturaBusqueda")) {
				this.jButtonultimo_costoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaFacturaBusqueda")) {
				this.jButtonivaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoFacturaBusqueda")) {
				this.jButtondescuentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoFacturaBusqueda")) {
				this.jButtonfinanciamientoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("margen_utilidadFacturaBusqueda")) {
				this.jButtonmargen_utilidadFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceFacturaBusqueda")) {
				this.jButtoniceFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anticipoFacturaBusqueda")) {
				this.jButtonanticipoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_valoresFacturaBusqueda")) {
				this.jButtonotros_valoresFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_retencionFacturaBusqueda")) {
				this.jButtontotal_retencionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_consumo_especialFacturaBusqueda")) {
				this.jButtontotal_consumo_especialFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionFacturaBusqueda")) {
				this.jButtonretencionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioFactura")) {
				this.jButtonid_tipo_cambioFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioFacturaUpdate")) {
				this.jButtonid_tipo_cambioFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioFacturaBusqueda")) {
				this.jButtonid_tipo_cambioFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_clienteFacturaBusqueda")) {
				this.jButtones_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableFactura")) {
				this.jButtonid_asiento_contableFacturaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaUpdate")) {
				this.jButtonid_asiento_contableFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaBusqueda")) {
				this.jButtonid_asiento_contableFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_pedidoFacturaUpdate")) {
				this.jButtonid_pedidoFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_pedidoFacturaBusqueda")) {
				this.jButtonid_pedidoFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableFacturaUpdate")) {
				this.jButtonid_responsableFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableFacturaBusqueda")) {
				this.jButtonid_responsableFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_fisico_factura_empresaFacturaUpdate")) {
				this.jButtonid_estado_fisico_factura_empresaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_fisico_factura_empresaFacturaBusqueda")) {
				this.jButtonid_estado_fisico_factura_empresaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaFacturaBusqueda")) {
				this.jButtonfechaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionFacturaBusqueda")) {
				this.jButtonfecha_autorizacionFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteFacturaBusqueda")) {
				this.jButtonfecha_clienteFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoFacturaBusqueda")) {
				this.jButtonnumero_documentoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_dauFacturaBusqueda")) {
				this.jButtonnumero_dauFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_referendoFacturaBusqueda")) {
				this.jButtonnumero_referendoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_referendoFacturaBusqueda")) {
				this.jButtonfecha_referendoFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("aforo_referendoFacturaBusqueda")) {
				this.jButtonaforo_referendoFacturaBusquedaActionPerformed(evt);
			}
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessFactura();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameFactura")) {
				closingInternalFrameFactura();
				
			} else if(sTipo.equals("jButtonCancelarFactura")) {
				JInternalFrameBase jInternalFrameDetalleFormFactura = (JInternalFrameBase)evt.getSource();
	            	
	            FacturaBeanSwingJInternalFrame jInternalFrameParent=(FacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormFactura.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarFacturaActionPerformed(null);
			}
			
			FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.factura,new Object(),this.facturaParameterGeneral,this.facturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.factura)) {
			if(!esControlTabla) {
				if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualFactura(this.factura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);			
				}
				
				if(this.facturaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualFactura(this.factura,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaReturnGeneral=facturaLogic.procesarEventosFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaLogic.getFacturas(),this.factura,this.facturaParameterGeneral,this.isEsNuevoFactura,classes);//this.facturaLogic.getFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanFactura(this.facturaReturnGeneral,this.facturaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.facturaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanFactura(classes,this.facturaReturnGeneral,this.facturaBean,false);
					}
						
					if(this.facturaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyFactura(this.facturaReturnGeneral.getFactura());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioFactura(this.facturaReturnGeneral.getFactura());	
					}
						
					if(this.facturaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioFactura(this.facturaReturnGeneral.getFactura(),classes);//this.facturaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioFactura(this.factura,classes);//this.facturaBean);									
				}
			
				if(FacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualFactura(this.factura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFactura(this.factura);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.facturaAnterior!=null) {
						this.factura=this.facturaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaReturnGeneral=facturaLogic.procesarEventosFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaLogic.getFacturas(),this.factura,this.facturaParameterGeneral,this.isEsNuevoFactura,classes);//this.facturaLogic.getFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.facturaReturnGeneral.getFactura(),facturaLogic.getFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.facturaReturnGeneral.getFactura(),this.facturas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosFactura.repaint();
				
				//((AbstractTableModel) this.jTableDatosFactura.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosFactura();
			}
		}
	}
	
	public void actualizarVisualTableDatosFactura() throws Exception {
		
		FacturaModel facturaModel=(FacturaModel)this.jTableDatosFactura.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaModel.facturas=this.facturaLogic.getFacturas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			facturaModel.facturas=this.facturas;
		}
		
		
		((FacturaModel) this.jTableDatosFactura.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaFactura() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getfacturaAnterior(),this.facturaLogic.getFacturas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getfacturaAnterior(),this.facturas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosFactura();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioFactura(Factura factura,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaFormaPago.class)) {
					this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.setDetaFormaPagos(factura.getDetaFormaPagos());
					this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaFormaPago(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFactura.class)) {
					this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.setDetalleFacturas(factura.getDetalleFacturas());
					this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFactura(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.factura,new Object(),generalEntityParameterGeneral,this.facturaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.facturaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=FacturaConstantesFunciones.getClassesRelationshipsOfFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=FacturaConstantesFunciones.getClassesRelationshipsFromStringsOfFactura(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				FacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.factura,new Object(),generalEntityParameterGeneral,this.facturaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioFactura(FacturaBean facturaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaFormaPago.class)) {
					this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.setDetaFormaPagos(factura.getDetaFormaPagos());
					this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaFormaPago(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFactura.class)) {
					this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.setDetalleFacturas(factura.getDetalleFacturas());
					this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFactura(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanFactura(ArrayList<Classe> classes,FacturaReturnGeneral facturaReturnGeneral,FacturaBean facturaBean,Boolean conDefault) throws Exception {
		
			this.facturaBean.setDetaFormaPagos(facturaReturnGeneral.getFactura().getDetaFormaPagos());
			this.facturaBean.setDetalleFacturas(facturaReturnGeneral.getFactura().getDetalleFacturas());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualFactura(Factura factura,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaFormaPago.class)) {
					factura.setDetaFormaPagos(this.jInternalFrameDetalleFormFactura.detaformapagoBeanSwingJInternalFrame.detaformapagoLogic.getDetaFormaPagos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFactura.class)) {
					factura.setDetalleFacturas(this.jInternalFrameDetalleFormFactura.detallefacturaBeanSwingJInternalFrame.detallefacturaLogic.getDetalleFacturas());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.factura)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormFactura = new FacturaDetalleFormJInternalFrame(jDesktopPane,this.facturaSessionBean.getConGuardarRelaciones(),this.facturaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormFactura);
		this.jInternalFrameDetalleFormFactura.setVisible(false);
		this.jInternalFrameDetalleFormFactura.setSelected(false);						
		
		this.jInternalFrameDetalleFormFactura.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormFactura.facturaLogic=this.facturaLogic;
		
		this.cargarCombosFrameForeignKeyFactura("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleFactura();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFactura();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyFactura("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyFactura();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFactura"));
		
		this.jInternalFrameDetalleFormFactura.jButtonModificarFactura.addActionListener(new ButtonActionListener(this,"ModificarFactura"));

		
		this.jInternalFrameDetalleFormFactura.jButtonModificarToolBarFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarFactura"));
					
		this.jInternalFrameDetalleFormFactura.jMenuItemModificarFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarFactura"));		
		
		
		
		this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.addActionListener (new ButtonActionListener(this,"ActualizarFactura"));
		
		
		this.jInternalFrameDetalleFormFactura.jButtonActualizarToolBarFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFactura"));
						
		this.jInternalFrameDetalleFormFactura.jMenuItemActualizarFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFactura"));		
		
		
		
		this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.addActionListener (new ButtonActionListener(this,"EliminarFactura"));
		
		
		this.jInternalFrameDetalleFormFactura.jButtonEliminarToolBarFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarFactura"));
								
		this.jInternalFrameDetalleFormFactura.jMenuItemEliminarFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFactura"));		
		
		
		
		this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.addActionListener (new ButtonActionListener(this,"CancelarFactura"));
		
		
		this.jInternalFrameDetalleFormFactura.jButtonCancelarToolBarFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarFactura"));
					
		this.jInternalFrameDetalleFormFactura.jMenuItemCancelarFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFactura"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormFactura.jMenuItemDetalleCerrarFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFactura"));		
		
		
		
		this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosToolBarFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFactura"));
		
		
		
		this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosToolBarFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFactura"));
		
		
		
		this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFactura"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonidFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_pre_impresoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_pre_impresoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_emisionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_diasFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_vencimientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncotizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionFacturaBusqueda"));
		//jButtonid_empleadoFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFactura.addActionListener(new ButtonActionListener(this,"id_empleadoFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondireccionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"direccionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonrucFacturaBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaBusqueda"));
		//jButtonid_clienteFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFactura.addActionListener(new ButtonActionListener(this,"id_clienteFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontelefonoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaBusqueda"));
		//jButtonid_vendedorFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFactura.addActionListener(new ButtonActionListener(this,"id_vendedorFactura"));
		//jButtonid_vendedorFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transporteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonordenFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ordenFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_inicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_inicioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_finFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_finFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescripcionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncupoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cupoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsaldoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"saldoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondocumentosFacturaBusqueda.addActionListener(new ButtonActionListener(this,"documentosFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondisponibleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonporcentaje_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsumanFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sumanFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuento_valorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_sin_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_fleteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_fleteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsub_totalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_otroFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonultimo_costoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfinanciamientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonmargen_utilidadFacturaBusqueda.addActionListener(new ButtonActionListener(this,"margen_utilidadFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoniceFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonanticipoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"anticipoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonotros_valoresFacturaBusqueda.addActionListener(new ButtonActionListener(this,"otros_valoresFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_retencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_retencionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_consumo_especialFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_consumo_especialFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonretencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"retencionFacturaBusqueda"));
		//jButtonid_tipo_cambioFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFactura.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtones_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteFacturaBusqueda"));
		//jButtonid_asiento_contableFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFactura.addActionListener(new ButtonActionListener(this,"id_asiento_contableFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_responsableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfechaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_autorizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_documentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_dauFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_dauFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonaforo_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"aforo_referendoFacturaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFactura"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameFactura"));
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFactura"));
		}
		
		this.jTableDatosFactura.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarFactura"));
		
		this.jTableDatosFactura.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarFactura"));
		
		this.jButtonNuevoFactura.addActionListener(new ButtonActionListener(this,"NuevoFactura"));
		
		this.jButtonDuplicarFactura.addActionListener(new ButtonActionListener(this,"DuplicarFactura"));
		
		this.jButtonCopiarFactura.addActionListener(new ButtonActionListener(this,"CopiarFactura"));
		
		this.jButtonVerFormFactura.addActionListener(new ButtonActionListener(this,"VerFormFactura"));
		
		
		this.jButtonNuevoToolBarFactura.addActionListener(new ButtonActionListener(this,"NuevoToolBarFactura"));
			
		this.jButtonDuplicarToolBarFactura.addActionListener(new ButtonActionListener(this,"DuplicarToolBarFactura"));
			
		this.jMenuItemNuevoFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoFactura"));
			
		this.jMenuItemDuplicarFactura.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarFactura"));		
		
		
		this.jButtonNuevoRelacionesFactura.addActionListener (new ButtonActionListener(this,"NuevoRelacionesFactura"));
		
		
		this.jButtonNuevoRelacionesToolBarFactura.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarFactura"));
			
		this.jMenuItemNuevoRelacionesFactura.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesFactura"));		
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonModificarFactura.addActionListener(new ButtonActionListener(this,"ModificarFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonModificarToolBarFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarFactura"));
			
			this.jInternalFrameDetalleFormFactura.jMenuItemModificarFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormFactura.jButtonActualizarFactura.addActionListener (new ButtonActionListener(this,"ActualizarFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonActualizarToolBarFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFactura"));
				
			this.jInternalFrameDetalleFormFactura.jMenuItemActualizarFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonEliminarFactura.addActionListener (new ButtonActionListener(this,"EliminarFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonEliminarToolBarFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarFactura"));
						
			this.jInternalFrameDetalleFormFactura.jMenuItemEliminarFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonCancelarFactura.addActionListener (new ButtonActionListener(this,"CancelarFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonCancelarToolBarFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarFactura"));
			
			this.jInternalFrameDetalleFormFactura.jMenuItemCancelarFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFactura"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarFactura.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarFactura"));		
		
		
		this.jButtonCerrarFactura.addActionListener (new ButtonActionListener(this,"CerrarFactura"));
		
		
		this.jButtonCerrarToolBarFactura.addActionListener (new ButtonActionListener(this,"CerrarToolBarFactura"));
			
		this.jMenuItemCerrarFactura.addActionListener (new ButtonActionListener(this,"MenuItemCerrarFactura"));
			
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jMenuItemDetalleCerrarFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosToolBarFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFactura"));
		}
		
		this.jButtonCopiarToolBarFactura.addActionListener (new ButtonActionListener(this,"CopiarToolBarFactura"));
			
		this.jButtonVerFormToolBarFactura.addActionListener (new ButtonActionListener(this,"VerFormToolBarFactura"));
		
		this.jMenuItemGuardarCambiosFactura.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosFactura"));
			
		this.jMenuItemCopiarFactura.addActionListener (new ButtonActionListener(this,"MenuItemCopiarFactura"));		
		
		this.jMenuItemVerFormFactura.addActionListener (new ButtonActionListener(this,"MenuItemVerFormFactura"));		
		
		
		this.jButtonGuardarCambiosTablaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFactura"));
		
		
		this.jButtonGuardarCambiosTablaToolBarFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarFactura"));
			
		this.jMenuItemGuardarCambiosTablaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFactura"));		
		
		
		
		this.jButtonRecargarInformacionFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionFactura"));
					
		this.jButtonRecargarInformacionToolBarFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarFactura"));
		
		this.jMenuItemRecargarInformacionFactura.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionFactura"));		
		
		
		
		this.jButtonAnterioresFactura.addActionListener (new ButtonActionListener(this,"AnterioresFactura"));
		
		
		this.jButtonAnterioresToolBarFactura.addActionListener (new ButtonActionListener(this,"AnterioresToolBarFactura"));
		
		this.jMenuItemAnterioresFactura.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresFactura"));		
		
		
		this.jButtonSiguientesFactura.addActionListener (new ButtonActionListener(this,"SiguientesFactura"));
		
		
		this.jButtonSiguientesToolBarFactura.addActionListener (new ButtonActionListener(this,"SiguientesToolBarFactura"));
			
		this.jMenuItemSiguientesFactura.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesFactura"));
			
		this.jMenuItemAbrirOrderByFactura.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByFactura"));
			
		this.jMenuItemMostrarOcultarFactura.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarFactura"));
			
		this.jMenuItemDetalleAbrirOrderByFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByFactura"));
			
		this.jMenuItemDetalleMostarOcultarFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarFactura"));		
		
		
		this.jButtonNuevoGuardarCambiosFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosFactura"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarFactura"));
			
		this.jMenuItemNuevoGuardarCambiosFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosFactura"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosFactura"));

		this.jCheckBoxSeleccionadosFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionadosFactura"));
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFactura"));
		}
		
		
		this.jComboBoxTiposRelacionesFactura.addActionListener (new ButtonActionListener(this,"TiposRelacionesFactura"));
			
		this.jComboBoxTiposAccionesFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFactura"));
					
		this.jComboBoxTiposSeleccionarFactura.addActionListener (new ButtonActionListener(this,"TiposSeleccionarFactura"));
			
		this.jTextFieldValorCampoGeneralFactura.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralFactura"));		
		
		
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonidFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_pre_impresoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_pre_impresoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_emisionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_diasFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_vencimientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncotizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionFacturaBusqueda"));
		//jButtonid_empleadoFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFactura.addActionListener(new ButtonActionListener(this,"id_empleadoFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondireccionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"direccionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonrucFacturaBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaBusqueda"));
		//jButtonid_clienteFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFactura.addActionListener(new ButtonActionListener(this,"id_clienteFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontelefonoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaBusqueda"));
		//jButtonid_vendedorFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFactura.addActionListener(new ButtonActionListener(this,"id_vendedorFactura"));
		//jButtonid_vendedorFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transporteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonordenFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ordenFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_inicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_inicioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_finFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_finFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescripcionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncupoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cupoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsaldoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"saldoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondocumentosFacturaBusqueda.addActionListener(new ButtonActionListener(this,"documentosFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondisponibleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonporcentaje_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsumanFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sumanFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuento_valorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_sin_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_fleteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_fleteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsub_totalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_otroFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonultimo_costoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfinanciamientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonmargen_utilidadFacturaBusqueda.addActionListener(new ButtonActionListener(this,"margen_utilidadFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoniceFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonanticipoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"anticipoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonotros_valoresFacturaBusqueda.addActionListener(new ButtonActionListener(this,"otros_valoresFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_retencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_retencionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_consumo_especialFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_consumo_especialFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonretencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"retencionFacturaBusqueda"));
		//jButtonid_tipo_cambioFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFactura.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtones_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteFacturaBusqueda"));
		//jButtonid_asiento_contableFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFactura.addActionListener(new ButtonActionListener(this,"id_asiento_contableFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_responsableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfechaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_autorizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_documentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_dauFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_dauFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonaforo_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"aforo_referendoFacturaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorNumeroPreImpresoFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroPreImpresoFactura"));

			this.jButtonFK_IdClienteFactura.addActionListener(new ButtonActionListener(this,"FK_IdClienteFactura"));

			this.jButtonBuscarFK_IdClienteid_clienteFactura.addActionListener(new ButtonActionListener(this,"id_clienteFactura"));

			this.jButtonFK_IdEstadoFisicoFacturaEmpresaFactura.addActionListener(new ButtonActionListener(this,"FK_IdEstadoFisicoFacturaEmpresaFactura"));

			this.jButtonFK_IdPedidoFactura.addActionListener(new ButtonActionListener(this,"FK_IdPedidoFactura"));

			this.jButtonFK_IdResponsableFactura.addActionListener(new ButtonActionListener(this,"FK_IdResponsableFactura"));

			this.jButtonFK_IdSubClienteFactura.addActionListener(new ButtonActionListener(this,"FK_IdSubClienteFactura"));

			this.jButtonFK_IdTransportistaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaFactura"));

			this.jButtonFK_IdVendedorFactura.addActionListener(new ButtonActionListener(this,"FK_IdVendedorFactura"));

			this.jButtonBuscarFK_IdVendedorid_vendedorFactura.addActionListener(new ButtonActionListener(this,"id_vendedorFactura"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoFactura!=null) {
				this.jInternalFrameReporteDinamicoFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFactura"));
				this.jInternalFrameReporteDinamicoFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFactura"));
				this.jInternalFrameReporteDinamicoFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFactura"));
			}
			
			//this.jButtonCerrarReporteDinamicoFactura.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFactura"));				
			//this.jButtonGenerarReporteDinamicoFactura.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFactura"));
			//this.jButtonGenerarExcelReporteDinamicoFactura.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFactura"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionFactura!=null) {
				this.jInternalFrameImportacionFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFactura"));
				this.jInternalFrameImportacionFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFactura"));
				this.jInternalFrameImportacionFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFactura"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByFactura"));
			
			this.jButtonAbrirOrderByToolBarFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarFactura"));			
			
			if(this.jInternalFrameOrderByFactura!=null) {
				this.jInternalFrameOrderByFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFactura"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFactura.jTabbedPaneRelacionesFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFactura"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameFactura();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormFactura.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormFactura = (JInternalFrameBase)event.getSource();
	            	
	            FacturaBeanSwingJInternalFrame jInternalFrameParent=(FacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormFactura.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarFacturaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosFactura.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosFactura.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosFactura.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoFactura";
		inputMap = this.jButtonNuevoFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesFactura";
		inputMap = this.jButtonNuevoRelacionesFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarFactura";
		inputMap = this.jButtonModificarFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarFactura";
		inputMap = this.jButtonActualizarFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarFactura";
		inputMap = this.jButtonEliminarFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarFactura";
		inputMap = this.jButtonCancelarFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarFactura";
		inputMap = this.jButtonCerrarFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosFactura";
		inputMap = this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormFactura.jButtonGuardarCambiosFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosFactura.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosFacturaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonidFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sucursalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_ejercicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_periodoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_anioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_mesFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_usuarioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_pre_impresoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_pre_impresoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_emisionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_diasFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_vencimientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_monedaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncotizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionFacturaBusqueda"));
		//jButtonid_empleadoFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFactura.addActionListener(new ButtonActionListener(this,"id_empleadoFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_formatoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondireccionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"direccionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonrucFacturaBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaBusqueda"));
		//jButtonid_clienteFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFactura.addActionListener(new ButtonActionListener(this,"id_clienteFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_precioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontelefonoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_sub_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_sub_clienteFacturaBusqueda"));
		//jButtonid_vendedorFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFactura.addActionListener(new ButtonActionListener(this,"id_vendedorFactura"));
		//jButtonid_vendedorFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transporteFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transporteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_transportistaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonordenFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ordenFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_llamadaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_llamadaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_inicioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_inicioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonhora_finFacturaBusqueda.addActionListener(new ButtonActionListener(this,"hora_finFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_facturaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_facturaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescripcionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoncupoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"cupoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsaldoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"saldoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondocumentosFacturaBusqueda.addActionListener(new ButtonActionListener(this,"documentosFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondisponibleFacturaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonporcentaje_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsumanFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sumanFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuento_valorFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_sin_ivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_descuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_fleteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_fleteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonsub_totalFacturaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_otroFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_otroFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonultimo_costoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ultimo_costoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonivaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtondescuentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfinanciamientoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonmargen_utilidadFacturaBusqueda.addActionListener(new ButtonActionListener(this,"margen_utilidadFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtoniceFacturaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonanticipoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"anticipoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonotros_valoresFacturaBusqueda.addActionListener(new ButtonActionListener(this,"otros_valoresFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_retencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_retencionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtontotal_consumo_especialFacturaBusqueda.addActionListener(new ButtonActionListener(this,"total_consumo_especialFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonretencionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"retencionFacturaBusqueda"));
		//jButtonid_tipo_cambioFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFactura.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtones_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteFacturaBusqueda"));
		//jButtonid_asiento_contableFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFactura.addActionListener(new ButtonActionListener(this,"id_asiento_contableFactura"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_pedidoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_pedidoFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_responsableFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_responsableFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonid_estado_fisico_factura_empresaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_fisico_factura_empresaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfechaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_autorizacionFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_clienteFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_documentoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_dauFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_dauFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonnumero_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"numero_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonfecha_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_referendoFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFactura.jButtonaforo_referendoFacturaBusqueda.addActionListener(new ButtonActionListener(this,"aforo_referendoFacturaBusqueda"));
		
		
		this.jButtonBusquedaPorNumeroPreImpresoFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroPreImpresoFactura"));

		this.jButtonFK_IdClienteFactura.addActionListener(new ButtonActionListener(this,"FK_IdClienteFactura"));

		this.jButtonBuscarFK_IdClienteid_clienteFactura.addActionListener(new ButtonActionListener(this,"id_clienteFactura"));

		this.jButtonFK_IdEstadoFisicoFacturaEmpresaFactura.addActionListener(new ButtonActionListener(this,"FK_IdEstadoFisicoFacturaEmpresaFactura"));

		this.jButtonFK_IdPedidoFactura.addActionListener(new ButtonActionListener(this,"FK_IdPedidoFactura"));

		this.jButtonFK_IdResponsableFactura.addActionListener(new ButtonActionListener(this,"FK_IdResponsableFactura"));

		this.jButtonFK_IdSubClienteFactura.addActionListener(new ButtonActionListener(this,"FK_IdSubClienteFactura"));

		this.jButtonFK_IdTransportistaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaFactura"));

		this.jButtonFK_IdVendedorFactura.addActionListener(new ButtonActionListener(this,"FK_IdVendedorFactura"));

		this.jButtonBuscarFK_IdVendedorid_vendedorFactura.addActionListener(new ButtonActionListener(this,"id_vendedorFactura"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarFactura.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosFactura(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Factura facturaAux:this.facturaLogic.getFacturas()) {
					facturaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Factura facturaAux:facturas) {
					facturaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Factura facturaAux:this.facturaLogic.getFacturas()) {
						facturaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Factura facturaAux:facturas) {
						facturaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Factura facturaAux:this.facturaLogic.getFacturas()) {
					
						if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ESCLIENTE)) {
							existe=true;
							facturaAux.setes_cliente(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Factura facturaAux:facturas) {
						
						if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ESCLIENTE)) {
							existe=true;
							facturaAux.setes_cliente(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosFactura.getSelectedRows();
			
			Factura facturaLocal=new Factura();
			
			//this.seleccionarTodosFactura(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLocal =(Factura) this.facturaLogic.getFacturas().toArray()[this.jTableDatosFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					facturaLocal =(Factura) this.facturas.toArray()[this.jTableDatosFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				facturaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Factura facturaAux:this.facturaLogic.getFacturas()) {
						facturaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Factura facturaAux:facturas) {
						facturaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaFactura(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualFacturaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarFacturaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingFactura(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralFactura.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Factura facturaAux:this.facturaLogic.getFacturas()) {
				
						if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							facturaAux.setnumero_pre_impreso(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							facturaAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							facturaAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							facturaAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							facturaAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							facturaAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ORDEN)) {
							existe=true;
							facturaAux.setorden(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAINICIO)) {
							existe=true;
							facturaAux.sethora_inicio(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAFIN)) {
							existe=true;
							facturaAux.sethora_fin(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_CUPO)) {
							existe=true;
							facturaAux.setcupo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SALDO)) {
							existe=true;
							facturaAux.setsaldo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DOCUMENTOS)) {
							existe=true;
							facturaAux.setdocumentos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							facturaAux.setdisponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							facturaAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							facturaAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							facturaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							facturaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							facturaAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALFLETE)) {
							existe=true;
							facturaAux.settotal_flete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							facturaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							facturaAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							facturaAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							facturaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							facturaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							facturaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD)) {
							existe=true;
							facturaAux.setmargen_utilidad(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							facturaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ANTICIPO)) {
							existe=true;
							facturaAux.setanticipo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_OTROSVALORES)) {
							existe=true;
							facturaAux.setotros_valores(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALRETENCION)) {
							existe=true;
							facturaAux.settotal_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL)) {
							existe=true;
							facturaAux.settotal_consumo_especial(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							facturaAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							facturaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							facturaAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							facturaAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							facturaAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODAU)) {
							existe=true;
							facturaAux.setnumero_dau(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO)) {
							existe=true;
							facturaAux.setnumero_referendo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAREFERENDO)) {
							existe=true;
							facturaAux.setfecha_referendo(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_AFOROREFERENDO)) {
							existe=true;
							facturaAux.setaforo_referendo(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Factura facturaAux:facturas) {
					
						if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							facturaAux.setnumero_pre_impreso(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							facturaAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							facturaAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							facturaAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							facturaAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							facturaAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ORDEN)) {
							existe=true;
							facturaAux.setorden(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAINICIO)) {
							existe=true;
							facturaAux.sethora_inicio(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAFIN)) {
							existe=true;
							facturaAux.sethora_fin(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_CUPO)) {
							existe=true;
							facturaAux.setcupo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SALDO)) {
							existe=true;
							facturaAux.setsaldo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DOCUMENTOS)) {
							existe=true;
							facturaAux.setdocumentos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							facturaAux.setdisponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO)) {
							existe=true;
							facturaAux.setporcentaje_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							facturaAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							facturaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							facturaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							facturaAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALFLETE)) {
							existe=true;
							facturaAux.settotal_flete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							facturaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALOTRO)) {
							existe=true;
							facturaAux.settotal_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO)) {
							existe=true;
							facturaAux.setultimo_costo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							facturaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							facturaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							facturaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD)) {
							existe=true;
							facturaAux.setmargen_utilidad(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							facturaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ANTICIPO)) {
							existe=true;
							facturaAux.setanticipo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_OTROSVALORES)) {
							existe=true;
							facturaAux.setotros_valores(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALRETENCION)) {
							existe=true;
							facturaAux.settotal_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL)) {
							existe=true;
							facturaAux.settotal_consumo_especial(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							facturaAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							facturaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							facturaAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							facturaAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							facturaAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODAU)) {
							existe=true;
							facturaAux.setnumero_dau(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO)) {
							existe=true;
							facturaAux.setnumero_referendo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAREFERENDO)) {
							existe=true;
							facturaAux.setfecha_referendo(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_AFOROREFERENDO)) {
							existe=true;
							facturaAux.setaforo_referendo(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesFacturaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioFactura=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesFactura.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteFactura) {				
					conSplash=true;//false;										
					
					//this.startProcessFactura(conSplash);
				
					this.generarReporteFacturasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoFacturasSeleccionados();
				//this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturasSeleccionados(false);
				//this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturasSeleccionados(true);
				//this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFactura();
				
				this.exportarFacturasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionFacturas();
				//this.importarFacturas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFactura();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelFacturasSeleccionados();
				//this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessFactura();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoFactura)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyFactura(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
				}	
			} 			
			else if(FacturaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteFactura) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessFactura(conSplash);
					
						//this.actualizarParametrosGeneralFactura();
						
						this.generarReporteProcesoAccionFacturasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(FacturaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO FacturaS SELECCIONADOS?", "MANTENIMIENTO DE Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessFactura();
				
						this.actualizarParametrosGeneralFactura();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.facturaReturnGeneral=facturaLogic.procesarAccionFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.facturaLogic.getFacturas(),this.facturaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralFactura();
					
					FacturaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFactura.jComboBoxTiposAccionesFormularioFactura.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessFactura(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesFacturaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessFactura();
			
			if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
			Factura factura=new Factura();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesFactura.getSelectedItem();
			
			
			
			
			facturasSeleccionados=this.getFacturasSeleccionados(true);
			//this.sTipoAccion;
			
			if(facturasSeleccionados.size()==1) {
				for(Factura facturaAux:facturasSeleccionados) {
					factura=facturaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Deta Forma Pago")) {
					jButtonDetaFormaPagoActionPerformed(null,rowIndex,true,false,factura);
				}
				else if(this.sTipoRelacion.equals("Detalle Factura")) {
					jButtonDetalleFacturaActionPerformed(null,rowIndex,true,false,factura);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessFactura();
			
      		//this.finishProcessFactura(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarFacturaReturnGeneral() throws Exception {
		if(this.facturaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.facturaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.facturaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.facturaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.facturaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.facturaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingFactura(false);
		}
		
		if(this.facturaReturnGeneral.getConRetornoLista() || this.facturaReturnGeneral.getConRetornoObjeto()) {
			if(this.facturaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaLogic.setFacturas(this.facturaReturnGeneral.getFacturas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.facturaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaLogic.setFactura(this.facturaReturnGeneral.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingFactura(false);
		}
	}
	
	public void actualizarParametrosGeneralFactura() throws Exception {
		
		
	}
	
	public ArrayList<Factura> getFacturasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioFactura) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Factura facturaAux:facturaLogic.getFacturas()) {
					if(facturaAux.getIsSelected()) {
						facturasSeleccionados.add(facturaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Factura facturaAux:this.facturas) {
					if(facturaAux.getIsSelected()) {
						facturasSeleccionados.add(facturaAux);				
					}
				}
			}
			
			if(facturasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						facturasSeleccionados.addAll(this.facturaLogic.getFacturas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						facturasSeleccionados.addAll(this.facturas);				
					}
				}
			}
		} else {
			facturasSeleccionados.add(this.factura);
		}
		
		return facturasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesFacturasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteFacturas("Todos",facturasSeleccionados);
		
	}	
	
	public void generarReporteNormalFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteFacturas("Todos",facturasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionFacturasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteFacturas("Todos",facturasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		
		this.abrirInicializarFrameReporteDinamicoFactura();
		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoFactura();
		
		
		//this.generarReporteFacturas("Todos",facturasSeleccionados ,facturaImplementable,facturaImplementableHome);
	}
	
	public void mostrarImportacionFacturas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionFactura();
		
		this.abrirFrameImportacionFactura();		
		
			
		//this.generarReporteFacturas("Todos",facturasSeleccionados ,facturaImplementable,facturaImplementableHome);
	}
	
	public void importarFacturas() throws Exception {		
	
	}
	
	public void exportarFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelFacturasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoFacturasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlFacturasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarFactura(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Factura facturaAux:facturasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarFactura(facturaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//facturaAux.setsDetalleGeneralEntityReporte(facturaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarFactura(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_NUMERODIAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DIRECCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TELEFONO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDSUBCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ORDEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_HORAINICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_HORAFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTIPOFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_CUPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_SALDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DOCUMENTOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_SUMAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALSINIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALFLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALOTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ULTIMOCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FINANCIAMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_MARGENUTILIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ANTICIPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_OTROSVALORES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALRETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_RETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_ESCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDRESPONSABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_NUMERODAU;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_NUMEROREFERENDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_FECHAREFERENDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaConstantesFunciones.LABEL_AFOROREFERENDO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarFactura(Factura factura,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=factura.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getnumero_pre_impreso();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getnumero_dias().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdireccion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettelefono();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getsubcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getorden();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettipollamada_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gethora_inicio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gethora_fin().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettipofactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getcupo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getsaldo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdocumentos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdisponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getporcentaje_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getsuman().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_sin_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_flete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_otro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getultimo_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfinanciamiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getmargen_utilidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getanticipo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getotros_valores().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_retencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettotal_consumo_especial().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getretencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getes_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getpedido_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getresponsable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getestadofisicofacturaempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha_autorizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getnumero_documento();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getnumero_dau();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getnumero_referendo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getfecha_referendo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=factura.getaforo_referendo();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Facturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelFactura(row);				
				iRow++;
			}				
			
			for(Factura facturaAux:facturasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelFactura(facturaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlFacturasSeleccionados() throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();		
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"factura.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("facturas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("factura");
			//elementRoot.appendChild(element);
		
			for(Factura facturaAux:facturasSeleccionados) {
				element = document.createElement("factura");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlFactura(facturaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelFactura(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODIAS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DIRECCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TELEFONO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDSUBCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ORDEN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAINICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_HORAFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_CUPO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_SALDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DOCUMENTOS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_PORCENTAJEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_SUMAN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALSINIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALFLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALOTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ULTIMOCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FINANCIAMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_MARGENUTILIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ANTICIPO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_OTROSVALORES);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALRETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_TOTALCONSUMOESPECIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_RETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_ESCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDRESPONSABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMERODAU);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_FECHAREFERENDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaConstantesFunciones.LABEL_AFOROREFERENDO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelFactura(Factura factura,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getnumero_pre_impreso());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getnumero_dias());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdireccion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettelefono());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getsubcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getorden());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettipollamada_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gethora_inicio());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gethora_fin());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettipofactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getcupo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getsaldo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdocumentos());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdisponible());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getporcentaje_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getsuman());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_sin_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_flete());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_otro());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getultimo_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfinanciamiento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getmargen_utilidad());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getanticipo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getotros_valores());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettotal_consumo_especial());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getretencion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getes_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getpedido_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getresponsable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getestadofisicofacturaempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha_autorizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getnumero_documento());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getnumero_dau());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getnumero_referendo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getfecha_referendo());
		cell = row.createCell(iColumn++);cell.setCellValue(factura.getaforo_referendo());				
	}
	
	public void setFilaDatosExportarXmlFactura(Factura factura,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(FacturaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(factura.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(FacturaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(factura.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(FacturaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(factura.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(FacturaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(factura.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(FacturaConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(factura.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(FacturaConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(factura.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(FacturaConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(factura.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(FacturaConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(factura.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementusuario_descripcion = document.createElement(FacturaConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(factura.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementnumero_pre_impreso = document.createElement(FacturaConstantesFunciones.NUMEROPREIMPRESO);
		elementnumero_pre_impreso.appendChild(document.createTextNode(factura.getnumero_pre_impreso().trim()));
		element.appendChild(elementnumero_pre_impreso);

		Element elementfecha_emision = document.createElement(FacturaConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(factura.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementnumero_dias = document.createElement(FacturaConstantesFunciones.NUMERODIAS);
		elementnumero_dias.appendChild(document.createTextNode(factura.getnumero_dias().toString().trim()));
		element.appendChild(elementnumero_dias);

		Element elementfecha_vencimiento = document.createElement(FacturaConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(factura.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementmoneda_descripcion = document.createElement(FacturaConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(factura.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementcotizacion = document.createElement(FacturaConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(factura.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementempleado_descripcion = document.createElement(FacturaConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(factura.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementformato_descripcion = document.createElement(FacturaConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(factura.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementdireccion = document.createElement(FacturaConstantesFunciones.DIRECCION);
		elementdireccion.appendChild(document.createTextNode(factura.getdireccion().trim()));
		element.appendChild(elementdireccion);

		Element elementruc = document.createElement(FacturaConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(factura.getruc().trim()));
		element.appendChild(elementruc);

		Element elementcliente_descripcion = document.createElement(FacturaConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(factura.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(FacturaConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(factura.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementtelefono = document.createElement(FacturaConstantesFunciones.TELEFONO);
		elementtelefono.appendChild(document.createTextNode(factura.gettelefono().trim()));
		element.appendChild(elementtelefono);

		Element elementsubcliente_descripcion = document.createElement(FacturaConstantesFunciones.IDSUBCLIENTE);
		elementsubcliente_descripcion.appendChild(document.createTextNode(factura.getsubcliente_descripcion()));
		element.appendChild(elementsubcliente_descripcion);

		Element elementvendedor_descripcion = document.createElement(FacturaConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(factura.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementtransporte_descripcion = document.createElement(FacturaConstantesFunciones.IDTRANSPORTE);
		elementtransporte_descripcion.appendChild(document.createTextNode(factura.gettransporte_descripcion()));
		element.appendChild(elementtransporte_descripcion);

		Element elementtransportista_descripcion = document.createElement(FacturaConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(factura.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementorden = document.createElement(FacturaConstantesFunciones.ORDEN);
		elementorden.appendChild(document.createTextNode(factura.getorden().trim()));
		element.appendChild(elementorden);

		Element elementtipollamada_descripcion = document.createElement(FacturaConstantesFunciones.IDTIPOLLAMADA);
		elementtipollamada_descripcion.appendChild(document.createTextNode(factura.gettipollamada_descripcion()));
		element.appendChild(elementtipollamada_descripcion);

		Element elementhora_inicio = document.createElement(FacturaConstantesFunciones.HORAINICIO);
		elementhora_inicio.appendChild(document.createTextNode(factura.gethora_inicio().toString().trim()));
		element.appendChild(elementhora_inicio);

		Element elementhora_fin = document.createElement(FacturaConstantesFunciones.HORAFIN);
		elementhora_fin.appendChild(document.createTextNode(factura.gethora_fin().toString().trim()));
		element.appendChild(elementhora_fin);

		Element elementtipofactura_descripcion = document.createElement(FacturaConstantesFunciones.IDTIPOFACTURA);
		elementtipofactura_descripcion.appendChild(document.createTextNode(factura.gettipofactura_descripcion()));
		element.appendChild(elementtipofactura_descripcion);

		Element elementdescripcion = document.createElement(FacturaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(factura.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcupo = document.createElement(FacturaConstantesFunciones.CUPO);
		elementcupo.appendChild(document.createTextNode(factura.getcupo().toString().trim()));
		element.appendChild(elementcupo);

		Element elementsaldo = document.createElement(FacturaConstantesFunciones.SALDO);
		elementsaldo.appendChild(document.createTextNode(factura.getsaldo().toString().trim()));
		element.appendChild(elementsaldo);

		Element elementdocumentos = document.createElement(FacturaConstantesFunciones.DOCUMENTOS);
		elementdocumentos.appendChild(document.createTextNode(factura.getdocumentos().toString().trim()));
		element.appendChild(elementdocumentos);

		Element elementdisponible = document.createElement(FacturaConstantesFunciones.DISPONIBLE);
		elementdisponible.appendChild(document.createTextNode(factura.getdisponible().toString().trim()));
		element.appendChild(elementdisponible);

		Element elementporcentaje_descuento = document.createElement(FacturaConstantesFunciones.PORCENTAJEDESCUENTO);
		elementporcentaje_descuento.appendChild(document.createTextNode(factura.getporcentaje_descuento().toString().trim()));
		element.appendChild(elementporcentaje_descuento);

		Element elementtotal_iva = document.createElement(FacturaConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(factura.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementsuman = document.createElement(FacturaConstantesFunciones.SUMAN);
		elementsuman.appendChild(document.createTextNode(factura.getsuman().toString().trim()));
		element.appendChild(elementsuman);

		Element elementdescuento_valor = document.createElement(FacturaConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(factura.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementtotal_sin_iva = document.createElement(FacturaConstantesFunciones.TOTALSINIVA);
		elementtotal_sin_iva.appendChild(document.createTextNode(factura.gettotal_sin_iva().toString().trim()));
		element.appendChild(elementtotal_sin_iva);

		Element elementtotal_descuento = document.createElement(FacturaConstantesFunciones.TOTALDESCUENTO);
		elementtotal_descuento.appendChild(document.createTextNode(factura.gettotal_descuento().toString().trim()));
		element.appendChild(elementtotal_descuento);

		Element elementtotal_flete = document.createElement(FacturaConstantesFunciones.TOTALFLETE);
		elementtotal_flete.appendChild(document.createTextNode(factura.gettotal_flete().toString().trim()));
		element.appendChild(elementtotal_flete);

		Element elementtotal = document.createElement(FacturaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(factura.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementsub_total = document.createElement(FacturaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(factura.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal_otro = document.createElement(FacturaConstantesFunciones.TOTALOTRO);
		elementtotal_otro.appendChild(document.createTextNode(factura.gettotal_otro().toString().trim()));
		element.appendChild(elementtotal_otro);

		Element elementultimo_costo = document.createElement(FacturaConstantesFunciones.ULTIMOCOSTO);
		elementultimo_costo.appendChild(document.createTextNode(factura.getultimo_costo().toString().trim()));
		element.appendChild(elementultimo_costo);

		Element elementiva = document.createElement(FacturaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(factura.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementdescuento = document.createElement(FacturaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(factura.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementfinanciamiento = document.createElement(FacturaConstantesFunciones.FINANCIAMIENTO);
		elementfinanciamiento.appendChild(document.createTextNode(factura.getfinanciamiento().toString().trim()));
		element.appendChild(elementfinanciamiento);

		Element elementmargen_utilidad = document.createElement(FacturaConstantesFunciones.MARGENUTILIDAD);
		elementmargen_utilidad.appendChild(document.createTextNode(factura.getmargen_utilidad().toString().trim()));
		element.appendChild(elementmargen_utilidad);

		Element elementice = document.createElement(FacturaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(factura.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementanticipo = document.createElement(FacturaConstantesFunciones.ANTICIPO);
		elementanticipo.appendChild(document.createTextNode(factura.getanticipo().toString().trim()));
		element.appendChild(elementanticipo);

		Element elementotros_valores = document.createElement(FacturaConstantesFunciones.OTROSVALORES);
		elementotros_valores.appendChild(document.createTextNode(factura.getotros_valores().toString().trim()));
		element.appendChild(elementotros_valores);

		Element elementtotal_retencion = document.createElement(FacturaConstantesFunciones.TOTALRETENCION);
		elementtotal_retencion.appendChild(document.createTextNode(factura.gettotal_retencion().toString().trim()));
		element.appendChild(elementtotal_retencion);

		Element elementtotal_consumo_especial = document.createElement(FacturaConstantesFunciones.TOTALCONSUMOESPECIAL);
		elementtotal_consumo_especial.appendChild(document.createTextNode(factura.gettotal_consumo_especial().toString().trim()));
		element.appendChild(elementtotal_consumo_especial);

		Element elementretencion = document.createElement(FacturaConstantesFunciones.RETENCION);
		elementretencion.appendChild(document.createTextNode(factura.getretencion().toString().trim()));
		element.appendChild(elementretencion);

		Element elementtipocambio_descripcion = document.createElement(FacturaConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(factura.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementes_cliente = document.createElement(FacturaConstantesFunciones.ESCLIENTE);
		elementes_cliente.appendChild(document.createTextNode(factura.getes_cliente().toString().trim()));
		element.appendChild(elementes_cliente);

		Element elementasientocontable_descripcion = document.createElement(FacturaConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(factura.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementpedido_descripcion = document.createElement(FacturaConstantesFunciones.IDPEDIDO);
		elementpedido_descripcion.appendChild(document.createTextNode(factura.getpedido_descripcion()));
		element.appendChild(elementpedido_descripcion);

		Element elementresponsable_descripcion = document.createElement(FacturaConstantesFunciones.IDRESPONSABLE);
		elementresponsable_descripcion.appendChild(document.createTextNode(factura.getresponsable_descripcion()));
		element.appendChild(elementresponsable_descripcion);

		Element elementestadofisicofacturaempresa_descripcion = document.createElement(FacturaConstantesFunciones.IDESTADOFISICOFACTURAEMPRESA);
		elementestadofisicofacturaempresa_descripcion.appendChild(document.createTextNode(factura.getestadofisicofacturaempresa_descripcion()));
		element.appendChild(elementestadofisicofacturaempresa_descripcion);

		Element elementfecha = document.createElement(FacturaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(factura.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementfecha_autorizacion = document.createElement(FacturaConstantesFunciones.FECHAAUTORIZACION);
		elementfecha_autorizacion.appendChild(document.createTextNode(factura.getfecha_autorizacion().toString().trim()));
		element.appendChild(elementfecha_autorizacion);

		Element elementfecha_cliente = document.createElement(FacturaConstantesFunciones.FECHACLIENTE);
		elementfecha_cliente.appendChild(document.createTextNode(factura.getfecha_cliente().toString().trim()));
		element.appendChild(elementfecha_cliente);

		Element elementnumero_documento = document.createElement(FacturaConstantesFunciones.NUMERODOCUMENTO);
		elementnumero_documento.appendChild(document.createTextNode(factura.getnumero_documento().trim()));
		element.appendChild(elementnumero_documento);

		Element elementnumero_dau = document.createElement(FacturaConstantesFunciones.NUMERODAU);
		elementnumero_dau.appendChild(document.createTextNode(factura.getnumero_dau().trim()));
		element.appendChild(elementnumero_dau);

		Element elementnumero_referendo = document.createElement(FacturaConstantesFunciones.NUMEROREFERENDO);
		elementnumero_referendo.appendChild(document.createTextNode(factura.getnumero_referendo().trim()));
		element.appendChild(elementnumero_referendo);

		Element elementfecha_referendo = document.createElement(FacturaConstantesFunciones.FECHAREFERENDO);
		elementfecha_referendo.appendChild(document.createTextNode(factura.getfecha_referendo().toString().trim()));
		element.appendChild(elementfecha_referendo);

		Element elementaforo_referendo = document.createElement(FacturaConstantesFunciones.AFOROREFERENDO);
		elementaforo_referendo.appendChild(document.createTextNode(factura.getaforo_referendo().trim()));
		element.appendChild(elementaforo_referendo);
	}
	
	public void generarReporteGroupGenericoFacturasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Factura> facturasSeleccionados=new ArrayList<Factura>();
		
		facturasSeleccionados=this.getFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoFactura(facturasSeleccionados);
		
		this.generarReporteFacturas("Todos",facturasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoFactura(ArrayList<Factura> facturasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Factura facturaAux:facturasSeleccionados) {
				facturaAux.setsDetalleGeneralEntityReporte(facturaAux.toString());
			
				if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getnumero_pre_impreso());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODIAS)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getnumero_dias().toString());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DIRECCION)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getdireccion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_RUC)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_TELEFONO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettelefono());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDSUBCLIENTE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getsubcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTRANSPORTE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ORDEN)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getorden());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTIPOLLAMADA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettipollamada_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAINICIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gethora_inicio().toString());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_HORAFIN)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gethora_fin().toString());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTIPOFACTURA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettipofactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_ESCLIENTE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaAux.getes_cliente()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDPEDIDO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getpedido_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDRESPONSABLE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getresponsable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_IDESTADOFISICOFACTURAEMPRESA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getestadofisicofacturaempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha_autorizacion()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHACLIENTE)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha_cliente()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getnumero_documento());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMERODAU)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getnumero_dau());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_NUMEROREFERENDO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getnumero_referendo());
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_FECHAREFERENDO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaAux.getfecha_referendo()));
				}
				 else if(sTipoSeleccionar.equals(FacturaConstantesFunciones.LABEL_AFOROREFERENDO)) {
					existe=true;
					facturaAux.setsDescripcionGeneralEntityReporte1(facturaAux.getaforo_referendo());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesFactura(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoFactura=true;
				this.isVisibilidadCeldaNuevoRelacionesFactura=true;
				this.isVisibilidadCeldaGuardarCambiosFactura=true;
			}
			
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=true;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=true;
			this.isVisibilidadCeldaEliminarFactura=true;
			this.isVisibilidadCeldaCancelarFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=true;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesFactura=true;
			this.isVisibilidadCeldaGuardarCambiosFactura=true;
			this.isVisibilidadCeldaModificarFactura=false;
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
			this.isVisibilidadCeldaModificarFactura=true;
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
			this.isVisibilidadCeldaCancelarFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarFactura=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(FacturaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesFactura=true;
			this.isVisibilidadCeldaGuardarCambiosFactura=true;
		} else {
			this.actualizarEstadoPanelsFactura(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarFactura=false;
			//this.isVisibilidadCeldaVerFormFactura=false;
			this.isVisibilidadCeldaDuplicarFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!facturaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
		} else {
			this.isVisibilidadCeldaNuevoFactura=false;
			this.isVisibilidadCeldaGuardarCambiosFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(facturaSessionBean.getEsGuardarRelacionado()) {
			if(!facturaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesFactura=false;												
			}
			
			this.jButtonCerrarFactura.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesFactura=false;
		}
		
		if(!this.permiteMantenimiento(this.factura)) {
			this.isVisibilidadCeldaActualizarFactura=false;
			this.isVisibilidadCeldaEliminarFactura=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesFactura() {
		this.isVisibilidadCeldaNuevoFactura=false;
		this.isVisibilidadCeldaGuardarCambiosFactura=false;
	}
	
	public void actualizarEstadoPanelsFactura(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionFactura!=null) {
				this.jScrollPanelDatosEdicionFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFactura!=null) {
				this.jScrollPanelDatosFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionFactura!=null) {
				this.jPanelPaginacionFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.facturaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasFactura!=null) {
					this.jTabbedPaneBusquedasFactura.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.facturaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFactura!=null) {
				this.jTabbedPaneBusquedasFactura.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesFactura!=null) {
				this.jPanelParametrosReportesFactura.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaMesNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaMesNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoPrecioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaSubCliente(Boolean isParaSubCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSubClienteNegation=!isParaSubCliente;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaSubClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaSubCliente;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaSubClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransporte(Boolean isParaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransporteNegation=!isParaTransporte;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTransporteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTransportistaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTransportista;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoLlamada(Boolean isParaTipoLlamada){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoLlamadaNegation=!isParaTipoLlamada;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTipoLlamadaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoFactura(Boolean isParaTipoFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoFacturaNegation=!isParaTipoFactura;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoFacturaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTipoFacturaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoCambioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaPedido(Boolean isParaPedido){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPedidoNegation=!isParaPedido;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaPedidoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaPedido;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaPedidoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaResponsable(Boolean isParaResponsable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaResponsableNegation=!isParaResponsable;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaResponsableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaResponsable;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoFisicoFacturaEmpresa(Boolean isParaEstadoFisicoFacturaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoFisicoFacturaEmpresaNegation=!isParaEstadoFisicoFacturaEmpresa;

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasFactura.remove(jPanelBusquedaPorNumeroPreImpresoFactura);}

			this.isVisibilidadFK_IdCliente=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdClienteFactura);}

			this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa=isParaEstadoFisicoFacturaEmpresa;
			if(!this.isVisibilidadFK_IdEstadoFisicoFacturaEmpresa) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);}

			this.isVisibilidadFK_IdPedido=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPedido) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdPedidoFactura);}

			this.isVisibilidadFK_IdResponsable=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdResponsableFactura);}

			this.isVisibilidadFK_IdSubCliente=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSubCliente) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdSubClienteFactura);}

			this.isVisibilidadFK_IdTransportista=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdTransportistaFactura);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoFisicoFacturaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFactura.remove(jPanelFK_IdVendedorFactura);}
		}
		
	}
	
	

	public String registrarSesionFacturaParaDetaFormaPagos() throws Exception {
		Boolean isPaginaPopupDetaFormaPago=false;

		try {

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean==null) {
				this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean=new DetaFormaPagoSessionBean();
			}

			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetaFormaPagoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetaFormaPago=this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetaFormaPago(true);
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetaFormaPago(FacturaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setlidFacturaActual(this.idFacturaActual);
			this.jInternalFrameDetalleFormFactura.detaformapagoSessionBean.setNoMantenimiento(true);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionFacturaParaDetalleFacturas() throws Exception {
		Boolean isPaginaPopupDetalleFactura=false;

		try {

			if(this.facturaSessionBean==null) {
				this.facturaSessionBean=new FacturaSessionBean();
			}

			if(this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean==null) {
				this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean=new DetalleFacturaSessionBean();
			}

			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleFacturaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleFactura=this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleFactura(true);
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleFactura(FacturaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setlidFacturaActual(this.idFacturaActual);
			this.jInternalFrameDetalleFormFactura.detallefacturaSessionBean.setNoMantenimiento(true);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionFacturaParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.facturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(FacturaConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			//empleadoSessionBean.setlidFacturaActual(this.idFacturaActual);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.facturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(FacturaConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			//clienteSessionBean.setlidFacturaActual(this.idFacturaActual);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaParaBusquedaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			vendedorSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			vendedorSessionBean.setisPermiteRecargarInformacion(false);
			vendedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupVendedor=vendedorSessionBean.getisPaginaPopup();
			vendedorSessionBean.setisPaginaPopup(false);
			vendedorSessionBean.setEstaModoBusqueda(true);
			vendedorSessionBean.setsFuncionBusquedaRapida("window.opener.facturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_vendedor(TO_REPLACE);");
			vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(FacturaConstantesFunciones.SNOMBREOPCION);
			//vendedorSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			//vendedorSessionBean.setlidFacturaActual(this.idFacturaActual);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.facturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(FacturaConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			//tipocambioSessionBean.setlidFacturaActual(this.idFacturaActual);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(facturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.facturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(FacturaConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionFactura(true);
			//asientocontableSessionBean.setlidFacturaActual(this.idFacturaActual);

			facturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFactura(true);
			facturaSessionBean.setlIdFacturaActualForeignKey(this.idFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//FacturaSessionBean facturaSessionBean=new FacturaSessionBean();
		
		if(this.facturaSessionBean==null) {
			this.facturaSessionBean=new FacturaSessionBean();
		}
		
		this.facturaSessionBean.setsUltimaBusquedaFactura(this.getsAccionBusqueda());
		this.facturaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.facturaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroPreImpreso")) {
			facturaSessionBean.setnumero_pre_impreso(this.getnumero_pre_impresoBusquedaPorNumeroPreImpreso());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			facturaSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			facturaSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			facturaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoFisicoFacturaEmpresa")) {
			facturaSessionBean.setid_estado_fisico_factura_empresa(this.getid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPedido")) {
			facturaSessionBean.setid_pedido(this.getid_pedidoFK_IdPedido());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			facturaSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdResponsable")) {
			facturaSessionBean.setid_responsable(this.getid_responsableFK_IdResponsable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSubCliente")) {
			facturaSessionBean.setid_sub_cliente(this.getid_sub_clienteFK_IdSubCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			facturaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
			facturaSessionBean.setid_transportista(this.getid_transportistaFK_IdTransportista());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			facturaSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			facturaSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//FacturaSessionBean facturaSessionBean=new FacturaSessionBean();
		
		if(this.facturaSessionBean==null) {
			this.facturaSessionBean=new FacturaSessionBean();
		}
		
		if(this.facturaSessionBean.getsUltimaBusquedaFactura()!=null&&!this.facturaSessionBean.getsUltimaBusquedaFactura().equals("")) {
			this.setsAccionBusqueda(facturaSessionBean.getsUltimaBusquedaFactura());
			this.setiNumeroPaginacion(facturaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(facturaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroPreImpreso")) {
				this.setnumero_pre_impresoBusquedaPorNumeroPreImpreso(facturaSessionBean.getnumero_pre_impreso());
				facturaSessionBean.setnumero_pre_impreso("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(facturaSessionBean.getid_cliente());
				facturaSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(facturaSessionBean.getid_ejercicio());
				facturaSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(facturaSessionBean.getid_empresa());
				facturaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoFisicoFacturaEmpresa")) {
				this.setid_estado_fisico_factura_empresaFK_IdEstadoFisicoFacturaEmpresa(facturaSessionBean.getid_estado_fisico_factura_empresa());
				facturaSessionBean.setid_estado_fisico_factura_empresa(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPedido")) {
				this.setid_pedidoFK_IdPedido(facturaSessionBean.getid_pedido());
				facturaSessionBean.setid_pedido(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(facturaSessionBean.getid_periodo());
				facturaSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdResponsable")) {
				this.setid_responsableFK_IdResponsable(facturaSessionBean.getid_responsable());
				facturaSessionBean.setid_responsable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSubCliente")) {
				this.setid_sub_clienteFK_IdSubCliente(facturaSessionBean.getid_sub_cliente());
				facturaSessionBean.setid_sub_cliente(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(facturaSessionBean.getid_sucursal());
				facturaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
				this.setid_transportistaFK_IdTransportista(facturaSessionBean.getid_transportista());
				facturaSessionBean.setid_transportista(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(facturaSessionBean.getid_usuario());
				facturaSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(facturaSessionBean.getid_vendedor());
				facturaSessionBean.setid_vendedor(-1L);
			}
		}
		
		this.facturaSessionBean.setsUltimaBusquedaFactura("");
		this.facturaSessionBean.setiNumeroPaginacion(FacturaConstantesFunciones.INUMEROPAGINACION);
		this.facturaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaFactura(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioFactura() {
		this.updateBorderResaltarBusquedasFormularioFactura();
		this.updateVisibilidadBusquedasFormularioFactura();
		this.updateHabilitarBusquedasFormularioFactura();
	}
	
	public void updateBorderResaltarBusquedasFormularioFactura() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasFactura.getComponents().length>0) {
	

		if(this.facturaConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdClienteFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdClienteFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdClienteFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdEstadoFisicoFacturaEmpresaFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdEstadoFisicoFacturaEmpresaFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdPedidoFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdPedidoFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdPedidoFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdResponsableFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdResponsableFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdResponsableFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdSubClienteFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdSubClienteFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdSubClienteFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdTransportistaFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdTransportistaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdTransportistaFactura);
			}
		}

		if(this.facturaConstantesFunciones.resaltarFK_IdVendedorFactura!=null) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdVendedorFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdVendedorFactura);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioFactura() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarBusquedaPorNumeroPreImpresoFactura);
			if(!this.facturaConstantesFunciones.mostrarBusquedaPorNumeroPreImpresoFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdClienteFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdClienteFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdClienteFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdEstadoFisicoFacturaEmpresaFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdEstadoFisicoFacturaEmpresaFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdPedidoFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdPedidoFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdPedidoFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdResponsableFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdResponsableFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdResponsableFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdSubClienteFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdSubClienteFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdSubClienteFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdTransportistaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdTransportistaFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdTransportistaFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdVendedorFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaConstantesFunciones.mostrarFK_IdVendedorFactura);
			if(!this.facturaConstantesFunciones.mostrarFK_IdVendedorFactura && index>-1) {
				this.jTabbedPaneBusquedasFactura.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioFactura() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarBusquedaPorNumeroPreImpresoFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarBusquedaPorNumeroPreImpresoFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdClienteFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdClienteFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdClienteFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdEstadoFisicoFacturaEmpresaFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdEstadoFisicoFacturaEmpresaFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdPedidoFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdPedidoFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdPedidoFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdResponsableFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdResponsableFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdResponsableFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdSubClienteFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdSubClienteFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdSubClienteFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdTransportistaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdTransportistaFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdTransportistaFactura);
			}

			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdVendedorFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaConstantesFunciones.activarFK_IdVendedorFactura);
				this.jTabbedPaneBusquedasFactura.setEnabledAt(index,this.facturaConstantesFunciones.activarFK_IdVendedorFactura);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaFactura(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorNumeroPreImpreso")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarBusquedaPorNumeroPreImpresoFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdClienteFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdClienteFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdClienteFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoFisicoFacturaEmpresa")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdEstadoFisicoFacturaEmpresaFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdEstadoFisicoFacturaEmpresaFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdEstadoFisicoFacturaEmpresaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPedido")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdPedidoFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdPedidoFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdPedidoFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdResponsable")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdResponsableFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdResponsableFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdResponsableFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdSubCliente")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdSubClienteFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdSubClienteFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdSubClienteFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransportista")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdTransportistaFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdTransportistaFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdTransportistaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasFactura.indexOfComponent(this.jPanelFK_IdVendedorFactura);

			this.jTabbedPaneBusquedasFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFactura.getComponent(index);

			this.facturaConstantesFunciones.setResaltarFK_IdVendedorFactura(resaltar);

			jPanel.setBorder(this.facturaConstantesFunciones.resaltarFK_IdVendedorFactura);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarFactura.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioFactura() throws Exception {

		if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioFactura();
		this.updateVisibilidadResaltarControlesFormularioFactura();
		this.updateHabilitarResaltarControlesFormularioFactura();
		
	}
	
	public void updateBorderResaltarControlesFormularioFactura() throws Exception {
		if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.facturaConstantesFunciones.resaltaridFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jLabelidFactura.setBorder(this.facturaConstantesFunciones.resaltaridFactura);}
		if(this.facturaConstantesFunciones.resaltarid_empresaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_empresaFactura);}
		if(this.facturaConstantesFunciones.resaltarid_sucursalFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setBorder(this.facturaConstantesFunciones.resaltarid_sucursalFactura);}
		if(this.facturaConstantesFunciones.resaltarid_ejercicioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setBorder(this.facturaConstantesFunciones.resaltarid_ejercicioFactura);}
		if(this.facturaConstantesFunciones.resaltarid_periodoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setBorder(this.facturaConstantesFunciones.resaltarid_periodoFactura);}
		if(this.facturaConstantesFunciones.resaltarid_anioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setBorder(this.facturaConstantesFunciones.resaltarid_anioFactura);}
		if(this.facturaConstantesFunciones.resaltarid_mesFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setBorder(this.facturaConstantesFunciones.resaltarid_mesFactura);}
		if(this.facturaConstantesFunciones.resaltarid_usuarioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setBorder(this.facturaConstantesFunciones.resaltarid_usuarioFactura);}
		if(this.facturaConstantesFunciones.resaltarnumero_pre_impresoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setBorder(this.facturaConstantesFunciones.resaltarnumero_pre_impresoFactura);}
		if(this.facturaConstantesFunciones.resaltarfecha_emisionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setBorder(this.facturaConstantesFunciones.resaltarfecha_emisionFactura);}
		if(this.facturaConstantesFunciones.resaltarnumero_diasFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setBorder(this.facturaConstantesFunciones.resaltarnumero_diasFactura);}
		if(this.facturaConstantesFunciones.resaltarfecha_vencimientoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setBorder(this.facturaConstantesFunciones.resaltarfecha_vencimientoFactura);}
		if(this.facturaConstantesFunciones.resaltarid_monedaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_monedaFactura);}
		if(this.facturaConstantesFunciones.resaltarcotizacionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setBorder(this.facturaConstantesFunciones.resaltarcotizacionFactura);}
		if(this.facturaConstantesFunciones.resaltarid_empleadoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setBorder(this.facturaConstantesFunciones.resaltarid_empleadoFactura);}
		if(this.facturaConstantesFunciones.resaltarid_formatoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setBorder(this.facturaConstantesFunciones.resaltarid_formatoFactura);}
		if(this.facturaConstantesFunciones.resaltardireccionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setBorder(this.facturaConstantesFunciones.resaltardireccionFactura);}
		if(this.facturaConstantesFunciones.resaltarrucFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setBorder(this.facturaConstantesFunciones.resaltarrucFactura);}
		if(this.facturaConstantesFunciones.resaltarid_clienteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setBorder(this.facturaConstantesFunciones.resaltarid_clienteFactura);}
		if(this.facturaConstantesFunciones.resaltarid_tipo_precioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setBorder(this.facturaConstantesFunciones.resaltarid_tipo_precioFactura);}
		if(this.facturaConstantesFunciones.resaltartelefonoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setBorder(this.facturaConstantesFunciones.resaltartelefonoFactura);}
		if(this.facturaConstantesFunciones.resaltarid_sub_clienteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setBorder(this.facturaConstantesFunciones.resaltarid_sub_clienteFactura);}
		if(this.facturaConstantesFunciones.resaltarid_vendedorFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setBorder(this.facturaConstantesFunciones.resaltarid_vendedorFactura);}
		if(this.facturaConstantesFunciones.resaltarid_transporteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setBorder(this.facturaConstantesFunciones.resaltarid_transporteFactura);}
		if(this.facturaConstantesFunciones.resaltarid_transportistaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_transportistaFactura);}
		if(this.facturaConstantesFunciones.resaltarordenFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setBorder(this.facturaConstantesFunciones.resaltarordenFactura);}
		if(this.facturaConstantesFunciones.resaltarid_tipo_llamadaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_tipo_llamadaFactura);}
		if(this.facturaConstantesFunciones.resaltarhora_inicioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setBorder(this.facturaConstantesFunciones.resaltarhora_inicioFactura);}
		if(this.facturaConstantesFunciones.resaltarhora_finFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setBorder(this.facturaConstantesFunciones.resaltarhora_finFactura);}
		if(this.facturaConstantesFunciones.resaltarid_tipo_facturaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_tipo_facturaFactura);}
		if(this.facturaConstantesFunciones.resaltardescripcionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setBorder(this.facturaConstantesFunciones.resaltardescripcionFactura);}
		if(this.facturaConstantesFunciones.resaltarcupoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setBorder(this.facturaConstantesFunciones.resaltarcupoFactura);}
		if(this.facturaConstantesFunciones.resaltarsaldoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setBorder(this.facturaConstantesFunciones.resaltarsaldoFactura);}
		if(this.facturaConstantesFunciones.resaltardocumentosFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setBorder(this.facturaConstantesFunciones.resaltardocumentosFactura);}
		if(this.facturaConstantesFunciones.resaltardisponibleFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setBorder(this.facturaConstantesFunciones.resaltardisponibleFactura);}
		if(this.facturaConstantesFunciones.resaltarporcentaje_descuentoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setBorder(this.facturaConstantesFunciones.resaltarporcentaje_descuentoFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_ivaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_ivaFactura);}
		if(this.facturaConstantesFunciones.resaltarsumanFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setBorder(this.facturaConstantesFunciones.resaltarsumanFactura);}
		if(this.facturaConstantesFunciones.resaltardescuento_valorFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setBorder(this.facturaConstantesFunciones.resaltardescuento_valorFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_sin_ivaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_sin_ivaFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_descuentoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_descuentoFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_fleteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_fleteFactura);}
		if(this.facturaConstantesFunciones.resaltartotalFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setBorder(this.facturaConstantesFunciones.resaltartotalFactura);}
		if(this.facturaConstantesFunciones.resaltarsub_totalFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setBorder(this.facturaConstantesFunciones.resaltarsub_totalFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_otroFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_otroFactura);}
		if(this.facturaConstantesFunciones.resaltarultimo_costoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setBorder(this.facturaConstantesFunciones.resaltarultimo_costoFactura);}
		if(this.facturaConstantesFunciones.resaltarivaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setBorder(this.facturaConstantesFunciones.resaltarivaFactura);}
		if(this.facturaConstantesFunciones.resaltardescuentoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setBorder(this.facturaConstantesFunciones.resaltardescuentoFactura);}
		if(this.facturaConstantesFunciones.resaltarfinanciamientoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setBorder(this.facturaConstantesFunciones.resaltarfinanciamientoFactura);}
		if(this.facturaConstantesFunciones.resaltarmargen_utilidadFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setBorder(this.facturaConstantesFunciones.resaltarmargen_utilidadFactura);}
		if(this.facturaConstantesFunciones.resaltariceFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setBorder(this.facturaConstantesFunciones.resaltariceFactura);}
		if(this.facturaConstantesFunciones.resaltaranticipoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setBorder(this.facturaConstantesFunciones.resaltaranticipoFactura);}
		if(this.facturaConstantesFunciones.resaltarotros_valoresFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setBorder(this.facturaConstantesFunciones.resaltarotros_valoresFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_retencionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_retencionFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_retencionFactura);}
		if(this.facturaConstantesFunciones.resaltartotal_consumo_especialFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldtotal_consumo_especialFactura.setBorder(this.facturaConstantesFunciones.resaltartotal_consumo_especialFactura);}
		if(this.facturaConstantesFunciones.resaltarretencionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldretencionFactura.setBorder(this.facturaConstantesFunciones.resaltarretencionFactura);}
		if(this.facturaConstantesFunciones.resaltarid_tipo_cambioFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setBorder(this.facturaConstantesFunciones.resaltarid_tipo_cambioFactura);}
		if(this.facturaConstantesFunciones.resaltares_clienteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jCheckBoxes_clienteFactura.setBorderPainted(true);this.jInternalFrameDetalleFormFactura.jCheckBoxes_clienteFactura.setBorder(this.facturaConstantesFunciones.resaltares_clienteFactura);}
		if(this.facturaConstantesFunciones.resaltarid_asiento_contableFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setBorder(this.facturaConstantesFunciones.resaltarid_asiento_contableFactura);}
		if(this.facturaConstantesFunciones.resaltarid_pedidoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setBorder(this.facturaConstantesFunciones.resaltarid_pedidoFactura);}
		if(this.facturaConstantesFunciones.resaltarid_responsableFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setBorder(this.facturaConstantesFunciones.resaltarid_responsableFactura);}
		if(this.facturaConstantesFunciones.resaltarid_estado_fisico_factura_empresaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setBorder(this.facturaConstantesFunciones.resaltarid_estado_fisico_factura_empresaFactura);}
		if(this.facturaConstantesFunciones.resaltarfechaFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfechaFactura.setBorder(this.facturaConstantesFunciones.resaltarfechaFactura);}
		if(this.facturaConstantesFunciones.resaltarfecha_autorizacionFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfecha_autorizacionFactura.setBorder(this.facturaConstantesFunciones.resaltarfecha_autorizacionFactura);}
		if(this.facturaConstantesFunciones.resaltarfecha_clienteFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfecha_clienteFactura.setBorder(this.facturaConstantesFunciones.resaltarfecha_clienteFactura);}
		if(this.facturaConstantesFunciones.resaltarnumero_documentoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldnumero_documentoFactura.setBorder(this.facturaConstantesFunciones.resaltarnumero_documentoFactura);}
		if(this.facturaConstantesFunciones.resaltarnumero_dauFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldnumero_dauFactura.setBorder(this.facturaConstantesFunciones.resaltarnumero_dauFactura);}
		if(this.facturaConstantesFunciones.resaltarnumero_referendoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldnumero_referendoFactura.setBorder(this.facturaConstantesFunciones.resaltarnumero_referendoFactura);}
		if(this.facturaConstantesFunciones.resaltarfecha_referendoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jDateChooserfecha_referendoFactura.setBorder(this.facturaConstantesFunciones.resaltarfecha_referendoFactura);}
		if(this.facturaConstantesFunciones.resaltaraforo_referendoFactura!=null && this.jInternalFrameDetalleFormFactura!=null) {this.jInternalFrameDetalleFormFactura.jTextFieldaforo_referendoFactura.setBorder(this.facturaConstantesFunciones.resaltaraforo_referendoFactura);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioFactura() throws Exception {		
		if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
	
		//this.jInternalFrameDetalleFormFactura.jLabelidFactura.setVisible(this.facturaConstantesFunciones.mostraridFactura);
		this.jInternalFrameDetalleFormFactura.jPanelidFactura.setVisible(this.facturaConstantesFunciones.mostraridFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_empresaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_empresaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_empresaFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setVisible(this.facturaConstantesFunciones.mostrarid_sucursalFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_sucursalFactura.setVisible(this.facturaConstantesFunciones.mostrarid_sucursalFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_ejercicioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_ejercicioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_ejercicioFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_periodoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_periodoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_periodoFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_anioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_anioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_anioFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setVisible(this.facturaConstantesFunciones.mostrarid_mesFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_mesFactura.setVisible(this.facturaConstantesFunciones.mostrarid_mesFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_usuarioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_usuarioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_usuarioFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_pre_impresoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelnumero_pre_impresoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_pre_impresoFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_emisionFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfecha_emisionFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_emisionFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_diasFactura);
		this.jInternalFrameDetalleFormFactura.jPanelnumero_diasFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_diasFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_vencimientoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfecha_vencimientoFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_vencimientoFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_monedaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_monedaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_monedaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setVisible(this.facturaConstantesFunciones.mostrarcotizacionFactura);
		this.jInternalFrameDetalleFormFactura.jPanelcotizacionFactura.setVisible(this.facturaConstantesFunciones.mostrarcotizacionFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_empleadoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_empleadoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_empleadoFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_empleadoFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_formatoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_formatoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_formatoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setVisible(this.facturaConstantesFunciones.mostrardireccionFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldireccionFactura.setVisible(this.facturaConstantesFunciones.mostrardireccionFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setVisible(this.facturaConstantesFunciones.mostrarrucFactura);
		this.jInternalFrameDetalleFormFactura.jPanelrucFactura.setVisible(this.facturaConstantesFunciones.mostrarrucFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_clienteFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_clienteFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_precioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_tipo_precioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_precioFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setVisible(this.facturaConstantesFunciones.mostrartelefonoFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltelefonoFactura.setVisible(this.facturaConstantesFunciones.mostrartelefonoFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_sub_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_sub_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_sub_clienteFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setVisible(this.facturaConstantesFunciones.mostrarid_vendedorFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_vendedorFactura.setVisible(this.facturaConstantesFunciones.mostrarid_vendedorFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFactura.setVisible(this.facturaConstantesFunciones.mostrarid_vendedorFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_transporteFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_transporteFactura.setVisible(this.facturaConstantesFunciones.mostrarid_transporteFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_transportistaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_transportistaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_transportistaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setVisible(this.facturaConstantesFunciones.mostrarordenFactura);
		this.jInternalFrameDetalleFormFactura.jPanelordenFactura.setVisible(this.facturaConstantesFunciones.mostrarordenFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_llamadaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_tipo_llamadaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_llamadaFactura);
		//this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setVisible(this.facturaConstantesFunciones.mostrarhora_inicioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelhora_inicioFactura.setVisible(this.facturaConstantesFunciones.mostrarhora_inicioFactura);
		//this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setVisible(this.facturaConstantesFunciones.mostrarhora_finFactura);
		this.jInternalFrameDetalleFormFactura.jPanelhora_finFactura.setVisible(this.facturaConstantesFunciones.mostrarhora_finFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_facturaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_tipo_facturaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_facturaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setVisible(this.facturaConstantesFunciones.mostrardescripcionFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldescripcionFactura.setVisible(this.facturaConstantesFunciones.mostrardescripcionFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setVisible(this.facturaConstantesFunciones.mostrarcupoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelcupoFactura.setVisible(this.facturaConstantesFunciones.mostrarcupoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setVisible(this.facturaConstantesFunciones.mostrarsaldoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelsaldoFactura.setVisible(this.facturaConstantesFunciones.mostrarsaldoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setVisible(this.facturaConstantesFunciones.mostrardocumentosFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldocumentosFactura.setVisible(this.facturaConstantesFunciones.mostrardocumentosFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setVisible(this.facturaConstantesFunciones.mostrardisponibleFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldisponibleFactura.setVisible(this.facturaConstantesFunciones.mostrardisponibleFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setVisible(this.facturaConstantesFunciones.mostrarporcentaje_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelporcentaje_descuentoFactura.setVisible(this.facturaConstantesFunciones.mostrarporcentaje_descuentoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_ivaFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_ivaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setVisible(this.facturaConstantesFunciones.mostrarsumanFactura);
		this.jInternalFrameDetalleFormFactura.jPanelsumanFactura.setVisible(this.facturaConstantesFunciones.mostrarsumanFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setVisible(this.facturaConstantesFunciones.mostrardescuento_valorFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldescuento_valorFactura.setVisible(this.facturaConstantesFunciones.mostrardescuento_valorFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_sin_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_sin_ivaFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_sin_ivaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_descuentoFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_descuentoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_fleteFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_fleteFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_fleteFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setVisible(this.facturaConstantesFunciones.mostrartotalFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotalFactura.setVisible(this.facturaConstantesFunciones.mostrartotalFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setVisible(this.facturaConstantesFunciones.mostrarsub_totalFactura);
		this.jInternalFrameDetalleFormFactura.jPanelsub_totalFactura.setVisible(this.facturaConstantesFunciones.mostrarsub_totalFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_otroFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_otroFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_otroFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setVisible(this.facturaConstantesFunciones.mostrarultimo_costoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelultimo_costoFactura.setVisible(this.facturaConstantesFunciones.mostrarultimo_costoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setVisible(this.facturaConstantesFunciones.mostrarivaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelivaFactura.setVisible(this.facturaConstantesFunciones.mostrarivaFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setVisible(this.facturaConstantesFunciones.mostrardescuentoFactura);
		this.jInternalFrameDetalleFormFactura.jPaneldescuentoFactura.setVisible(this.facturaConstantesFunciones.mostrardescuentoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setVisible(this.facturaConstantesFunciones.mostrarfinanciamientoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfinanciamientoFactura.setVisible(this.facturaConstantesFunciones.mostrarfinanciamientoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setVisible(this.facturaConstantesFunciones.mostrarmargen_utilidadFactura);
		this.jInternalFrameDetalleFormFactura.jPanelmargen_utilidadFactura.setVisible(this.facturaConstantesFunciones.mostrarmargen_utilidadFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setVisible(this.facturaConstantesFunciones.mostrariceFactura);
		this.jInternalFrameDetalleFormFactura.jPaneliceFactura.setVisible(this.facturaConstantesFunciones.mostrariceFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setVisible(this.facturaConstantesFunciones.mostraranticipoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelanticipoFactura.setVisible(this.facturaConstantesFunciones.mostraranticipoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setVisible(this.facturaConstantesFunciones.mostrarotros_valoresFactura);
		this.jInternalFrameDetalleFormFactura.jPanelotros_valoresFactura.setVisible(this.facturaConstantesFunciones.mostrarotros_valoresFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_retencionFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_retencionFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_retencionFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_retencionFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldtotal_consumo_especialFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_consumo_especialFactura);
		this.jInternalFrameDetalleFormFactura.jPaneltotal_consumo_especialFactura.setVisible(this.facturaConstantesFunciones.mostrartotal_consumo_especialFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldretencionFactura.setVisible(this.facturaConstantesFunciones.mostrarretencionFactura);
		this.jInternalFrameDetalleFormFactura.jPanelretencionFactura.setVisible(this.facturaConstantesFunciones.mostrarretencionFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_cambioFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_tipo_cambioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_cambioFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFactura.setVisible(this.facturaConstantesFunciones.mostrarid_tipo_cambioFactura);
		//this.jInternalFrameDetalleFormFactura.jCheckBoxes_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrares_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jPaneles_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrares_clienteFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setVisible(this.facturaConstantesFunciones.mostrarid_asiento_contableFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_asiento_contableFactura.setVisible(this.facturaConstantesFunciones.mostrarid_asiento_contableFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFactura.setVisible(this.facturaConstantesFunciones.mostrarid_asiento_contableFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_pedidoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_pedidoFactura.setVisible(this.facturaConstantesFunciones.mostrarid_pedidoFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setVisible(this.facturaConstantesFunciones.mostrarid_responsableFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_responsableFactura.setVisible(this.facturaConstantesFunciones.mostrarid_responsableFactura);
		//this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_estado_fisico_factura_empresaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelid_estado_fisico_factura_empresaFactura.setVisible(this.facturaConstantesFunciones.mostrarid_estado_fisico_factura_empresaFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfechaFactura.setVisible(this.facturaConstantesFunciones.mostrarfechaFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfechaFactura.setVisible(this.facturaConstantesFunciones.mostrarfechaFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfecha_autorizacionFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_autorizacionFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfecha_autorizacionFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_autorizacionFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfecha_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfecha_clienteFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_clienteFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldnumero_documentoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_documentoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelnumero_documentoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_documentoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldnumero_dauFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_dauFactura);
		this.jInternalFrameDetalleFormFactura.jPanelnumero_dauFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_dauFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldnumero_referendoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_referendoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelnumero_referendoFactura.setVisible(this.facturaConstantesFunciones.mostrarnumero_referendoFactura);
		//this.jInternalFrameDetalleFormFactura.jDateChooserfecha_referendoFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_referendoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelfecha_referendoFactura.setVisible(this.facturaConstantesFunciones.mostrarfecha_referendoFactura);
		//this.jInternalFrameDetalleFormFactura.jTextFieldaforo_referendoFactura.setVisible(this.facturaConstantesFunciones.mostraraforo_referendoFactura);
		this.jInternalFrameDetalleFormFactura.jPanelaforo_referendoFactura.setVisible(this.facturaConstantesFunciones.mostraraforo_referendoFactura);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioFactura() throws Exception {
		if(this.jInternalFrameDetalleFormFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFactura!=null) {
	
		this.jInternalFrameDetalleFormFactura.jLabelidFactura.setEnabled(this.facturaConstantesFunciones.activaridFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_empresaFactura.setEnabled(this.facturaConstantesFunciones.activarid_empresaFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_sucursalFactura.setEnabled(this.facturaConstantesFunciones.activarid_sucursalFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_ejercicioFactura.setEnabled(this.facturaConstantesFunciones.activarid_ejercicioFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_periodoFactura.setEnabled(this.facturaConstantesFunciones.activarid_periodoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_anioFactura.setEnabled(this.facturaConstantesFunciones.activarid_anioFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_mesFactura.setEnabled(this.facturaConstantesFunciones.activarid_mesFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_usuarioFactura.setEnabled(this.facturaConstantesFunciones.activarid_usuarioFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_pre_impresoFactura.setEnabled(this.facturaConstantesFunciones.activarnumero_pre_impresoFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_emisionFactura.setEnabled(this.facturaConstantesFunciones.activarfecha_emisionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_diasFactura.setEnabled(this.facturaConstantesFunciones.activarnumero_diasFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_vencimientoFactura.setEnabled(this.facturaConstantesFunciones.activarfecha_vencimientoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_monedaFactura.setEnabled(this.facturaConstantesFunciones.activarid_monedaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldcotizacionFactura.setEnabled(this.facturaConstantesFunciones.activarcotizacionFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_empleadoFactura.setEnabled(this.facturaConstantesFunciones.activarid_empleadoFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_empleadoFactura.setEnabled(this.facturaConstantesFunciones.activarid_empleadoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_formatoFactura.setEnabled(this.facturaConstantesFunciones.activarid_formatoFactura);
		this.jInternalFrameDetalleFormFactura.jTextAreadireccionFactura.setEnabled(this.facturaConstantesFunciones.activardireccionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldrucFactura.setEnabled(this.facturaConstantesFunciones.activarrucFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_clienteFactura.setEnabled(this.facturaConstantesFunciones.activarid_clienteFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_clienteFactura.setEnabled(this.facturaConstantesFunciones.activarid_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_precioFactura.setEnabled(this.facturaConstantesFunciones.activarid_tipo_precioFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtelefonoFactura.setEnabled(this.facturaConstantesFunciones.activartelefonoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_sub_clienteFactura.setEnabled(this.facturaConstantesFunciones.activarid_sub_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_vendedorFactura.setEnabled(this.facturaConstantesFunciones.activarid_vendedorFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_vendedorFactura.setEnabled(this.facturaConstantesFunciones.activarid_vendedorFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_transporteFactura.setEnabled(this.facturaConstantesFunciones.activarid_transporteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_transportistaFactura.setEnabled(this.facturaConstantesFunciones.activarid_transportistaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldordenFactura.setEnabled(this.facturaConstantesFunciones.activarordenFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_llamadaFactura.setEnabled(this.facturaConstantesFunciones.activarid_tipo_llamadaFactura);
		this.jInternalFrameDetalleFormFactura.jSpinnerhora_inicioFactura.setEnabled(this.facturaConstantesFunciones.activarhora_inicioFactura);
		this.jInternalFrameDetalleFormFactura.jSpinnerhora_finFactura.setEnabled(this.facturaConstantesFunciones.activarhora_finFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_facturaFactura.setEnabled(this.facturaConstantesFunciones.activarid_tipo_facturaFactura);
		this.jInternalFrameDetalleFormFactura.jTextAreadescripcionFactura.setEnabled(this.facturaConstantesFunciones.activardescripcionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldcupoFactura.setEnabled(this.facturaConstantesFunciones.activarcupoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsaldoFactura.setEnabled(this.facturaConstantesFunciones.activarsaldoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddocumentosFactura.setEnabled(this.facturaConstantesFunciones.activardocumentosFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddisponibleFactura.setEnabled(this.facturaConstantesFunciones.activardisponibleFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldporcentaje_descuentoFactura.setEnabled(this.facturaConstantesFunciones.activarporcentaje_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_ivaFactura.setEnabled(this.facturaConstantesFunciones.activartotal_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsumanFactura.setEnabled(this.facturaConstantesFunciones.activarsumanFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddescuento_valorFactura.setEnabled(this.facturaConstantesFunciones.activardescuento_valorFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_sin_ivaFactura.setEnabled(this.facturaConstantesFunciones.activartotal_sin_ivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_descuentoFactura.setEnabled(this.facturaConstantesFunciones.activartotal_descuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_fleteFactura.setEnabled(this.facturaConstantesFunciones.activartotal_fleteFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotalFactura.setEnabled(this.facturaConstantesFunciones.activartotalFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldsub_totalFactura.setEnabled(this.facturaConstantesFunciones.activarsub_totalFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_otroFactura.setEnabled(this.facturaConstantesFunciones.activartotal_otroFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldultimo_costoFactura.setEnabled(this.facturaConstantesFunciones.activarultimo_costoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldivaFactura.setEnabled(this.facturaConstantesFunciones.activarivaFactura);
		this.jInternalFrameDetalleFormFactura.jTextFielddescuentoFactura.setEnabled(this.facturaConstantesFunciones.activardescuentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldfinanciamientoFactura.setEnabled(this.facturaConstantesFunciones.activarfinanciamientoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldmargen_utilidadFactura.setEnabled(this.facturaConstantesFunciones.activarmargen_utilidadFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldiceFactura.setEnabled(this.facturaConstantesFunciones.activariceFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldanticipoFactura.setEnabled(this.facturaConstantesFunciones.activaranticipoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldotros_valoresFactura.setEnabled(this.facturaConstantesFunciones.activarotros_valoresFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_retencionFactura.setEnabled(this.facturaConstantesFunciones.activartotal_retencionFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldtotal_consumo_especialFactura.setEnabled(this.facturaConstantesFunciones.activartotal_consumo_especialFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldretencionFactura.setEnabled(this.facturaConstantesFunciones.activarretencionFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_tipo_cambioFactura.setEnabled(this.facturaConstantesFunciones.activarid_tipo_cambioFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_tipo_cambioFactura.setEnabled(this.facturaConstantesFunciones.activarid_tipo_cambioFactura);
		this.jInternalFrameDetalleFormFactura.jCheckBoxes_clienteFactura.setEnabled(this.facturaConstantesFunciones.activares_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_asiento_contableFactura.setEnabled(this.facturaConstantesFunciones.activarid_asiento_contableFactura);
			this.jInternalFrameDetalleFormFactura.jButtonid_asiento_contableFactura.setEnabled(this.facturaConstantesFunciones.activarid_asiento_contableFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_pedidoFactura.setEnabled(this.facturaConstantesFunciones.activarid_pedidoFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_responsableFactura.setEnabled(this.facturaConstantesFunciones.activarid_responsableFactura);
		this.jInternalFrameDetalleFormFactura.jComboBoxid_estado_fisico_factura_empresaFactura.setEnabled(this.facturaConstantesFunciones.activarid_estado_fisico_factura_empresaFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfechaFactura.setEnabled(this.facturaConstantesFunciones.activarfechaFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_autorizacionFactura.setEnabled(this.facturaConstantesFunciones.activarfecha_autorizacionFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_clienteFactura.setEnabled(this.facturaConstantesFunciones.activarfecha_clienteFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_documentoFactura.setEnabled(this.facturaConstantesFunciones.activarnumero_documentoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_dauFactura.setEnabled(this.facturaConstantesFunciones.activarnumero_dauFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldnumero_referendoFactura.setEnabled(this.facturaConstantesFunciones.activarnumero_referendoFactura);
		this.jInternalFrameDetalleFormFactura.jDateChooserfecha_referendoFactura.setEnabled(this.facturaConstantesFunciones.activarfecha_referendoFactura);
		this.jInternalFrameDetalleFormFactura.jTextFieldaforo_referendoFactura.setEnabled(this.facturaConstantesFunciones.activaraforo_referendoFactura);
		}
	}
	
		
}