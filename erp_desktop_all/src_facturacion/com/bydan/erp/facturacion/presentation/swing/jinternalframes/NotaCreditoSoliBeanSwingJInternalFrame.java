/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.NotaCreditoSoliConstantesFunciones;
import com.bydan.erp.facturacion.util.NotaCreditoSoliParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.NotaCreditoSoliParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.NotaCreditoSoliBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class NotaCreditoSoliBeanSwingJInternalFrame extends NotaCreditoSoliJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(NotaCreditoSoliBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<NotaCreditoSoli> notacreditosoliValidator = new ClassValidator<NotaCreditoSoli>(NotaCreditoSoli.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public NotaCreditoSoli notacreditosoli;	
	public NotaCreditoSoli notacreditosoliAux;
	public NotaCreditoSoli notacreditosoliAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public NotaCreditoSoli notacreditosoliTotales;
	public Long idNotaCreditoSoliActual;
	public Long iIdNuevoNotaCreditoSoli=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboTipoNotaCreditoSoli="";

	public List<TipoNotaCreditoSoli> tiponotacreditosolisForeignKey;

	public List<TipoNotaCreditoSoli> gettiponotacreditosolisForeignKey() {
		return tiponotacreditosolisForeignKey;
	}

	public void settiponotacreditosolisForeignKey(List<TipoNotaCreditoSoli> tiponotacreditosolisForeignKey) {
		this.tiponotacreditosolisForeignKey = tiponotacreditosolisForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoNotaCreditoSoli tiponotacreditosoliForeignKey;

	public TipoNotaCreditoSoli gettiponotacreditosoliForeignKey() {
		return tiponotacreditosoliForeignKey;
	}

	public void settiponotacreditosoliForeignKey(TipoNotaCreditoSoli tiponotacreditosoliForeignKey) {
		this.tiponotacreditosoliForeignKey = tiponotacreditosoliForeignKey;
	}

	public String sFinalQueryComboResponsable="";

	public List<Responsable> responsablesForeignKey;

	public List<Responsable> getresponsablesForeignKey() {
		return responsablesForeignKey;
	}

	public void setresponsablesForeignKey(List<Responsable> responsablesForeignKey) {
		this.responsablesForeignKey = responsablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Responsable responsableForeignKey;

	public Responsable getresponsableForeignKey() {
		return responsableForeignKey;
	}

	public void setresponsableForeignKey(Responsable responsableForeignKey) {
		this.responsableForeignKey = responsableForeignKey;
	}

	public String sFinalQueryComboEstadoNotaCreditoSoli="";

	public List<EstadoNotaCredito> estadonotacreditosolisForeignKey;

	public List<EstadoNotaCredito> getestadonotacreditosolisForeignKey() {
		return estadonotacreditosolisForeignKey;
	}

	public void setestadonotacreditosolisForeignKey(List<EstadoNotaCredito> estadonotacreditosolisForeignKey) {
		this.estadonotacreditosolisForeignKey = estadonotacreditosolisForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoNotaCredito estadonotacreditosoliForeignKey;

	public EstadoNotaCredito getestadonotacreditosoliForeignKey() {
		return estadonotacreditosoliForeignKey;
	}

	public void setestadonotacreditosoliForeignKey(EstadoNotaCredito estadonotacreditosoliForeignKey) {
		this.estadonotacreditosoliForeignKey = estadonotacreditosoliForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

	public String sFinalQueryComboTransporte="";

	public List<Transporte> transportesForeignKey;

	public List<Transporte> gettransportesForeignKey() {
		return transportesForeignKey;
	}

	public void settransportesForeignKey(List<Transporte> transportesForeignKey) {
		this.transportesForeignKey = transportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transporte transporteForeignKey;

	public Transporte gettransporteForeignKey() {
		return transporteForeignKey;
	}

	public void settransporteForeignKey(Transporte transporteForeignKey) {
		this.transporteForeignKey = transporteForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idVendedorActual=0L;

	public Long getidVendedorActual() {
		return idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual= idVendedorActual;
	}
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	
	

	public Boolean isTienePermisosDetaNotaCreditoSoli=false;

	public Boolean getIsTienePermisosDetaNotaCreditoSoli() {
		return isTienePermisosDetaNotaCreditoSoli;
	}

	public void setIsTienePermisosDetaNotaCreditoSoli(Boolean isTienePermisosDetaNotaCreditoSoli) {
		this.isTienePermisosDetaNotaCreditoSoli= isTienePermisosDetaNotaCreditoSoli;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoNotaCreditoSoli;
	public Boolean isPermisoNuevoNotaCreditoSoli;
	public Boolean isPermisoActualizarNotaCreditoSoli;
	public Boolean isPermisoActualizarOriginalNotaCreditoSoli;
	public Boolean isPermisoEliminarNotaCreditoSoli;
	public Boolean isPermisoGuardarCambiosNotaCreditoSoli;
	public Boolean isPermisoConsultaNotaCreditoSoli;
	public Boolean isPermisoBusquedaNotaCreditoSoli;
	public Boolean isPermisoReporteNotaCreditoSoli;
	public Boolean isPermisoPaginacionMedioNotaCreditoSoli;
	public Boolean isPermisoPaginacionAltoNotaCreditoSoli;
	public Boolean isPermisoPaginacionTodoNotaCreditoSoli;
	public Boolean isPermisoCopiarNotaCreditoSoli;
	public Boolean isPermisoVerFormNotaCreditoSoli;
	public Boolean isPermisoDuplicarNotaCreditoSoli;
	public Boolean isPermisoOrdenNotaCreditoSoli;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public NotaCreditoSoliParameterReturnGeneral notacreditosoliReturnGeneral;
	public NotaCreditoSoliParameterReturnGeneral notacreditosoliParameterGeneral;
	
	

	public DetaNotaCreditoSoliLogic detanotacreditosoliLogic=null;

	public DetaNotaCreditoSoliLogic getDetaNotaCreditoSoliLogic() {
		return detanotacreditosoliLogic;
	}

	public void setDetaNotaCreditoSoliLogic(DetaNotaCreditoSoliLogic detanotacreditosoliLogic) {
		this.detanotacreditosoliLogic = detanotacreditosoliLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoNotaCreditoSoli=false;
	public Boolean esParaAccionDesdeFormularioNotaCreditoSoli=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected NotaCreditoSoliSessionBeanAdditional notacreditosoliSessionBeanAdditional=null;
	
	public NotaCreditoSoliSessionBeanAdditional getNotaCreditoSoliSessionBeanAdditional() {
		return this.notacreditosoliSessionBeanAdditional;
	}
	
	public void setNotaCreditoSoliSessionBeanAdditional(NotaCreditoSoliSessionBeanAdditional notacreditosoliSessionBeanAdditional) {
		try {
			this.notacreditosoliSessionBeanAdditional=notacreditosoliSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected NotaCreditoSoliBeanSwingJInternalFrameAdditional notacreditosoliBeanSwingJInternalFrameAdditional=null;
	//public class NotaCreditoSoliBeanSwingJInternalFrame
	
	public NotaCreditoSoliBeanSwingJInternalFrameAdditional getNotaCreditoSoliBeanSwingJInternalFrameAdditional() {
		return this.notacreditosoliBeanSwingJInternalFrameAdditional;
	}
	
	public void setNotaCreditoSoliBeanSwingJInternalFrameAdditional(NotaCreditoSoliBeanSwingJInternalFrameAdditional notacreditosoliBeanSwingJInternalFrameAdditional) {
		try {
			this.notacreditosoliBeanSwingJInternalFrameAdditional=notacreditosoliBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public NotaCreditoSoliLogic notacreditosoliLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public NotaCreditoSoli notacreditosoliBean;
	public NotaCreditoSoliConstantesFunciones notacreditosoliConstantesFunciones;
	//public NotaCreditoSoliParameterReturnGeneral notacreditosoliReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public MonedaLogic monedaLogic;
	public EmpleadoLogic empleadoLogic;
	public FormatoLogic formatoLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public ClienteLogic clienteLogic;
	public FacturaLogic facturaLogic;
	public TipoNotaCreditoSoliLogic tiponotacreditosoliLogic;
	public ResponsableLogic responsableLogic;
	public EstadoNotaCreditoLogic estadonotacreditosoliLogic;
	public CentroCostoLogic centrocostoLogic;
	public VendedorLogic vendedorLogic;
	public TipoCambioLogic tipocambioLogic;
	public TransporteLogic transporteLogic;
	public TransportistaLogic transportistaLogic;
	
	//PARAMETROS
	
	
	//public List<NotaCreditoSoli> notacreditosolis;	
	//public List<NotaCreditoSoli> notacreditosolisEliminados;
	//public List<NotaCreditoSoli> notacreditosolisAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaDuplicarNotaCreditoSoli=true;
	public Boolean isVisibilidadCeldaCopiarNotaCreditoSoli=true;
	public Boolean isVisibilidadCeldaVerFormNotaCreditoSoli=true;
	public Boolean isVisibilidadCeldaOrdenNotaCreditoSoli=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaModificarNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaActualizarNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaEliminarNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaCancelarNotaCreditoSoli=false;
	public Boolean isVisibilidadCeldaGuardarNotaCreditoSoli=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoNotaCreditoSoli=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdResponsable=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	public Boolean isVisibilidadFK_IdTipoNotaCreditoSoli=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdTransporte=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoNotaCreditoSoli() {
		return this.iIdNuevoNotaCreditoSoli;
	}

	public void setiIdNuevoNotaCreditoSoli(Long iIdNuevoNotaCreditoSoli) {
		this.iIdNuevoNotaCreditoSoli = iIdNuevoNotaCreditoSoli;
	}
	
	public Long getidNotaCreditoSoliActual() {
		return this.idNotaCreditoSoliActual;
	}

	public void setidNotaCreditoSoliActual(Long idNotaCreditoSoliActual) {
		this.idNotaCreditoSoliActual = idNotaCreditoSoliActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public NotaCreditoSoli getnotacreditosoli() {
		return this.notacreditosoli;
	}

	public void setnotacreditosoli(NotaCreditoSoli notacreditosoli) {
		this.notacreditosoli = notacreditosoli;
	}
	
	public NotaCreditoSoli getnotacreditosoliAux() {
		return this.notacreditosoliAux;
	}

	public void setnotacreditosoliAux(NotaCreditoSoli notacreditosoliAux) {
		this.notacreditosoliAux = notacreditosoliAux;
	}				
	
	public NotaCreditoSoli getnotacreditosoliAnterior() {
		return this.notacreditosoliAnterior;
	}

	public void setnotacreditosoliAnterior(NotaCreditoSoli notacreditosoliAnterior) {
		this.notacreditosoliAnterior = notacreditosoliAnterior;
	}	
	
	public NotaCreditoSoli getnotacreditosoliTotales() {
		return this.notacreditosoliTotales;
	}

	public void setnotacreditosoliTotales(NotaCreditoSoli notacreditosoliTotales) {
		this.notacreditosoliTotales = notacreditosoliTotales;
	}	
	
	public NotaCreditoSoli getnotacreditosoliBean() {
		return this.notacreditosoliBean;
	}

	public void setnotacreditosoliBean(NotaCreditoSoli notacreditosoliBean) {
		this.notacreditosoliBean = notacreditosoliBean;
	}	
	
	public NotaCreditoSoliParameterReturnGeneral getnotacreditosoliReturnGeneral() {
		return this.notacreditosoliReturnGeneral;
	}

	public void setnotacreditosoliReturnGeneral(NotaCreditoSoliParameterReturnGeneral notacreditosoliReturnGeneral) {
		this.notacreditosoliReturnGeneral = notacreditosoliReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli=-1L;

	public Long getid_estado_nota_creditoFK_IdEstadoNotaCreditoSoli() {
		return this.id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli;
	}

	public void setid_estado_nota_creditoFK_IdEstadoNotaCreditoSoli(Long id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli) {
		this.id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli = id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_formatoFK_IdFormato=null;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_responsableFK_IdResponsable=null;

	public Long getid_responsableFK_IdResponsable() {
		return this.id_responsableFK_IdResponsable;
	}

	public void setid_responsableFK_IdResponsable(Long id_responsableFK_IdResponsable) {
		this.id_responsableFK_IdResponsable = id_responsableFK_IdResponsable;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

	public Long id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli=-1L;

	public Long getid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli() {
		return this.id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli;
	}

	public void setid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli(Long id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli) {
		this.id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli = id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_transporteFK_IdTransporte=null;

	public Long getid_transporteFK_IdTransporte() {
		return this.id_transporteFK_IdTransporte;
	}

	public void setid_transporteFK_IdTransporte(Long id_transporteFK_IdTransporte) {
		this.id_transporteFK_IdTransporte = id_transporteFK_IdTransporte;
	}

	public Long id_transportistaFK_IdTransportista=null;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=null;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public NotaCreditoSoliLogic getNotaCreditoSoliLogic()	{		
		return notacreditosoliLogic;
	}

	public void setNotaCreditoSoliLogic(NotaCreditoSoliLogic notacreditosoliLogic) {
		this.notacreditosoliLogic = notacreditosoliLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoNotaCreditoSoli() {
		return isEsNuevoNotaCreditoSoli;
	}

	public void setIsEsNuevoNotaCreditoSoli(Boolean isEsNuevoNotaCreditoSoli) {
		this.isEsNuevoNotaCreditoSoli = isEsNuevoNotaCreditoSoli;
	}

	public Boolean getEsParaAccionDesdeFormularioNotaCreditoSoli() {
		return esParaAccionDesdeFormularioNotaCreditoSoli;
	}
	
	public void setEsParaAccionDesdeFormularioNotaCreditoSoli(Boolean esParaAccionDesdeFormularioNotaCreditoSoli) {
		this.esParaAccionDesdeFormularioNotaCreditoSoli = esParaAccionDesdeFormularioNotaCreditoSoli;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Formato formatoNulo = new Formato();

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.formatosForeignKey.add(0, formatoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoNotaCreditoSolisForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiponotacreditosolisForeignKey=new ArrayList<TipoNotaCreditoSoli>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoNotaCreditoSoliLogic tiponotacreditosoliLogic=new TipoNotaCreditoSoliLogic();

			//tiponotacreditosoliLogic.getTipoNotaCreditoSoliDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoNotaCreditoSoli()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiponotacreditosoliLogic.getTipoNotaCreditoSoliDataAccess().setIsForForeingKeyData(true);

					tiponotacreditosoliLogic.getTodosTipoNotaCreditoSolisWithConnection(sFinalQuery,new Pagination());

					this.tiponotacreditosolisForeignKey=tiponotacreditosoliLogic.getTipoNotaCreditoSolis();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoNotaCreditoSoli(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiponotacreditosoliLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidTipoNotaCreditoSoliActual());
					this.tiponotacreditosolisForeignKey.add(tiponotacreditosoliLogic.getTipoNotaCreditoSoli());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosResponsablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.responsablesForeignKey=new ArrayList<Responsable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Responsable responsableNulo = new Responsable();

			ResponsableLogic responsableLogic=new ResponsableLogic();

			//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

					responsableLogic.getTodosResponsablesWithConnection(sFinalQuery,new Pagination());

					this.responsablesForeignKey=responsableLogic.getResponsables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.responsablesForeignKey.add(0, responsableNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaResponsable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					responsableLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidResponsableActual());
					this.responsablesForeignKey.add(responsableLogic.getResponsable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoNotaCreditoSolisForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadonotacreditosolisForeignKey=new ArrayList<EstadoNotaCredito>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoNotaCreditoLogic estadonotacreditoLogic=new EstadoNotaCreditoLogic();

			//estadonotacreditoLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoSoli()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadonotacreditosoliLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

					estadonotacreditoLogic.getTodosEstadoNotaCreditosWithConnection(sFinalQuery,new Pagination());

					this.estadonotacreditosolisForeignKey=estadonotacreditoLogic.getEstadoNotaCreditos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoNotaCreditoSoli(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadonotacreditoLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidEstadoNotaCreditoSoliActual());
					this.estadonotacreditosolisForeignKey.add(estadonotacreditoLogic.getEstadoNotaCredito());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Vendedor vendedorNulo = new Vendedor();

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.vendedorsForeignKey.add(0, vendedorNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportesForeignKey=new ArrayList<Transporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transporte transporteNulo = new Transporte();

			TransporteLogic transporteLogic=new TransporteLogic();

			//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

					transporteLogic.getTodosTransportesWithConnection(sFinalQuery,new Pagination());

					this.transportesForeignKey=transporteLogic.getTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportesForeignKey.add(0, transporteNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transporteLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidTransporteActual());
					this.transportesForeignKey.add(transporteLogic.getTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transportista transportistaNulo = new Transportista();

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportistasForeignKey.add(0, transportistaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(notacreditosoliSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaNotaCreditoSoli.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaNotaCreditoSoliGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaNotaCreditoSoliGenerico!=null && jComboBoxid_empresaNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_empresaNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalNotaCreditoSoli.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalNotaCreditoSoliGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalNotaCreditoSoliGenerico!=null && jComboBoxid_sucursalNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_sucursalNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioNotaCreditoSoli.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioNotaCreditoSoliGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioNotaCreditoSoliGenerico!=null && jComboBoxid_ejercicioNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoNotaCreditoSoli.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoNotaCreditoSoliGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoNotaCreditoSoliGenerico!=null && jComboBoxid_periodoNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_periodoNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioNotaCreditoSoli.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioNotaCreditoSoliGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioNotaCreditoSoliGenerico!=null && jComboBoxid_anioNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_anioNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesNotaCreditoSoli.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesNotaCreditoSoliGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesNotaCreditoSoliGenerico!=null && jComboBoxid_mesNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_mesNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioNotaCreditoSoli.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioNotaCreditoSoliGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioNotaCreditoSoliGenerico!=null && jComboBoxid_usuarioNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_usuarioNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaNotaCreditoSoli.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaNotaCreditoSoliGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaNotaCreditoSoliGenerico!=null && jComboBoxid_monedaNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_monedaNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoNotaCreditoSoli.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoNotaCreditoSoliGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoNotaCreditoSoliGenerico!=null && jComboBoxid_empleadoNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_empleadoNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoNotaCreditoSoli.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoNotaCreditoSoliGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoNotaCreditoSoliGenerico!=null && jComboBoxid_formatoNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_formatoNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioNotaCreditoSoliGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioNotaCreditoSoliGenerico!=null && jComboBoxid_tipo_precioNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteNotaCreditoSoli.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteNotaCreditoSoli!=null) {
						jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteNotaCreditoSoli!=null) {
							//jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteNotaCreditoSoliGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteNotaCreditoSoliGenerico!=null && jComboBoxid_clienteNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_clienteNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaNotaCreditoSoli.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli!=null) {
						jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli!=null) {
							//jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaNotaCreditoSoliGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaNotaCreditoSoliGenerico!=null && jComboBoxid_facturaNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_facturaNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoNotaCreditoSoliForeignKey(Long idTipoNotaCreditoSoliSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoNotaCreditoSoli  tiponotacreditosoliTemp=null;

			for(TipoNotaCreditoSoli tiponotacreditosoliAux:tiponotacreditosolisForeignKey) {
				if(tiponotacreditosoliAux.getId()!=null && tiponotacreditosoliAux.getId().equals(idTipoNotaCreditoSoliSeleccionado)) {
					tiponotacreditosoliTemp=tiponotacreditosoliAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiponotacreditosoliTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setTipoNotaCreditoSoli(tiponotacreditosoliTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedItem(tiponotacreditosoliTemp);
					}
				} else {
					//jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedItem(tiponotacreditosoliTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoNotaCreditoSoli") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiponotacreditosoliTemp!=null && jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli!=null) {
						jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(tiponotacreditosoliTemp);
					} else {
						if(jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli!=null) {
							//jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(tiponotacreditosoliTemp);
							if(jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoNotaCreditoSoliForeignKeyDescripcion(Long idTipoNotaCreditoSoliSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoNotaCreditoSoli  tiponotacreditosoliTemp=null;

			for(TipoNotaCreditoSoli tiponotacreditosoliAux:tiponotacreditosolisForeignKey) {
				if(tiponotacreditosoliAux.getId()!=null && tiponotacreditosoliAux.getId().equals(idTipoNotaCreditoSoliSeleccionado)) {
					tiponotacreditosoliTemp=tiponotacreditosoliAux;
					break;
				}
			}


			sDescripcion=TipoNotaCreditoSoliConstantesFunciones.getTipoNotaCreditoSoliDescripcion(tiponotacreditosoliTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoNotaCreditoSoliForeignKeyGenerico(Long idTipoNotaCreditoSoliSeleccionado,JComboBox jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoNotaCreditoSoli  tiponotacreditosoliTemp=null;

			for(TipoNotaCreditoSoli tiponotacreditosoliAux:tiponotacreditosolisForeignKey) {
				if(tiponotacreditosoliAux.getId()!=null && tiponotacreditosoliAux.getId().equals(idTipoNotaCreditoSoliSeleccionado)) {
					tiponotacreditosoliTemp=tiponotacreditosoliAux;
					break;
				}
			}

			if(tiponotacreditosoliTemp!=null) {
				jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico.setSelectedItem(tiponotacreditosoliTemp);
			} else {
				if(jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico!=null && jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualResponsableForeignKey(Long idResponsableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(responsableTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setResponsable(responsableTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setSelectedItem(responsableTemp);
					}
				} else {
					//jComboBoxid_responsableNotaCreditoSoli.setSelectedItem(responsableTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdResponsable") || sFormularioTipoBusqueda.equals("Todos")){
					if(responsableTemp!=null && jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli!=null) {
						jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.setSelectedItem(responsableTemp);
					} else {
						if(jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli!=null) {
							//jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.setSelectedItem(responsableTemp);
							if(jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualResponsableForeignKeyDescripcion(Long idResponsableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}


			sDescripcion=ResponsableConstantesFunciones.getResponsableDescripcion(responsableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualResponsableForeignKeyGenerico(Long idResponsableSeleccionado,JComboBox jComboBoxid_responsableNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(responsableTemp!=null) {
				jComboBoxid_responsableNotaCreditoSoliGenerico.setSelectedItem(responsableTemp);
			} else {
				if(jComboBoxid_responsableNotaCreditoSoliGenerico!=null && jComboBoxid_responsableNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_responsableNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoNotaCreditoSoliForeignKey(Long idEstadoNotaCreditoSoliSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditosoliTemp=null;

			for(EstadoNotaCredito estadonotacreditosoliAux:estadonotacreditosolisForeignKey) {
				if(estadonotacreditosoliAux.getId()!=null && estadonotacreditosoliAux.getId().equals(idEstadoNotaCreditoSoliSeleccionado)) {
					estadonotacreditosoliTemp=estadonotacreditosoliAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadonotacreditosoliTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setEstadoNotaCreditoSoli(estadonotacreditosoliTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedItem(estadonotacreditosoliTemp);
					}
				} else {
					//jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedItem(estadonotacreditosoliTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoNotaCreditoSoli") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadonotacreditosoliTemp!=null && jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli!=null) {
						jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(estadonotacreditosoliTemp);
					} else {
						if(jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli!=null) {
							//jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(estadonotacreditosoliTemp);
							if(jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoNotaCreditoSoliForeignKeyDescripcion(Long idEstadoNotaCreditoSoliSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoNotaCredito  estadonotacreditosoliTemp=null;

			for(EstadoNotaCredito estadonotacreditosoliAux:estadonotacreditosolisForeignKey) {
				if(estadonotacreditosoliAux.getId()!=null && estadonotacreditosoliAux.getId().equals(idEstadoNotaCreditoSoliSeleccionado)) {
					estadonotacreditosoliTemp=estadonotacreditosoliAux;
					break;
				}
			}


			sDescripcion=EstadoNotaCreditoConstantesFunciones.getEstadoNotaCreditoDescripcion(estadonotacreditosoliTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoNotaCreditoSoliForeignKeyGenerico(Long idEstadoNotaCreditoSoliSeleccionado,JComboBox jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditosoliTemp=null;

			for(EstadoNotaCredito estadonotacreditosoliAux:estadonotacreditosolisForeignKey) {
				if(estadonotacreditosoliAux.getId()!=null && estadonotacreditosoliAux.getId().equals(idEstadoNotaCreditoSoliSeleccionado)) {
					estadonotacreditosoliTemp=estadonotacreditosoliAux;
					break;
				}
			}

			if(estadonotacreditosoliTemp!=null) {
				jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico.setSelectedItem(estadonotacreditosoliTemp);
			} else {
				if(jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico!=null && jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoNotaCreditoSoli.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoNotaCreditoSoliGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoNotaCreditoSoliGenerico!=null && jComboBoxid_centro_costoNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorNotaCreditoSoli.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli!=null) {
						jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli!=null) {
							//jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorNotaCreditoSoliGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorNotaCreditoSoliGenerico!=null && jComboBoxid_vendedorNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_vendedorNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioNotaCreditoSoliGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioNotaCreditoSoliGenerico!=null && jComboBoxid_tipo_cambioNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransporteForeignKey(Long idTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transporteTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setTransporte(transporteTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setSelectedItem(transporteTemp);
					}
				} else {
					//jComboBoxid_transporteNotaCreditoSoli.setSelectedItem(transporteTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransporteForeignKeyDescripcion(Long idTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}


			sDescripcion=TransporteConstantesFunciones.getTransporteDescripcion(transporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransporteForeignKeyGenerico(Long idTransporteSeleccionado,JComboBox jComboBoxid_transporteNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(transporteTemp!=null) {
				jComboBoxid_transporteNotaCreditoSoliGenerico.setSelectedItem(transporteTemp);
			} else {
				if(jComboBoxid_transporteNotaCreditoSoliGenerico!=null && jComboBoxid_transporteNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_transporteNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.notacreditosoli!=null) {
						this.notacreditosoli.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaNotaCreditoSoli.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){
					if(transportistaTemp!=null && jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli!=null) {
						jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.setSelectedItem(transportistaTemp);
					} else {
						if(jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli!=null) {
							//jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.setSelectedItem(transportistaTemp);
							if(jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.getItemCount()>0) {
								jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaNotaCreditoSoliGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaNotaCreditoSoliGenerico!=null && jComboBoxid_transportistaNotaCreditoSoliGenerico.getItemCount()>0) {
					jComboBoxid_transportistaNotaCreditoSoliGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_empresaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaNotaCreditoSoliGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				notacreditosoli.setid_empresa(empresaAux.getId());
				notacreditosoli.setempresa_descripcion(NotaCreditoSoliConstantesFunciones.getEmpresaDescripcion(empresaAux));
				notacreditosoli.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_sucursalNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalNotaCreditoSoliGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				notacreditosoli.setid_sucursal(sucursalAux.getId());
				notacreditosoli.setsucursal_descripcion(NotaCreditoSoliConstantesFunciones.getSucursalDescripcion(sucursalAux));
				notacreditosoli.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_ejercicioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioNotaCreditoSoliGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				notacreditosoli.setid_ejercicio(ejercicioAux.getId());
				notacreditosoli.setejercicio_descripcion(NotaCreditoSoliConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				notacreditosoli.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_periodoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoNotaCreditoSoliGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				notacreditosoli.setid_periodo(periodoAux.getId());
				notacreditosoli.setperiodo_descripcion(NotaCreditoSoliConstantesFunciones.getPeriodoDescripcion(periodoAux));
				notacreditosoli.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_anioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioNotaCreditoSoliGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				notacreditosoli.setid_anio(anioAux.getId());
				notacreditosoli.setanio_descripcion(NotaCreditoSoliConstantesFunciones.getAnioDescripcion(anioAux));
				notacreditosoli.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_mesNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesNotaCreditoSoliGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				notacreditosoli.setid_mes(mesAux.getId());
				notacreditosoli.setmes_descripcion(NotaCreditoSoliConstantesFunciones.getMesDescripcion(mesAux));
				notacreditosoli.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_usuarioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioNotaCreditoSoliGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				notacreditosoli.setid_usuario(usuarioAux.getId());
				notacreditosoli.setusuario_descripcion(NotaCreditoSoliConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				notacreditosoli.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_monedaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaNotaCreditoSoliGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				notacreditosoli.setid_moneda(monedaAux.getId());
				notacreditosoli.setmoneda_descripcion(NotaCreditoSoliConstantesFunciones.getMonedaDescripcion(monedaAux));
				notacreditosoli.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_empleadoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoNotaCreditoSoliGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				notacreditosoli.setid_empleado(empleadoAux.getId());
				notacreditosoli.setempleado_descripcion(NotaCreditoSoliConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				notacreditosoli.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_formatoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoNotaCreditoSoliGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				notacreditosoli.setid_formato(formatoAux.getId());
				notacreditosoli.setformato_descripcion(NotaCreditoSoliConstantesFunciones.getFormatoDescripcion(formatoAux));
				notacreditosoli.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_tipo_precioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioNotaCreditoSoliGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				notacreditosoli.setid_tipo_precio(tipoprecioAux.getId());
				notacreditosoli.settipoprecio_descripcion(NotaCreditoSoliConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				notacreditosoli.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_clienteNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteNotaCreditoSoliGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				notacreditosoli.setid_cliente(clienteAux.getId());
				notacreditosoli.setcliente_descripcion(NotaCreditoSoliConstantesFunciones.getClienteDescripcion(clienteAux));
				notacreditosoli.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_facturaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaNotaCreditoSoliGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				notacreditosoli.setid_factura(facturaAux.getId());
				notacreditosoli.setfactura_descripcion(NotaCreditoSoliConstantesFunciones.getFacturaDescripcion(facturaAux));
				notacreditosoli.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoNotaCreditoSoliForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoNotaCreditoSoli  tiponotacreditosoliAux=new TipoNotaCreditoSoli();

			if(jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico==null) {
				tiponotacreditosoliAux=(TipoNotaCreditoSoli)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.getSelectedItem();
			} else {
				tiponotacreditosoliAux=(TipoNotaCreditoSoli)jComboBoxid_tipo_nota_credito_soliNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(tiponotacreditosoliAux!=null && tiponotacreditosoliAux.getId()!=null) {
				notacreditosoli.setid_tipo_nota_credito_soli(tiponotacreditosoliAux.getId());
				notacreditosoli.settiponotacreditosoli_descripcion(NotaCreditoSoliConstantesFunciones.getTipoNotaCreditoSoliDescripcion(tiponotacreditosoliAux));
				notacreditosoli.setTipoNotaCreditoSoli(tiponotacreditosoliAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarResponsableForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_responsableNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Responsable  responsableAux=new Responsable();

			if(jComboBoxid_responsableNotaCreditoSoliGenerico==null) {
				responsableAux=(Responsable)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.getSelectedItem();
			} else {
				responsableAux=(Responsable)jComboBoxid_responsableNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(responsableAux!=null) {
				notacreditosoli.setid_responsable(responsableAux.getId());
				notacreditosoli.setresponsable_descripcion(NotaCreditoSoliConstantesFunciones.getResponsableDescripcion(responsableAux));
				notacreditosoli.setResponsable(responsableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoNotaCreditoSoliForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditoAux=new EstadoNotaCredito();

			if(jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico==null) {
				estadonotacreditoAux=(EstadoNotaCredito)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.getSelectedItem();
			} else {
				estadonotacreditoAux=(EstadoNotaCredito)jComboBoxid_estado_nota_creditoNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(estadonotacreditoAux!=null && estadonotacreditoAux.getId()!=null) {
				notacreditosoli.setid_estado_nota_credito(estadonotacreditoAux.getId());
				notacreditosoli.setestadonotacreditosoli_descripcion(NotaCreditoSoliConstantesFunciones.getEstadoNotaCreditoSoliDescripcion(estadonotacreditoAux));
				notacreditosoli.setEstadoNotaCreditoSoli(estadonotacreditoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_centro_costoNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoNotaCreditoSoliGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				notacreditosoli.setid_centro_costo(centrocostoAux.getId());
				notacreditosoli.setcentrocosto_descripcion(NotaCreditoSoliConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				notacreditosoli.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_vendedorNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorNotaCreditoSoliGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(vendedorAux!=null) {
				notacreditosoli.setid_vendedor(vendedorAux.getId());
				notacreditosoli.setvendedor_descripcion(NotaCreditoSoliConstantesFunciones.getVendedorDescripcion(vendedorAux));
				notacreditosoli.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_tipo_cambioNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioNotaCreditoSoliGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				notacreditosoli.setid_tipo_cambio(tipocambioAux.getId());
				notacreditosoli.settipocambio_descripcion(NotaCreditoSoliConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				notacreditosoli.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransporteForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_transporteNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Transporte  transporteAux=new Transporte();

			if(jComboBoxid_transporteNotaCreditoSoliGenerico==null) {
				transporteAux=(Transporte)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.getSelectedItem();
			} else {
				transporteAux=(Transporte)jComboBoxid_transporteNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(transporteAux!=null) {
				notacreditosoli.setid_transporte(transporteAux.getId());
				notacreditosoli.settransporte_descripcion(NotaCreditoSoliConstantesFunciones.getTransporteDescripcion(transporteAux));
				notacreditosoli.setTransporte(transporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(NotaCreditoSoli notacreditosoli,JComboBox jComboBoxid_transportistaNotaCreditoSoliGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaNotaCreditoSoliGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaNotaCreditoSoliGenerico.getSelectedItem();
			}

			if(transportistaAux!=null) {
				notacreditosoli.setid_transportista(transportistaAux.getId());
				notacreditosoli.settransportista_descripcion(NotaCreditoSoliConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				notacreditosoli.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.addItem(empleado);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.addItem(cliente);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.addItem(factura);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoNotaCreditoSolisForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoNotaCreditoSoli=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.removeAllItems();

							for(TipoNotaCreditoSoli tiponotacreditosoli:this.tiponotacreditosolisForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.addItem(tiponotacreditosoli);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoNotaCreditoSoli") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.removeAllItems();

							for(TipoNotaCreditoSoli tiponotacreditosoli:this.tiponotacreditosolisForeignKey) {
								this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.addItem(tiponotacreditosoli);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameResponsablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingResponsable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.removeAllItems();

							for(Responsable responsable:this.responsablesForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.addItem(responsable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdResponsable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.removeAllItems();

							for(Responsable responsable:this.responsablesForeignKey) {
								this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.addItem(responsable);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoNotaCreditoSolisForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoNotaCredito=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.removeAllItems();

							for(EstadoNotaCredito estadonotacreditosoli:this.estadonotacreditosolisForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.addItem(estadonotacreditosoli);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoNotaCreditoSoli") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.removeAllItems();

							for(EstadoNotaCredito estadonotacreditosoli:this.estadonotacreditosolisForeignKey) {
								this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.addItem(estadonotacreditosoli);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.addItem(vendedor);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.removeAllItems();

							for(Transporte transporte:this.transportesForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.addItem(transporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { 
					}

					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.addItem(transportista);
							}
						}

						if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoNotaCreditoSoliForeignKey(TipoNotaCreditoSoli tiponotacreditosoli,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedItem(tiponotacreditosoli);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(tiponotacreditosoli);
						} else {
							this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameResponsableForeignKey(Responsable responsable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setSelectedItem(responsable);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.setSelectedItem(responsable);
						} else {
							this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoNotaCreditoSoliForeignKey(EstadoNotaCredito estadonotacreditosoli,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedItem(estadonotacreditosoli);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.setSelectedItem(estadonotacreditosoli);
						} else {
							this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransporteForeignKey(Transporte transporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setSelectedItem(transporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.setSelectedItem(transportista);
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesNotaCreditoSoli() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			NotaCreditoSoliConstantesFunciones.refrescarForeignKeysDescripcionesNotaCreditoSoli(this.notacreditosoliLogic.getNotaCreditoSolis());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			NotaCreditoSoliConstantesFunciones.refrescarForeignKeysDescripcionesNotaCreditoSoli(this.notacreditosolis);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(TipoNotaCreditoSoli.class));
		classes.add(new Classe(Responsable.class));
		classes.add(new Classe(EstadoNotaCredito.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(TipoCambio.class));
		classes.add(new Classe(Transporte.class));
		classes.add(new Classe(Transportista.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//notacreditosoliLogic.setNotaCreditoSolis(this.notacreditosolis);
			notacreditosoliLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public NotaCreditoSoliParameterReturnGeneral getNotaCreditoSoliParameterGeneral() {
		return this.notacreditosoliParameterGeneral;
	}
	
	public void setNotaCreditoSoliParameterGeneral(NotaCreditoSoliParameterReturnGeneral notacreditosoliParameterGeneral) {
		this.notacreditosoliParameterGeneral = notacreditosoliParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoNotaCreditoSoli() {
		return isPermisoTodoNotaCreditoSoli;
	}

	public void setIsPermisoTodoNotaCreditoSoli(Boolean isPermisoTodoNotaCreditoSoli) {
		this.isPermisoTodoNotaCreditoSoli = isPermisoTodoNotaCreditoSoli;
	}

	public Boolean getIsPermisoNuevoNotaCreditoSoli() {
		return isPermisoNuevoNotaCreditoSoli;
	}

	public void setIsPermisoNuevoNotaCreditoSoli(Boolean isPermisoNuevoNotaCreditoSoli) {
		this.isPermisoNuevoNotaCreditoSoli = isPermisoNuevoNotaCreditoSoli;
	}

	public Boolean getIsPermisoActualizarNotaCreditoSoli() {
		return isPermisoActualizarNotaCreditoSoli;
	}

	public void setIsPermisoActualizarNotaCreditoSoli(Boolean isPermisoActualizarNotaCreditoSoli) {
		this.isPermisoActualizarNotaCreditoSoli = isPermisoActualizarNotaCreditoSoli;
	}

	public Boolean getIsPermisoEliminarNotaCreditoSoli() {
		return isPermisoEliminarNotaCreditoSoli;
	}

	public void setIsPermisoEliminarNotaCreditoSoli(Boolean isPermisoEliminarNotaCreditoSoli) {
		this.isPermisoEliminarNotaCreditoSoli = isPermisoEliminarNotaCreditoSoli;
	}

	public Boolean getIsPermisoGuardarCambiosNotaCreditoSoli() {
		return isPermisoGuardarCambiosNotaCreditoSoli;
	}

	public void setIsPermisoGuardarCambiosNotaCreditoSoli(Boolean isPermisoGuardarCambiosNotaCreditoSoli) {
		this.isPermisoGuardarCambiosNotaCreditoSoli = isPermisoGuardarCambiosNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoConsultaNotaCreditoSoli() {
		return isPermisoConsultaNotaCreditoSoli;
	}

	public void setIsPermisoConsultaNotaCreditoSoli(Boolean isPermisoConsultaNotaCreditoSoli) {
		this.isPermisoConsultaNotaCreditoSoli = isPermisoConsultaNotaCreditoSoli;
	}

	public Boolean getIsPermisoBusquedaNotaCreditoSoli() {
		return isPermisoBusquedaNotaCreditoSoli;
	}

	public void setIsPermisoBusquedaNotaCreditoSoli(Boolean isPermisoBusquedaNotaCreditoSoli) {
		this.isPermisoBusquedaNotaCreditoSoli = isPermisoBusquedaNotaCreditoSoli;
	}

	public Boolean getIsPermisoReporteNotaCreditoSoli() {
		return isPermisoReporteNotaCreditoSoli;
	}

	public void setIsPermisoReporteNotaCreditoSoli(Boolean isPermisoReporteNotaCreditoSoli) {
		this.isPermisoReporteNotaCreditoSoli = isPermisoReporteNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoPaginacionMedioNotaCreditoSoli() {
		return isPermisoPaginacionMedioNotaCreditoSoli;
	}

	public void setIsPermisoPaginacionMedioNotaCreditoSoli(Boolean isPermisoPaginacionMedioNotaCreditoSoli) {
		this.isPermisoPaginacionMedioNotaCreditoSoli = isPermisoPaginacionMedioNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoPaginacionTodoNotaCreditoSoli() {
		return isPermisoPaginacionTodoNotaCreditoSoli;
	}

	public void setIsPermisoPaginacionTodoNotaCreditoSoli(Boolean isPermisoPaginacionTodoNotaCreditoSoli) {
		this.isPermisoPaginacionTodoNotaCreditoSoli = isPermisoPaginacionTodoNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoPaginacionAltoNotaCreditoSoli() {
		return isPermisoPaginacionAltoNotaCreditoSoli;
	}

	public void setIsPermisoPaginacionAltoNotaCreditoSoli(Boolean isPermisoPaginacionAltoNotaCreditoSoli) {
		this.isPermisoPaginacionAltoNotaCreditoSoli = isPermisoPaginacionAltoNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoCopiarNotaCreditoSoli() {
		return isPermisoCopiarNotaCreditoSoli;
	}

	public void setIsPermisoCopiarNotaCreditoSoli(Boolean isPermisoCopiarNotaCreditoSoli) {
		this.isPermisoCopiarNotaCreditoSoli = isPermisoCopiarNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoVerFormNotaCreditoSoli() {
		return isPermisoVerFormNotaCreditoSoli;
	}

	public void setIsPermisoVerFormNotaCreditoSoli(Boolean isPermisoVerFormNotaCreditoSoli) {
		this.isPermisoVerFormNotaCreditoSoli = isPermisoVerFormNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoDuplicarNotaCreditoSoli() {
		return isPermisoDuplicarNotaCreditoSoli;
	}

	public void setIsPermisoDuplicarNotaCreditoSoli(Boolean isPermisoDuplicarNotaCreditoSoli) {
		this.isPermisoDuplicarNotaCreditoSoli = isPermisoDuplicarNotaCreditoSoli;
	}
	
	public Boolean getIsPermisoOrdenNotaCreditoSoli() {
		return isPermisoOrdenNotaCreditoSoli;
	}

	public void setIsPermisoOrdenNotaCreditoSoli(Boolean isPermisoOrdenNotaCreditoSoli) {
		this.isPermisoOrdenNotaCreditoSoli = isPermisoOrdenNotaCreditoSoli;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoNotaCreditoSoli() {
		return isVisibilidadCeldaNuevoNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaNuevoNotaCreditoSoli(Boolean isVisibilidadCeldaNuevoNotaCreditoSoli) {
		this.isVisibilidadCeldaNuevoNotaCreditoSoli = isVisibilidadCeldaNuevoNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarNotaCreditoSoli() {
		return isVisibilidadCeldaDuplicarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaDuplicarNotaCreditoSoli(Boolean isVisibilidadCeldaDuplicarNotaCreditoSoli) {
		this.isVisibilidadCeldaDuplicarNotaCreditoSoli = isVisibilidadCeldaDuplicarNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarNotaCreditoSoli() {
		return isVisibilidadCeldaCopiarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaCopiarNotaCreditoSoli(Boolean isVisibilidadCeldaCopiarNotaCreditoSoli) {
		this.isVisibilidadCeldaCopiarNotaCreditoSoli = isVisibilidadCeldaCopiarNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormNotaCreditoSoli() {
		return isVisibilidadCeldaVerFormNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaVerFormNotaCreditoSoli(Boolean isVisibilidadCeldaVerFormNotaCreditoSoli) {
		this.isVisibilidadCeldaVerFormNotaCreditoSoli = isVisibilidadCeldaVerFormNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenNotaCreditoSoli() {
		return isVisibilidadCeldaOrdenNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaOrdenNotaCreditoSoli(Boolean isVisibilidadCeldaOrdenNotaCreditoSoli) {
		this.isVisibilidadCeldaOrdenNotaCreditoSoli = isVisibilidadCeldaOrdenNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesNotaCreditoSoli() {
		return isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesNotaCreditoSoli(Boolean isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli) {
		this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli = isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaModificarNotaCreditoSoli() {
		return isVisibilidadCeldaModificarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaModificarNotaCreditoSoli(Boolean isVisibilidadCeldaModificarNotaCreditoSoli) {
		this.isVisibilidadCeldaModificarNotaCreditoSoli = isVisibilidadCeldaModificarNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarNotaCreditoSoli() {
		return isVisibilidadCeldaActualizarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaActualizarNotaCreditoSoli(Boolean isVisibilidadCeldaActualizarNotaCreditoSoli) {
		this.isVisibilidadCeldaActualizarNotaCreditoSoli = isVisibilidadCeldaActualizarNotaCreditoSoli;
	}

	public Boolean getIsVisibilidadCeldaEliminarNotaCreditoSoli() {
		return isVisibilidadCeldaEliminarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaEliminarNotaCreditoSoli(Boolean isVisibilidadCeldaEliminarNotaCreditoSoli) {
		this.isVisibilidadCeldaEliminarNotaCreditoSoli = isVisibilidadCeldaEliminarNotaCreditoSoli;
	}

	public Boolean getIsVisibilidadCeldaCancelarNotaCreditoSoli() {
		return isVisibilidadCeldaCancelarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaCancelarNotaCreditoSoli(Boolean isVisibilidadCeldaCancelarNotaCreditoSoli) {
		this.isVisibilidadCeldaCancelarNotaCreditoSoli = isVisibilidadCeldaCancelarNotaCreditoSoli;
	}

	public Boolean getIsVisibilidadCeldaGuardarNotaCreditoSoli() {
		return isVisibilidadCeldaGuardarNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaGuardarNotaCreditoSoli(Boolean isVisibilidadCeldaGuardarNotaCreditoSoli) {
		this.isVisibilidadCeldaGuardarNotaCreditoSoli = isVisibilidadCeldaGuardarNotaCreditoSoli;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosNotaCreditoSoli() {
		return isVisibilidadCeldaGuardarCambiosNotaCreditoSoli;
	}

	public void setIsVisibilidadCeldaGuardarCambiosNotaCreditoSoli(Boolean isVisibilidadCeldaGuardarCambiosNotaCreditoSoli) {
		this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli = isVisibilidadCeldaGuardarCambiosNotaCreditoSoli;
	}
		
	public NotaCreditoSoliSessionBean getnotacreditosoliSessionBean() {
		return this.notacreditosoliSessionBean;
	}
	
	public void setnotacreditosoliSessionBean(NotaCreditoSoliSessionBean notacreditosoliSessionBean) {
		this.notacreditosoliSessionBean=notacreditosoliSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoNotaCreditoSoli() {
		return this.isVisibilidadFK_IdEstadoNotaCreditoSoli;
	}

	public void setisVisibilidadFK_IdEstadoNotaCreditoSoli(Boolean isVisibilidadFK_IdEstadoNotaCreditoSoli) {
		this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isVisibilidadFK_IdEstadoNotaCreditoSoli;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdResponsable() {
		return this.isVisibilidadFK_IdResponsable;
	}

	public void setisVisibilidadFK_IdResponsable(Boolean isVisibilidadFK_IdResponsable) {
		this.isVisibilidadFK_IdResponsable=isVisibilidadFK_IdResponsable;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	public Boolean getisVisibilidadFK_IdTipoNotaCreditoSoli() {
		return this.isVisibilidadFK_IdTipoNotaCreditoSoli;
	}

	public void setisVisibilidadFK_IdTipoNotaCreditoSoli(Boolean isVisibilidadFK_IdTipoNotaCreditoSoli) {
		this.isVisibilidadFK_IdTipoNotaCreditoSoli=isVisibilidadFK_IdTipoNotaCreditoSoli;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdTransporte() {
		return this.isVisibilidadFK_IdTransporte;
	}

	public void setisVisibilidadFK_IdTransporte(Boolean isVisibilidadFK_IdTransporte) {
		this.isVisibilidadFK_IdTransporte=isVisibilidadFK_IdTransporte;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(NotaCreditoSoli notacreditosoli)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(notacreditosoli,null);
				this.setActualParaGuardarSucursalForeignKey(notacreditosoli,null);
				this.setActualParaGuardarEjercicioForeignKey(notacreditosoli,null);
				this.setActualParaGuardarPeriodoForeignKey(notacreditosoli,null);
				this.setActualParaGuardarAnioForeignKey(notacreditosoli,null);
				this.setActualParaGuardarMesForeignKey(notacreditosoli,null);
				this.setActualParaGuardarUsuarioForeignKey(notacreditosoli,null);
				this.setActualParaGuardarMonedaForeignKey(notacreditosoli,null);
				this.setActualParaGuardarEmpleadoForeignKey(notacreditosoli,null);
				this.setActualParaGuardarFormatoForeignKey(notacreditosoli,null);
				this.setActualParaGuardarTipoPrecioForeignKey(notacreditosoli,null);
				this.setActualParaGuardarClienteForeignKey(notacreditosoli,null);
				this.setActualParaGuardarFacturaForeignKey(notacreditosoli,null);
				this.setActualParaGuardarTipoNotaCreditoSoliForeignKey(notacreditosoli,null);
				this.setActualParaGuardarResponsableForeignKey(notacreditosoli,null);
				this.setActualParaGuardarEstadoNotaCreditoSoliForeignKey(notacreditosoli,null);
				this.setActualParaGuardarCentroCostoForeignKey(notacreditosoli,null);
				this.setActualParaGuardarVendedorForeignKey(notacreditosoli,null);
				this.setActualParaGuardarTipoCambioForeignKey(notacreditosoli,null);
				this.setActualParaGuardarTransporteForeignKey(notacreditosoli,null);
				this.setActualParaGuardarTransportistaForeignKey(notacreditosoli,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(NotaCreditoSoli notacreditosoli,NotaCreditoSoli notacreditosoliAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalNotaCreditoSoli(notacreditosoli);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		notacreditosoliAux.setId(notacreditosoli.getId());
		notacreditosoliAux.setVersionRow(notacreditosoli.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessNotaCreditoSoli();
		
			int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = notacreditosoliValidator.getInvalidValues(this.notacreditosoli);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			notacreditosoliLogic.setDatosCliente(datosCliente);
			notacreditosoliLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				notacreditosoliAux=new  NotaCreditoSoli();
				
				notacreditosoliAux.setIsNew(true);
				notacreditosoliAux.setIsChanged(true);
				
				notacreditosoliAux.setNotaCreditoSoliOriginal(this.notacreditosoli);
				
				notacreditosoliAux.setId(this.notacreditosoli.getId());	
				notacreditosoliAux.setVersionRow(this.notacreditosoli.getVersionRow());	
				notacreditosoliAux.setid_empresa(this.notacreditosoli.getid_empresa());	
				notacreditosoliAux.setid_sucursal(this.notacreditosoli.getid_sucursal());	
				notacreditosoliAux.setid_ejercicio(this.notacreditosoli.getid_ejercicio());	
				notacreditosoliAux.setid_periodo(this.notacreditosoli.getid_periodo());	
				notacreditosoliAux.setid_anio(this.notacreditosoli.getid_anio());	
				notacreditosoliAux.setid_mes(this.notacreditosoli.getid_mes());	
				notacreditosoliAux.setid_usuario(this.notacreditosoli.getid_usuario());	
				notacreditosoliAux.setcodigo(this.notacreditosoli.getcodigo());	
				notacreditosoliAux.setnumero(this.notacreditosoli.getnumero());	
				notacreditosoliAux.setfecha_emision(this.notacreditosoli.getfecha_emision());	
				notacreditosoliAux.setnumero_dias(this.notacreditosoli.getnumero_dias());	
				notacreditosoliAux.setfecha_vencimiento(this.notacreditosoli.getfecha_vencimiento());	
				notacreditosoliAux.setid_moneda(this.notacreditosoli.getid_moneda());	
				notacreditosoliAux.setid_empleado(this.notacreditosoli.getid_empleado());	
				notacreditosoliAux.setcotizacion(this.notacreditosoli.getcotizacion());	
				
				if(this.notacreditosoli.getid_formato()!=null && this.notacreditosoli.getid_formato()>0L) {
					notacreditosoliAux.setid_formato(this.notacreditosoli.getid_formato());
				} else {
					notacreditosoliAux.setid_formato(null);
				}	
				notacreditosoliAux.setid_tipo_precio(this.notacreditosoli.getid_tipo_precio());	
				notacreditosoliAux.setid_cliente(this.notacreditosoli.getid_cliente());	
				notacreditosoliAux.setid_factura(this.notacreditosoli.getid_factura());	
				notacreditosoliAux.setdireccion(this.notacreditosoli.getdireccion());	
				notacreditosoliAux.settelefono(this.notacreditosoli.gettelefono());	
				notacreditosoliAux.setruc(this.notacreditosoli.getruc());	
				notacreditosoliAux.setid_tipo_nota_credito_soli(this.notacreditosoli.getid_tipo_nota_credito_soli());	
				
				if(this.notacreditosoli.getid_responsable()!=null && this.notacreditosoli.getid_responsable()>0L) {
					notacreditosoliAux.setid_responsable(this.notacreditosoli.getid_responsable());
				} else {
					notacreditosoliAux.setid_responsable(null);
				}	
				notacreditosoliAux.setid_estado_nota_credito(this.notacreditosoli.getid_estado_nota_credito());	
				notacreditosoliAux.setdescripcion(this.notacreditosoli.getdescripcion());	
				notacreditosoliAux.setpenalizado(this.notacreditosoli.getpenalizado());	
				notacreditosoliAux.setdescuento_porcentaje(this.notacreditosoli.getdescuento_porcentaje());	
				notacreditosoliAux.settotal_iva(this.notacreditosoli.gettotal_iva());	
				notacreditosoliAux.setsuman(this.notacreditosoli.getsuman());	
				notacreditosoliAux.setdescuento_valor(this.notacreditosoli.getdescuento_valor());	
				notacreditosoliAux.settotal_sin_iva(this.notacreditosoli.gettotal_sin_iva());	
				notacreditosoliAux.setdescuento_general(this.notacreditosoli.getdescuento_general());	
				notacreditosoliAux.setflete(this.notacreditosoli.getflete());	
				notacreditosoliAux.settotal(this.notacreditosoli.gettotal());	
				notacreditosoliAux.setsub_total(this.notacreditosoli.getsub_total());	
				notacreditosoliAux.setotro(this.notacreditosoli.getotro());	
				notacreditosoliAux.setiva(this.notacreditosoli.getiva());	
				notacreditosoliAux.setfinanciamiento(this.notacreditosoli.getfinanciamiento());	
				notacreditosoliAux.setotro_valor(this.notacreditosoli.getotro_valor());	
				notacreditosoliAux.setretencion(this.notacreditosoli.getretencion());	
				notacreditosoliAux.setice(this.notacreditosoli.getice());	
				notacreditosoliAux.setfecha(this.notacreditosoli.getfecha());	
				
				if(this.notacreditosoli.getid_centro_costo()!=null && this.notacreditosoli.getid_centro_costo()>0L) {
					notacreditosoliAux.setid_centro_costo(this.notacreditosoli.getid_centro_costo());
				} else {
					notacreditosoliAux.setid_centro_costo(null);
				}	
				
				if(this.notacreditosoli.getid_vendedor()!=null && this.notacreditosoli.getid_vendedor()>0L) {
					notacreditosoliAux.setid_vendedor(this.notacreditosoli.getid_vendedor());
				} else {
					notacreditosoliAux.setid_vendedor(null);
				}	
				notacreditosoliAux.setid_tipo_cambio(this.notacreditosoli.getid_tipo_cambio());	
				
				if(this.notacreditosoli.getid_transporte()!=null && this.notacreditosoli.getid_transporte()>0L) {
					notacreditosoliAux.setid_transporte(this.notacreditosoli.getid_transporte());
				} else {
					notacreditosoliAux.setid_transporte(null);
				}	
				
				if(this.notacreditosoli.getid_transportista()!=null && this.notacreditosoli.getid_transportista()>0L) {
					notacreditosoliAux.setid_transportista(this.notacreditosoli.getid_transportista());
				} else {
					notacreditosoliAux.setid_transportista(null);
				}	
				notacreditosoliAux.setfecha_cliente(this.notacreditosoli.getfecha_cliente());	
				notacreditosoliAux.setfecha_autorizacion(this.notacreditosoli.getfecha_autorizacion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditosoliAux,notacreditosolis);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.saveNotaCreditoSolis();//WithConnection
						//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);
					
					this.refrescarForeignKeysDescripcionesNotaCreditoSoli();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis.addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditosoliLogic.saveNotaCreditoSoliRelaciones(notacreditosoliAux,this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());//WithConnection
								//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.setDetaNotaCreditoSolis(new ArrayList<DetaNotaCreditoSoli>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis= new ArrayList<DetaNotaCreditoSoli>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditosoliAux.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditosoliAux,notacreditosolis);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				notacreditosoliAux=new  NotaCreditoSoli();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado() 
					|| (this.notacreditosoliSessionBean.getEsGuardarRelacionado() && this.notacreditosoli.getId()>=0)) {
						
					notacreditosoliAux.setIsNew(false);
				}
				
				notacreditosoliAux.setIsDeleted(false);
			
				notacreditosoliAux.setId(this.notacreditosoli.getId());	
				notacreditosoliAux.setVersionRow(this.notacreditosoli.getVersionRow());	
				notacreditosoliAux.setid_empresa(this.notacreditosoli.getid_empresa());	
				notacreditosoliAux.setid_sucursal(this.notacreditosoli.getid_sucursal());	
				notacreditosoliAux.setid_ejercicio(this.notacreditosoli.getid_ejercicio());	
				notacreditosoliAux.setid_periodo(this.notacreditosoli.getid_periodo());	
				notacreditosoliAux.setid_anio(this.notacreditosoli.getid_anio());	
				notacreditosoliAux.setid_mes(this.notacreditosoli.getid_mes());	
				notacreditosoliAux.setid_usuario(this.notacreditosoli.getid_usuario());	
				notacreditosoliAux.setcodigo(this.notacreditosoli.getcodigo());	
				notacreditosoliAux.setnumero(this.notacreditosoli.getnumero());	
				notacreditosoliAux.setfecha_emision(this.notacreditosoli.getfecha_emision());	
				notacreditosoliAux.setnumero_dias(this.notacreditosoli.getnumero_dias());	
				notacreditosoliAux.setfecha_vencimiento(this.notacreditosoli.getfecha_vencimiento());	
				notacreditosoliAux.setid_moneda(this.notacreditosoli.getid_moneda());	
				notacreditosoliAux.setid_empleado(this.notacreditosoli.getid_empleado());	
				notacreditosoliAux.setcotizacion(this.notacreditosoli.getcotizacion());	
				
				if(this.notacreditosoli.getid_formato()!=null && this.notacreditosoli.getid_formato()>0L) {
					notacreditosoliAux.setid_formato(this.notacreditosoli.getid_formato());
				} else {
					notacreditosoliAux.setid_formato(null);
				}	
				notacreditosoliAux.setid_tipo_precio(this.notacreditosoli.getid_tipo_precio());	
				notacreditosoliAux.setid_cliente(this.notacreditosoli.getid_cliente());	
				notacreditosoliAux.setid_factura(this.notacreditosoli.getid_factura());	
				notacreditosoliAux.setdireccion(this.notacreditosoli.getdireccion());	
				notacreditosoliAux.settelefono(this.notacreditosoli.gettelefono());	
				notacreditosoliAux.setruc(this.notacreditosoli.getruc());	
				notacreditosoliAux.setid_tipo_nota_credito_soli(this.notacreditosoli.getid_tipo_nota_credito_soli());	
				
				if(this.notacreditosoli.getid_responsable()!=null && this.notacreditosoli.getid_responsable()>0L) {
					notacreditosoliAux.setid_responsable(this.notacreditosoli.getid_responsable());
				} else {
					notacreditosoliAux.setid_responsable(null);
				}	
				notacreditosoliAux.setid_estado_nota_credito(this.notacreditosoli.getid_estado_nota_credito());	
				notacreditosoliAux.setdescripcion(this.notacreditosoli.getdescripcion());	
				notacreditosoliAux.setpenalizado(this.notacreditosoli.getpenalizado());	
				notacreditosoliAux.setdescuento_porcentaje(this.notacreditosoli.getdescuento_porcentaje());	
				notacreditosoliAux.settotal_iva(this.notacreditosoli.gettotal_iva());	
				notacreditosoliAux.setsuman(this.notacreditosoli.getsuman());	
				notacreditosoliAux.setdescuento_valor(this.notacreditosoli.getdescuento_valor());	
				notacreditosoliAux.settotal_sin_iva(this.notacreditosoli.gettotal_sin_iva());	
				notacreditosoliAux.setdescuento_general(this.notacreditosoli.getdescuento_general());	
				notacreditosoliAux.setflete(this.notacreditosoli.getflete());	
				notacreditosoliAux.settotal(this.notacreditosoli.gettotal());	
				notacreditosoliAux.setsub_total(this.notacreditosoli.getsub_total());	
				notacreditosoliAux.setotro(this.notacreditosoli.getotro());	
				notacreditosoliAux.setiva(this.notacreditosoli.getiva());	
				notacreditosoliAux.setfinanciamiento(this.notacreditosoli.getfinanciamiento());	
				notacreditosoliAux.setotro_valor(this.notacreditosoli.getotro_valor());	
				notacreditosoliAux.setretencion(this.notacreditosoli.getretencion());	
				notacreditosoliAux.setice(this.notacreditosoli.getice());	
				notacreditosoliAux.setfecha(this.notacreditosoli.getfecha());	
				
				if(this.notacreditosoli.getid_centro_costo()!=null && this.notacreditosoli.getid_centro_costo()>0L) {
					notacreditosoliAux.setid_centro_costo(this.notacreditosoli.getid_centro_costo());
				} else {
					notacreditosoliAux.setid_centro_costo(null);
				}	
				
				if(this.notacreditosoli.getid_vendedor()!=null && this.notacreditosoli.getid_vendedor()>0L) {
					notacreditosoliAux.setid_vendedor(this.notacreditosoli.getid_vendedor());
				} else {
					notacreditosoliAux.setid_vendedor(null);
				}	
				notacreditosoliAux.setid_tipo_cambio(this.notacreditosoli.getid_tipo_cambio());	
				
				if(this.notacreditosoli.getid_transporte()!=null && this.notacreditosoli.getid_transporte()>0L) {
					notacreditosoliAux.setid_transporte(this.notacreditosoli.getid_transporte());
				} else {
					notacreditosoliAux.setid_transporte(null);
				}	
				
				if(this.notacreditosoli.getid_transportista()!=null && this.notacreditosoli.getid_transportista()>0L) {
					notacreditosoliAux.setid_transportista(this.notacreditosoli.getid_transportista());
				} else {
					notacreditosoliAux.setid_transportista(null);
				}	
				notacreditosoliAux.setfecha_cliente(this.notacreditosoli.getfecha_cliente());	
				notacreditosoliAux.setfecha_autorizacion(this.notacreditosoli.getfecha_autorizacion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditosoliAux,notacreditosolis);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.saveNotaCreditoSolis();//WithConnection
						//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);
					
					this.refrescarForeignKeysDescripcionesNotaCreditoSoli();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis.addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						}
						//ARCHITECTURE
						
						if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditosoliLogic.saveNotaCreditoSoliRelaciones(notacreditosoliAux,this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());//WithConnection
								//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.setDetaNotaCreditoSolis(new ArrayList<DetaNotaCreditoSoli>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis= new ArrayList<DetaNotaCreditoSoli>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditosoliAux.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditosoliAux,notacreditosolis);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacreditosoli,notacreditosoliAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				notacreditosoliAux=new  NotaCreditoSoli();
				
				notacreditosoliAux.setIsNew(false);
				notacreditosoliAux.setIsChanged(false);
				
				notacreditosoliAux.setIsDeleted(true);
				
				notacreditosoliAux.setId(this.notacreditosoli.getId());	
				notacreditosoliAux.setVersionRow(this.notacreditosoli.getVersionRow());	
				notacreditosoliAux.setid_empresa(this.notacreditosoli.getid_empresa());	
				notacreditosoliAux.setid_sucursal(this.notacreditosoli.getid_sucursal());	
				notacreditosoliAux.setid_ejercicio(this.notacreditosoli.getid_ejercicio());	
				notacreditosoliAux.setid_periodo(this.notacreditosoli.getid_periodo());	
				notacreditosoliAux.setid_anio(this.notacreditosoli.getid_anio());	
				notacreditosoliAux.setid_mes(this.notacreditosoli.getid_mes());	
				notacreditosoliAux.setid_usuario(this.notacreditosoli.getid_usuario());	
				notacreditosoliAux.setcodigo(this.notacreditosoli.getcodigo());	
				notacreditosoliAux.setnumero(this.notacreditosoli.getnumero());	
				notacreditosoliAux.setfecha_emision(this.notacreditosoli.getfecha_emision());	
				notacreditosoliAux.setnumero_dias(this.notacreditosoli.getnumero_dias());	
				notacreditosoliAux.setfecha_vencimiento(this.notacreditosoli.getfecha_vencimiento());	
				notacreditosoliAux.setid_moneda(this.notacreditosoli.getid_moneda());	
				notacreditosoliAux.setid_empleado(this.notacreditosoli.getid_empleado());	
				notacreditosoliAux.setcotizacion(this.notacreditosoli.getcotizacion());	
				
				if(this.notacreditosoli.getid_formato()!=null && this.notacreditosoli.getid_formato()>0L) {
					notacreditosoliAux.setid_formato(this.notacreditosoli.getid_formato());
				} else {
					notacreditosoliAux.setid_formato(null);
				}	
				notacreditosoliAux.setid_tipo_precio(this.notacreditosoli.getid_tipo_precio());	
				notacreditosoliAux.setid_cliente(this.notacreditosoli.getid_cliente());	
				notacreditosoliAux.setid_factura(this.notacreditosoli.getid_factura());	
				notacreditosoliAux.setdireccion(this.notacreditosoli.getdireccion());	
				notacreditosoliAux.settelefono(this.notacreditosoli.gettelefono());	
				notacreditosoliAux.setruc(this.notacreditosoli.getruc());	
				notacreditosoliAux.setid_tipo_nota_credito_soli(this.notacreditosoli.getid_tipo_nota_credito_soli());	
				
				if(this.notacreditosoli.getid_responsable()!=null && this.notacreditosoli.getid_responsable()>0L) {
					notacreditosoliAux.setid_responsable(this.notacreditosoli.getid_responsable());
				} else {
					notacreditosoliAux.setid_responsable(null);
				}	
				notacreditosoliAux.setid_estado_nota_credito(this.notacreditosoli.getid_estado_nota_credito());	
				notacreditosoliAux.setdescripcion(this.notacreditosoli.getdescripcion());	
				notacreditosoliAux.setpenalizado(this.notacreditosoli.getpenalizado());	
				notacreditosoliAux.setdescuento_porcentaje(this.notacreditosoli.getdescuento_porcentaje());	
				notacreditosoliAux.settotal_iva(this.notacreditosoli.gettotal_iva());	
				notacreditosoliAux.setsuman(this.notacreditosoli.getsuman());	
				notacreditosoliAux.setdescuento_valor(this.notacreditosoli.getdescuento_valor());	
				notacreditosoliAux.settotal_sin_iva(this.notacreditosoli.gettotal_sin_iva());	
				notacreditosoliAux.setdescuento_general(this.notacreditosoli.getdescuento_general());	
				notacreditosoliAux.setflete(this.notacreditosoli.getflete());	
				notacreditosoliAux.settotal(this.notacreditosoli.gettotal());	
				notacreditosoliAux.setsub_total(this.notacreditosoli.getsub_total());	
				notacreditosoliAux.setotro(this.notacreditosoli.getotro());	
				notacreditosoliAux.setiva(this.notacreditosoli.getiva());	
				notacreditosoliAux.setfinanciamiento(this.notacreditosoli.getfinanciamiento());	
				notacreditosoliAux.setotro_valor(this.notacreditosoli.getotro_valor());	
				notacreditosoliAux.setretencion(this.notacreditosoli.getretencion());	
				notacreditosoliAux.setice(this.notacreditosoli.getice());	
				notacreditosoliAux.setfecha(this.notacreditosoli.getfecha());	
				
				if(this.notacreditosoli.getid_centro_costo()!=null && this.notacreditosoli.getid_centro_costo()>0L) {
					notacreditosoliAux.setid_centro_costo(this.notacreditosoli.getid_centro_costo());
				} else {
					notacreditosoliAux.setid_centro_costo(null);
				}	
				
				if(this.notacreditosoli.getid_vendedor()!=null && this.notacreditosoli.getid_vendedor()>0L) {
					notacreditosoliAux.setid_vendedor(this.notacreditosoli.getid_vendedor());
				} else {
					notacreditosoliAux.setid_vendedor(null);
				}	
				notacreditosoliAux.setid_tipo_cambio(this.notacreditosoli.getid_tipo_cambio());	
				
				if(this.notacreditosoli.getid_transporte()!=null && this.notacreditosoli.getid_transporte()>0L) {
					notacreditosoliAux.setid_transporte(this.notacreditosoli.getid_transporte());
				} else {
					notacreditosoliAux.setid_transporte(null);
				}	
				
				if(this.notacreditosoli.getid_transportista()!=null && this.notacreditosoli.getid_transportista()>0L) {
					notacreditosoliAux.setid_transportista(this.notacreditosoli.getid_transportista());
				} else {
					notacreditosoliAux.setid_transportista(null);
				}	
				notacreditosoliAux.setfecha_cliente(this.notacreditosoli.getfecha_cliente());	
				notacreditosoliAux.setfecha_autorizacion(this.notacreditosoli.getfecha_autorizacion());	
				
				if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.notacreditosoliAux.getId()>=0) {	
						this.notacreditosolisEliminados.add(notacreditosoliAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditosoliAux,notacreditosolis);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.saveNotaCreditoSolis();//WithConnection
						//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis().addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis.addAll(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolisEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditosoliLogic.saveNotaCreditoSoliRelaciones(notacreditosoliAux,this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());//WithConnection
								//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.setDetaNotaCreditoSolis(new ArrayList<DetaNotaCreditoSoli>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis= new ArrayList<DetaNotaCreditoSoli>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditosoliAux.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
								|| this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(notacreditosoliAux,notacreditosoliLogic.getNotaCreditoSolis());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(notacreditosoliAux,notacreditosolis);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNotaCreditoSolis().addAll(this.notacreditosolisEliminados);
					
					notacreditosoliLogic.saveNotaCreditoSolis();//WithConnection
					//notacreditosoliLogic.getSetVersionRowNotaCreditoSolis();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesNotaCreditoSoli();
				
				this.notacreditosolisEliminados= new ArrayList<NotaCreditoSoli>();		
			}
			
			if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Solicitud Nota Credito GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.notacreditosoli=notacreditosoliAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessNotaCreditoSoli();
      	}
		
	}	
	
	public void actualizarRelaciones(NotaCreditoSoli notacreditosoliLocal) throws Exception {
		
		if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				notacreditosoliLocal.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());
			
			} else {
			
				notacreditosoliLocal.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosolis);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(NotaCreditoSoli notacreditosoliLocal) throws Exception {	
		if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				notacreditosoliLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				notacreditosoliLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				notacreditosoliLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				notacreditosoliLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				notacreditosoliLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				notacreditosoliLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				notacreditosoliLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				notacreditosoliLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				notacreditosoliLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				notacreditosoliLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				notacreditosoliLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				notacreditosoliLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				notacreditosoliLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoNotaCreditoSoliDetalleFormJInternalFrame.class)) {
				TipoNotaCreditoSoliBeanSwingJInternalFrame tiponotacreditosoliBeanSwingJInternalFrameLocal=(TipoNotaCreditoSoliBeanSwingJInternalFrame) ((TipoNotaCreditoSoliDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiponotacreditosoliBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoNotaCreditoSoli(tiponotacreditosoliBeanSwingJInternalFrameLocal.gettiponotacreditosoli(),true);
				tiponotacreditosoliBeanSwingJInternalFrameLocal.actualizarLista(tiponotacreditosoliBeanSwingJInternalFrameLocal.tiponotacreditosoli,this.tiponotacreditosolisForeignKey);

				tiponotacreditosoliBeanSwingJInternalFrameLocal.actualizarRelaciones(tiponotacreditosoliBeanSwingJInternalFrameLocal.tiponotacreditosoli);

				notacreditosoliLocal.setTipoNotaCreditoSoli(tiponotacreditosoliBeanSwingJInternalFrameLocal.tiponotacreditosoli);

				this.addItemDefectoCombosForeignKeyTipoNotaCreditoSoli();
				this.cargarCombosFrameTipoNotaCreditoSolisForeignKey("Formulario");
				this.setActualTipoNotaCreditoSoliForeignKey(tiponotacreditosoliBeanSwingJInternalFrameLocal.tiponotacreditosoli.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ResponsableDetalleFormJInternalFrame.class)) {
				ResponsableBeanSwingJInternalFrame responsableBeanSwingJInternalFrameLocal=(ResponsableBeanSwingJInternalFrame) ((ResponsableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				responsableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoResponsable(responsableBeanSwingJInternalFrameLocal.getresponsable(),true);
				responsableBeanSwingJInternalFrameLocal.actualizarLista(responsableBeanSwingJInternalFrameLocal.responsable,this.responsablesForeignKey);

				responsableBeanSwingJInternalFrameLocal.actualizarRelaciones(responsableBeanSwingJInternalFrameLocal.responsable);

				notacreditosoliLocal.setResponsable(responsableBeanSwingJInternalFrameLocal.responsable);

				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey("Formulario");
				this.setActualResponsableForeignKey(responsableBeanSwingJInternalFrameLocal.responsable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoNotaCreditoDetalleFormJInternalFrame.class)) {
				EstadoNotaCreditoBeanSwingJInternalFrame estadonotacreditosoliBeanSwingJInternalFrameLocal=(EstadoNotaCreditoBeanSwingJInternalFrame) ((EstadoNotaCreditoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadonotacreditosoliBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoNotaCredito(estadonotacreditosoliBeanSwingJInternalFrameLocal.getestadonotacredito(),true);
				estadonotacreditosoliBeanSwingJInternalFrameLocal.actualizarLista(estadonotacreditosoliBeanSwingJInternalFrameLocal.estadonotacredito,this.estadonotacreditosolisForeignKey);

				estadonotacreditosoliBeanSwingJInternalFrameLocal.actualizarRelaciones(estadonotacreditosoliBeanSwingJInternalFrameLocal.estadonotacredito);

				notacreditosoliLocal.setEstadoNotaCreditoSoli(estadonotacreditosoliBeanSwingJInternalFrameLocal.estadonotacredito);

				this.addItemDefectoCombosForeignKeyEstadoNotaCreditoSoli();
				this.cargarCombosFrameEstadoNotaCreditoSolisForeignKey("Formulario");
				this.setActualEstadoNotaCreditoSoliForeignKey(estadonotacreditosoliBeanSwingJInternalFrameLocal.estadonotacredito.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				notacreditosoliLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				notacreditosoliLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				notacreditosoliLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransporteDetalleFormJInternalFrame.class)) {
				TransporteBeanSwingJInternalFrame transporteBeanSwingJInternalFrameLocal=(TransporteBeanSwingJInternalFrame) ((TransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransporte(transporteBeanSwingJInternalFrameLocal.gettransporte(),true);
				transporteBeanSwingJInternalFrameLocal.actualizarLista(transporteBeanSwingJInternalFrameLocal.transporte,this.transportesForeignKey);

				transporteBeanSwingJInternalFrameLocal.actualizarRelaciones(transporteBeanSwingJInternalFrameLocal.transporte);

				notacreditosoliLocal.setTransporte(transporteBeanSwingJInternalFrameLocal.transporte);

				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey("Formulario");
				this.setActualTransporteForeignKey(transporteBeanSwingJInternalFrameLocal.transporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				notacreditosoliLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarNotaCreditoSoliActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = notacreditosoliValidator.getInvalidValues(this.notacreditosoli);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(NotaCreditoSoli notacreditosoli,List<NotaCreditoSoli> notacreditosolis) throws Exception {
		try	{		
			NotaCreditoSoliConstantesFunciones.actualizarLista(notacreditosoli,notacreditosolis,this.notacreditosoliSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(NotaCreditoSoli notacreditosoli,List<NotaCreditoSoli> notacreditosolis) throws Exception {
		try	{			
			NotaCreditoSoliConstantesFunciones.actualizarSelectedLista(notacreditosoli,notacreditosolis);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<NotaCreditoSoli> notacreditosolisLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				notacreditosolisLocal=this.notacreditosoliLogic.getNotaCreditoSolis();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				notacreditosolisLocal=this.notacreditosolis;
			}
			//ARCHITECTURE
		
			for(NotaCreditoSoli notacreditosoliLocal:notacreditosolisLocal) {
				if(this.permiteMantenimiento(notacreditosoliLocal) && notacreditosoliLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+NotaCreditoSoliConstantesFunciones.getNotaCreditoSoliLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_empresaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_sucursalNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_ejercicioNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_periodoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_anioNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_mesNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_usuarioNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcodigoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.NUMEROPREIMPRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumeroNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_emisionNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.NUMERODIAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumero_diasNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_vencimientoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_monedaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_empleadoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcotizacionNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_formatoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_precioNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_clienteNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_facturaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.DIRECCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldireccionNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.TELEFONO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltelefonoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelrucNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDTIPONOTACREDITOSOLI)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_nota_credito_soliNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDRESPONSABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_responsableNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDESTADONOTACREDITOSOLI)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_estado_nota_creditoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescripcionNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.PENALIZADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelpenalizadoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.DESCUENTOPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_porcentajeNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_ivaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.SUMAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsumanNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_valorNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.TOTALSINIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_sin_ivaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.DESCUENTOGENERAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_generalNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfleteNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotalNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsub_totalNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.OTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotroNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelivaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FINANCIAMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfinanciamientoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.OTROVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotro_valorNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.RETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelretencionNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeliceNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfechaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_centro_costoNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_vendedorNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_cambioNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDTRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_transporteNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_transportistaNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FECHACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_clienteNotaCreditoSoli,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoSoliConstantesFunciones.FECHAAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_autorizacionNotaCreditoSoli,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_empresaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_sucursalNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_ejercicioNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_periodoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_anioNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_mesNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_usuarioNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcodigoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumeroNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_emisionNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumero_diasNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_vencimientoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_monedaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_empleadoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcotizacionNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_formatoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_precioNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_clienteNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_facturaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldireccionNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltelefonoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelrucNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_nota_credito_soliNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_responsableNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_estado_nota_creditoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescripcionNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelpenalizadoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_porcentajeNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_ivaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsumanNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_valorNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_sin_ivaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_generalNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfleteNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotalNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsub_totalNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotroNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelivaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfinanciamientoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotro_valorNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelretencionNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeliceNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfechaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_centro_costoNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_vendedorNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_tipo_cambioNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_transporteNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelid_transportistaNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_clienteNotaCreditoSoli,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_autorizacionNotaCreditoSoli,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetaNotaCreditoSoli")) {
			if(this.notacreditosoli==null) {
				this.notacreditosoli= new NotaCreditoSoli();
			}

			if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoNotaCreditoSoli
				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.getdetanotacreditosoli().setNotaCreditoSoli(this.notacreditosoli);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoNotaCreditoSoli--;	
		
		
		this.notacreditosoliAux=new NotaCreditoSoli();
		
		this.notacreditosoliAux.setId(this.iIdNuevoNotaCreditoSoli);
		this.notacreditosoliAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacreditosoliLogic.getNotaCreditoSolis().add(this.notacreditosoliAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.notacreditosolis.add(this.notacreditosoliAux);
		}
		//ARCHITECTURE
		
		this.notacreditosoli=this.notacreditosoliAux;
		
		if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoli);
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoSoli(this.notacreditosoli);
		}
				
		//this.setDefaultControlesNotaCreditoSoli();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyNotaCreditoSoli();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyNotaCreditoSoli();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoSoli();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCreditoSoli(this.notacreditosoliBean,this.notacreditosoli,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
			classes=NotaCreditoSoliConstantesFunciones.getClassesRelationshipsOfNotaCreditoSoli(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.notacreditosoliReturnGeneral=notacreditosoliLogic.procesarEventosNotaCreditoSolisWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditosoliLogic.getNotaCreditoSolis(),this.notacreditosoli,this.notacreditosoliParameterGeneral,this.isEsNuevoNotaCreditoSoli,classes);//this.notacreditosoliLogic.getNotaCreditoSoli()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanNotaCreditoSoli(this.notacreditosoliReturnGeneral,this.notacreditosoliBean,false);
		
		if(this.notacreditosoliReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli());
		}
		
		if(this.notacreditosoliReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli(),classes);//this.notacreditosoliBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyNotaCreditoSoli();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyNotaCreditoSoli();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.RecargarFormNotaCreditoSoli(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingNotaCreditoSoli(false);
						
			if(notacreditosoliSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.getEsGuardarRelacionado() && DetaNotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaNotaCreditoSoliActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoSoli();
			}
			
			this.actualizarVisualTableDatosNotaCreditoSoli();
			
			this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoSoli(), this.getIndiceNuevoNotaCreditoSoli());
			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
						
			this.actualizarEstadoCeldasBotonesNotaCreditoSoli("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesNotaCreditoSoli(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarcodigoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarnumeroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfecha_emisionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarnumero_diasNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfecha_vencimientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarcotizacionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activardireccionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activartelefonoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarrucNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activardescripcionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarpenalizadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activardescuento_porcentajeNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activartotal_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarsumanNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activardescuento_valorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activartotal_sin_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activardescuento_generalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfleteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activartotalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarsub_totalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarotroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfinanciamientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarotro_valorNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldretencionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarretencionNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldiceNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activariceNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfechaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfechaNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_clienteNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfecha_clienteNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_autorizacionNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarfecha_autorizacionNotaCreditoSoli);	
		//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_empresaNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_sucursalNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_ejercicioNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_periodoNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_anioNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_mesNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_usuarioNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_monedaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_empleadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_formatoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_tipo_precioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_clienteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_facturaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_tipo_nota_credito_soliNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_responsableNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_estado_nota_creditoNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_centro_costoNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_vendedorNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_tipo_cambioNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_transporteNotaCreditoSoli);//
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setEnabled(isHabilitar && this.notacreditosoliConstantesFunciones.activarid_transportistaNotaCreditoSoli);
	};
	
	public void setDefaultControlesNotaCreditoSoli() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoNotaCreditoSoli(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.notacreditosoliSessionBean.setConGuardarRelaciones(true);			
			this.notacreditosoliSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.notacreditosoliSessionBean.setConGuardarRelaciones(false);			
			this.notacreditosoliSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoNotaCreditoSoli() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
				if(notacreditosoliAux.getId().equals(this.iIdNuevoNotaCreditoSoli)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosolis) {
				if(notacreditosoliAux.getId().equals(this.iIdNuevoNotaCreditoSoli)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
				if(notacreditosoliAux.getId().equals(notacreditosoli.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosolis) {
				if(notacreditosoliAux.getId().equals(notacreditosoli.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalNotaCreditoSoli(NotaCreditoSoli notacreditosoliOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
				if(notacreditosoliAux.getNotaCreditoSoliOriginal().getId().equals(notacreditosoliOriginal.getId())) {
					existe=true;
					notacreditosoliOriginal.setId(notacreditosoliAux.getId());
					notacreditosoliOriginal.setVersionRow(notacreditosoliAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoSoli notacreditosoliAux:this.notacreditosolis) {
				if(notacreditosoliAux.getNotaCreditoSoliOriginal().getId().equals(notacreditosoliOriginal.getId())) {
					existe=true;
					notacreditosoliOriginal.setId(notacreditosoliAux.getId());
					notacreditosoliOriginal.setVersionRow(notacreditosoliAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosNotaCreditoSoli(Boolean esParaCancelar) throws Exception {
		notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
		notacreditosoliAux=new NotaCreditoSoli();
		
		if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
					if(notacreditosoliAux.getId()<0) {
						notacreditosolisAux.add(notacreditosoliAux);
					}		
				}
				this.iIdNuevoNotaCreditoSoli=0L;
				this.notacreditosoliLogic.getNotaCreditoSolis().removeAll(notacreditosolisAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoSoli notacreditosoliAux:this.notacreditosolis) {
					if(notacreditosoliAux.getId()<0) {
						notacreditosolisAux.add(notacreditosoliAux);
					}		
				}
				this.iIdNuevoNotaCreditoSoli=0L;
				this.notacreditosolis.removeAll(notacreditosolisAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoNotaCreditoSoli 
					&& this.notacreditosoliLogic.getNotaCreditoSolis().size()>0
					) {
					notacreditosoliAux=this.notacreditosoliLogic.getNotaCreditoSolis().get(this.notacreditosoliLogic.getNotaCreditoSolis().size() - 1);
				
					if(notacreditosoliAux.getId()<0) {
						this.notacreditosoliLogic.getNotaCreditoSolis().remove(notacreditosoliAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoNotaCreditoSoli && this.notacreditosolis.size()>0) {
					notacreditosoliAux=this.notacreditosolis.get(this.notacreditosolis.size() - 1);
				
					if(notacreditosoliAux.getId()<0) {
						this.notacreditosolis.remove(notacreditosoliAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoNotaCreditoSoli(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(notacreditosoli.getId()<0) {
				this.notacreditosoliLogic.getNotaCreditoSolis().remove(this.notacreditosoli);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(notacreditosoli.getId()<0) {
				this.notacreditosolis.remove(this.notacreditosoli);
			}
		}			
	}
	
	public void setEstadosInicialesNotaCreditoSoli(List<NotaCreditoSoli> notacreditosolisAux) throws Exception {
		NotaCreditoSoliConstantesFunciones.setEstadosInicialesNotaCreditoSoli(notacreditosolisAux);
	}
	
	public void setEstadosInicialesNotaCreditoSoli(NotaCreditoSoli notacreditosoliAux) throws Exception {
		NotaCreditoSoliConstantesFunciones.setEstadosInicialesNotaCreditoSoli(notacreditosoliAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarNotaCreditoSoliActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarNotaCreditoSoliActual()) {
				if(!this.isEsNuevoNotaCreditoSoli) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoNotaCreditoSoli=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarNotaCreditoSoliActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Solicitud Nota Credito ?", "MANTENIMIENTO DE Solicitud Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(NotaCreditoSoli notacreditosoli) throws Exception {
		NotaCreditoSoliConstantesFunciones.seleccionarAsignar(this.notacreditosoli,notacreditosoli);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarNotaCreditoSoli=this.isPermisoActualizarOriginalNotaCreditoSoli;
			
			
			this.seleccionarAsignar(notacreditosoli);
			
			

			idEmpleadoActual=notacreditosoli.getid_empleado();
			this.seleccionarEmpleadoActual();

			idClienteActual=notacreditosoli.getid_cliente();
			this.seleccionarClienteActual();

			idFacturaActual=notacreditosoli.getid_factura();
			this.seleccionarFacturaActual();

			idCentroCostoActual=notacreditosoli.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idVendedorActual=notacreditosoli.getid_vendedor();
			this.seleccionarVendedorActual();

			idTipoCambioActual=notacreditosoli.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoSoliConstantesFunciones.quitarEspaciosNotaCreditoSoli(this.notacreditosoli,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesNotaCreditoSoli("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.notacreditosoliSessionBean.setsFuncionBusquedaRapida(this.notacreditosoliSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarVendedorActual() throws Exception {
		try	{
			Vendedor vendedorAux=new Vendedor();

			if(this.idVendedorActual != null && this.idVendedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(this.idVendedorActual);
					vendedorAux= vendedorLogic.getVendedor();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				vendedorsForeignKey=new ArrayList<Vendedor>();
				vendedorsForeignKey.add(vendedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoNotaCreditoSoli) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosNotaCreditoSoli(esParaCancelar);				
				this.cancelarNuevoNotaCreditoSoli(esParaCancelar);								
			}
			
			this.notacreditosoli=new NotaCreditoSoli();
			
			this.inicializarNotaCreditoSoli();
			
			this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarNotaCreditoSoli() throws Exception {
		try {
			NotaCreditoSoliConstantesFunciones.inicializarNotaCreditoSoli(this.notacreditosoli);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.notacreditosoliLogic.getNotaCreditoSolis().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteNotaCreditoSolis(String sAccionBusqueda,List<NotaCreditoSoli> notacreditosolisParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="NotaCreditoSoli"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="NotaCreditoSoliMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("NotaCreditoSoliMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="NotaCreditoSoli"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Solicitud Nota Creditos");		
		parameters.put("busquedapor", NotaCreditoSoliConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetaNotaCreditoSoli.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					NotaCreditoSoliLogic notacreditosoliLogicAuxiliar=new NotaCreditoSoliLogic();
					notacreditosoliLogicAuxiliar.setDatosCliente(notacreditosoliLogic.getDatosCliente());				
					notacreditosoliLogicAuxiliar.setNotaCreditoSolis(notacreditosolisParaReportes);
					
					notacreditosoliLogicAuxiliar.cargarRelacionesLoteForeignKeyNotaCreditoSoliWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					notacreditosolisParaReportes=notacreditosoliLogicAuxiliar.getNotaCreditoSolis();
					
					//notacreditosoliLogic.getNewConnexionToDeep();
					
					//for (NotaCreditoSoli notacreditosoli:notacreditosolisParaReportes) {
					//	notacreditosoliLogic.deepLoad(notacreditosoli, false, DeepLoadType.INCLUDE, classes);
					//}						
					//notacreditosoliLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//notacreditosoliLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetaNotaCreditoSoli = AuxiliarReportes.class.getResourceAsStream("DetaNotaCreditoSoliDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detanotacreditosoli", reportFileDetaNotaCreditoSoli);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceNotaCreditoSoli=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			NotaCreditoSoliConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			NotaCreditoSoliConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceNotaCreditoSoli=new JRBeanArrayDataSource(NotaCreditoSoliJInternalFrame.TraerNotaCreditoSoliBeans(notacreditosolisParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceNotaCreditoSoli);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+NotaCreditoSoliConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+NotaCreditoSoliConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(NotaCreditoSoliBean.TraerNotaCreditoSoliBeans(notacreditosolisParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoNotaCreditoSoliActionPerformed(null);
					//this.generarExcelReporteNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesNotaCreditoSolis(sAccionBusqueda,sTipoArchivoReporte,notacreditosolisParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteNotaCreditoSolis(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoSoli> notacreditosolisParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoSolis");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCreditoSoli("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(NotaCreditoSoli notacreditosoli : notacreditosolisParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			NotaCreditoSoliConstantesFunciones.generarExcelReporteDataNotaCreditoSoli("NORMAL",row,workbook,notacreditosoli,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderNotaCreditoSoli(String sTipo,Row row,Workbook workbook) {
		
		NotaCreditoSoliConstantesFunciones.generarExcelReporteHeaderNotaCreditoSoli(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalNotaCreditoSolis(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoSoli> notacreditosolisParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoSolis");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(NotaCreditoSoli notacreditosoli : notacreditosolisParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(NotaCreditoSoliConstantesFunciones.getNotaCreditoSoliDescripcion(notacreditosoli));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getnumero());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getnumero_dias());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getdireccion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettelefono());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettiponotacreditosoli_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getresponsable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getestadonotacreditosoli_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(notacreditosoli.getpenalizado()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getdescuento_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getsuman());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettotal_sin_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getdescuento_general());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_OTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getotro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfinanciamiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getotro_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getretencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfecha_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditosoli.getfecha_autorizacion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesNotaCreditoSolis(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoSoli> notacreditosolisParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<NotaCreditoSoli> notacreditosolisRespaldo=null;
		
		classes=NotaCreditoSoliConstantesFunciones.getClassesRelationshipsOfNotaCreditoSoli(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.notacreditosoliLogic.setDatosCliente(this.datosCliente);
		this.notacreditosoliLogic.setDatosDeep(this.datosDeep);
		this.notacreditosoliLogic.setIsConDeep(true);
		
		notacreditosolisRespaldo=this.notacreditosoliLogic.getNotaCreditoSolis();
		
		this.notacreditosoliLogic.setNotaCreditoSolis(notacreditosolisParaReportes);	
		this.notacreditosoliLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		notacreditosolisParaReportes=this.notacreditosoliLogic.getNotaCreditoSolis();
		this.notacreditosoliLogic.setNotaCreditoSolis(notacreditosolisRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoSolis");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCreditoSoli("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(NotaCreditoSoli notacreditosoli : notacreditosolisParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderNotaCreditoSoli("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			NotaCreditoSoliConstantesFunciones.generarExcelReporteDataNotaCreditoSoli("NORMAL",row,workbook,notacreditosoli,cellStyleDataAux);
		
			
			


				//DetaNotaCreditoSoli
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetaNotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO))) {

				if(notacreditosoli.getDetaNotaCreditoSolis()!=null && notacreditosoli.getDetaNotaCreditoSolis().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetaNotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetaNotaCreditoSoliConstantesFunciones.generarExcelReporteHeaderDetaNotaCreditoSoli("RELACIONADO",row,workbook);
				}

				if(notacreditosoli.getDetaNotaCreditoSolis()!=null) {
					i2=0;
					for(DetaNotaCreditoSoli detanotacreditosoli : notacreditosoli.getDetaNotaCreditoSolis()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetaNotaCreditoSoliConstantesFunciones.generarExcelReporteDataDetaNotaCreditoSoli("RELACIONADO",row,workbook,detanotacreditosoli,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(NotaCreditoSoliConstantesFunciones.getNotaCreditoSoliDescripcion(notacreditosoli));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessNotaCreditoSoli() throws Exception {		
		this.startProcessNotaCreditoSoli(true);
	}
	
	public void startProcessNotaCreditoSoli(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasNotaCreditoSoli ,this.jPanelParametrosReportesNotaCreditoSoli, this.jScrollPanelDatosNotaCreditoSoli,this.jPanelPaginacionNotaCreditoSoli, this.jScrollPanelDatosEdicionNotaCreditoSoli, this.jPanelAccionesNotaCreditoSoli,this.jPanelAccionesFormularioNotaCreditoSoli,this.jmenuBarNotaCreditoSoli,this.jmenuBarDetalleNotaCreditoSoli,this.jTtoolBarNotaCreditoSoli,this.jTtoolBarDetalleNotaCreditoSoli);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCreditoSoli=this.jTabbedPaneBusquedasNotaCreditoSoli; 
		
		final JPanel jPanelParametrosReportesNotaCreditoSoli=this.jPanelParametrosReportesNotaCreditoSoli;
		//final JScrollPane jScrollPanelDatosNotaCreditoSoli=this.jScrollPanelDatosNotaCreditoSoli;
		final JTable jTableDatosNotaCreditoSoli=this.jTableDatosNotaCreditoSoli;		
		final JPanel jPanelPaginacionNotaCreditoSoli=this.jPanelPaginacionNotaCreditoSoli;
		//final JScrollPane jScrollPanelDatosEdicionNotaCreditoSoli=this.jScrollPanelDatosEdicionNotaCreditoSoli;
		final JPanel jPanelAccionesNotaCreditoSoli=this.jPanelAccionesNotaCreditoSoli;
		
		JPanel jPanelCamposAuxiliarNotaCreditoSoli=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarNotaCreditoSoli=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			jPanelCamposAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelCamposNotaCreditoSoli;
			jPanelAccionesFormularioAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelAccionesFormularioNotaCreditoSoli;
		}
		
		final JPanel jPanelCamposNotaCreditoSoli=jPanelCamposAuxiliarNotaCreditoSoli;
		final JPanel jPanelAccionesFormularioNotaCreditoSoli=jPanelAccionesFormularioAuxiliarNotaCreditoSoli;
		
		
		final JMenuBar jmenuBarNotaCreditoSoli=this.jmenuBarNotaCreditoSoli;
		final JToolBar jTtoolBarNotaCreditoSoli=this.jTtoolBarNotaCreditoSoli;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarNotaCreditoSoli=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCreditoSoli=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			jmenuBarDetalleAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jmenuBarDetalleNotaCreditoSoli;
			jTtoolBarDetalleAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jTtoolBarDetalleNotaCreditoSoli;
		}
		
		final JMenuBar jmenuBarDetalleNotaCreditoSoli=jmenuBarDetalleAuxiliarNotaCreditoSoli;
		final JToolBar jTtoolBarDetalleNotaCreditoSoli=jTtoolBarDetalleAuxiliarNotaCreditoSoli;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCreditoSoli;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCreditoSoli;
			processRunnable.jTableDatos=jTableDatosNotaCreditoSoli;
			processRunnable.jPanelCampos=jPanelCamposNotaCreditoSoli;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCreditoSoli;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCreditoSoli;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCreditoSoli;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCreditoSoli;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCreditoSoli;
			processRunnable.jTtoolBar=jTtoolBarNotaCreditoSoli;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCreditoSoli;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCreditoSoli ,jPanelParametrosReportesNotaCreditoSoli,jTableDatosNotaCreditoSoli, /*jScrollPanelDatosNotaCreditoSoli,*/jPanelCamposNotaCreditoSoli,jPanelPaginacionNotaCreditoSoli, /*jScrollPanelDatosEdicionNotaCreditoSoli,*/ jPanelAccionesNotaCreditoSoli,jPanelAccionesFormularioNotaCreditoSoli,jmenuBarNotaCreditoSoli,jmenuBarDetalleNotaCreditoSoli,jTtoolBarNotaCreditoSoli,jTtoolBarDetalleNotaCreditoSoli);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCreditoSoli ,jPanelParametrosReportesNotaCreditoSoli, jScrollPanelDatosNotaCreditoSoli,jPanelPaginacionNotaCreditoSoli, jScrollPanelDatosEdicionNotaCreditoSoli, jPanelAccionesNotaCreditoSoli,jPanelAccionesFormularioNotaCreditoSoli,jmenuBarNotaCreditoSoli,jmenuBarDetalleNotaCreditoSoli,jTtoolBarNotaCreditoSoli,jTtoolBarDetalleNotaCreditoSoli);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessNotaCreditoSoli() {// throws Exception 
		this.finishProcessNotaCreditoSoli(true);
	}
	
	public void finishProcessNotaCreditoSoli(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasNotaCreditoSoli ,this.jPanelParametrosReportesNotaCreditoSoli, this.jScrollPanelDatosNotaCreditoSoli,this.jPanelPaginacionNotaCreditoSoli, this.jScrollPanelDatosEdicionNotaCreditoSoli, this.jPanelAccionesNotaCreditoSoli,this.jPanelAccionesFormularioNotaCreditoSoli,this.jmenuBarNotaCreditoSoli,this.jmenuBarDetalleNotaCreditoSoli,this.jTtoolBarNotaCreditoSoli,this.jTtoolBarDetalleNotaCreditoSoli);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCreditoSoli=this.jTabbedPaneBusquedasNotaCreditoSoli; 
		
		final JPanel jPanelParametrosReportesNotaCreditoSoli=this.jPanelParametrosReportesNotaCreditoSoli;
		//final JScrollPane jScrollPanelDatosNotaCreditoSoli=this.jScrollPanelDatosNotaCreditoSoli;
		final JTable jTableDatosNotaCreditoSoli=this.jTableDatosNotaCreditoSoli;		
		final JPanel jPanelPaginacionNotaCreditoSoli=this.jPanelPaginacionNotaCreditoSoli;
		//final JScrollPane jScrollPanelDatosEdicionNotaCreditoSoli=this.jScrollPanelDatosEdicionNotaCreditoSoli;
		final JPanel jPanelAccionesNotaCreditoSoli=this.jPanelAccionesNotaCreditoSoli;
		
		JPanel jPanelCamposAuxiliarNotaCreditoSoli=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarNotaCreditoSoli=new JPanel();
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			jPanelCamposAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelCamposNotaCreditoSoli;
			jPanelAccionesFormularioAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelAccionesFormularioNotaCreditoSoli;
		}
		
		final JPanel jPanelCamposNotaCreditoSoli=jPanelCamposAuxiliarNotaCreditoSoli;
		final JPanel jPanelAccionesFormularioNotaCreditoSoli=jPanelAccionesFormularioAuxiliarNotaCreditoSoli;
		
		
		final JMenuBar jmenuBarNotaCreditoSoli=this.jmenuBarNotaCreditoSoli;		
		final JToolBar jTtoolBarNotaCreditoSoli=this.jTtoolBarNotaCreditoSoli;
				
		JMenuBar jmenuBarDetalleAuxiliarNotaCreditoSoli=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCreditoSoli=new JToolBar();
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			jmenuBarDetalleAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jmenuBarDetalleNotaCreditoSoli;
			jTtoolBarDetalleAuxiliarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jTtoolBarDetalleNotaCreditoSoli;		
		}
		
		final JMenuBar jmenuBarDetalleNotaCreditoSoli=jmenuBarDetalleAuxiliarNotaCreditoSoli;
		final JToolBar jTtoolBarDetalleNotaCreditoSoli=jTtoolBarDetalleAuxiliarNotaCreditoSoli;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCreditoSoli;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCreditoSoli;
			processRunnable.jTableDatos=jTableDatosNotaCreditoSoli;
			processRunnable.jPanelCampos=jPanelCamposNotaCreditoSoli;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCreditoSoli;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCreditoSoli;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCreditoSoli;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCreditoSoli;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCreditoSoli;
			processRunnable.jTtoolBar=jTtoolBarNotaCreditoSoli;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCreditoSoli;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasNotaCreditoSoli ,jPanelParametrosReportesNotaCreditoSoli, jTableDatosNotaCreditoSoli,/*jScrollPanelDatosNotaCreditoSoli,*/jPanelCamposNotaCreditoSoli,jPanelPaginacionNotaCreditoSoli, /*jScrollPanelDatosEdicionNotaCreditoSoli,*/ jPanelAccionesNotaCreditoSoli,jPanelAccionesFormularioNotaCreditoSoli,jmenuBarNotaCreditoSoli,jmenuBarDetalleNotaCreditoSoli,jTtoolBarNotaCreditoSoli,jTtoolBarDetalleNotaCreditoSoli));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesNotaCreditoSoli(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarNotaCreditoSoli(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuNotaCreditoSoli(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarNotaCreditoSoli(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarNotaCreditoSoli,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleNotaCreditoSoli,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuNotaCreditoSoli(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarNotaCreditoSoli,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleNotaCreditoSoli,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.notacreditosoliConstantesFunciones.getsFinalQueryNotaCreditoSoli();
		String  finalQueryPaginacionTodos=this.notacreditosoliConstantesFunciones.getsFinalQueryNotaCreditoSoli();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=NotaCreditoSoliConstantesFunciones.getArrayColumnasGlobalesNoNotaCreditoSoli(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=NotaCreditoSoliConstantesFunciones.getArrayColumnasGlobalesNotaCreditoSoli(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,NotaCreditoSoliConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.notacreditosolisEliminados= new ArrayList<NotaCreditoSoli>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessNotaCreditoSoli();
		
				///*NotaCreditoSoliSessionBean*/this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			
			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=NotaCreditoSoliConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=NotaCreditoSoliConstantesFunciones.getClassesForeignKeysOfNotaCreditoSoli(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/notacreditosoli."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			notacreditosolisAux= new ArrayList<NotaCreditoSoli>();
			
				
			notacreditosoliLogic.setDatosCliente(this.datosCliente);
			notacreditosoliLogic.setDatosDeep(this.datosDeep);
			notacreditosoliLogic.setIsConDeep(true);
			
			
			notacreditosoliLogic.getNotaCreditoSoliDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					notacreditosoliLogic.getTodosNotaCreditoSolis(finalQueryGlobal,pagination);
					
					//notacreditosoliLogic.getTodosNotaCreditoSolisWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(notacreditosoliLogic.getNotaCreditoSolis()==null|| notacreditosoliLogic.getNotaCreditoSolis().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditosolisAux= new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux= new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditosoliLogic.getTodosNotaCreditoSolis(finalQueryGlobal+"",this.pagination);												
							
							//notacreditosoliLogic.getTodosNotaCreditoSolisWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteNotaCreditoSolis("Todos",notacreditosoliLogic.getNotaCreditoSolis() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());					
							notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idNotaCreditoSoli=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idNotaCreditoSoli=this.idActual;
				
				} else if(this.idNotaCreditoSoliActual!=null && this.idNotaCreditoSoliActual!=0L) {
					idNotaCreditoSoli=idNotaCreditoSoliActual;
				}
				
					
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndicePorId(idNotaCreditoSoli);
				
				this.notacreditosolis=new ArrayList<NotaCreditoSoli>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					notacreditosoliLogic.getEntity(idNotaCreditoSoli);
					
					//notacreditosoliLogic.getEntityWithConnection(idNotaCreditoSoli);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
					notacreditosoliLogic.getNotaCreditoSolis().add(notacreditosoliLogic.getNotaCreditoSoli());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosolis=new ArrayList<NotaCreditoSoli>();
					this.notacreditosolis.add(notacreditosoli);
				}
				
				if(notacreditosoliLogic.getNotaCreditoSoli()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdCliente",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdCliente",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdEjercicio",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdEjercicio",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdEmpleado",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdEmpleado",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdEmpresa",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdEmpresa",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoNotaCreditoSoli")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoSoli(id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli(finalQueryGlobal,pagination,id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoSoli(id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoSoli(id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli(finalQueryGlobal,pagination,id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoSoli(id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoSoli(id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdEstadoNotaCreditoSoli",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdEstadoNotaCreditoSoli",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdFactura",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdFactura",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdPeriodo",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdPeriodo",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdResponsable")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdResponsable(finalQueryGlobal,pagination,id_responsableFK_IdResponsable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdResponsable(finalQueryGlobal,pagination,id_responsableFK_IdResponsable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdResponsable(id_responsableFK_IdResponsable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdResponsable",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdResponsable",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdSucursal",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdSucursal",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoNotaCreditoSoli")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTipoNotaCreditoSoli(id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdTipoNotaCreditoSoli(finalQueryGlobal,pagination,id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTipoNotaCreditoSoli(id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTipoNotaCreditoSoli(id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdTipoNotaCreditoSoli(finalQueryGlobal,pagination,id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTipoNotaCreditoSoli(id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTipoNotaCreditoSoli(id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdTipoNotaCreditoSoli",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdTipoNotaCreditoSoli",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransportista")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdTransportista",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdTransportista",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdUsuario",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdUsuario",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditosoliLogic.getNotaCreditoSolisFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditosoliLogic.getNotaCreditoSolis()==null||notacreditosoliLogic.getNotaCreditoSolis().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditosolis==null|| notacreditosolis.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
						notacreditosolisAux.addAll(notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolisAux=new ArrayList<NotaCreditoSoli>();
							notacreditosolisAux.addAll(notacreditosolis);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditosoliLogic.getNotaCreditoSolisFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoSoliConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoSolis("FK_IdVendedor",notacreditosoliLogic.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoSolis("FK_IdVendedor",notacreditosolis);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliLogic.setNotaCreditoSolis(new ArrayList<NotaCreditoSoli>());
						notacreditosoliLogic.getNotaCreditoSolis().addAll(notacreditosolisAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosolis=new ArrayList<NotaCreditoSoli>();
							notacreditosolis.addAll(notacreditosolisAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesNotaCreditoSoli();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessNotaCreditoSoli();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditosoliLogic.getNotaCreditoSolis().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditosolis.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditosoliLogic.getNotaCreditoSolis().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditosolis.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(NotaCreditoSoli notacreditosoli) {
		Boolean permite=true;
		
		if(this.notacreditosoli.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=NotaCreditoSoliConstantesFunciones.getOrderByListaNotaCreditoSoli();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=NotaCreditoSoliConstantesFunciones.getOrderByListaNotaCreditoSoli();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoSoli notacreditosoli:notacreditosoliLogic.getNotaCreditoSolis()) {
				if(notacreditosoli.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditosoliTotales=notacreditosoli;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoSoli notacreditosoli:this.notacreditosolis) {
				if(notacreditosoli.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditosoliTotales=notacreditosoli;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.notacreditosoliAux=new NotaCreditoSoli();
			this.notacreditosoliAux.setsType(Constantes2.S_TOTALES);
			this.notacreditosoliAux.setIsNew(false);
			this.notacreditosoliAux.setIsChanged(false);
			this.notacreditosoliAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				NotaCreditoSoliConstantesFunciones.TotalizarValoresFilaNotaCreditoSoli(this.notacreditosoliLogic.getNotaCreditoSolis(),this.notacreditosoliAux);
				
				this.notacreditosoliLogic.getNotaCreditoSolis().add(this.notacreditosoliAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				NotaCreditoSoliConstantesFunciones.TotalizarValoresFilaNotaCreditoSoli(this.notacreditosolis,this.notacreditosoliAux);
				
				this.notacreditosolis.add(this.notacreditosoliAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		notacreditosoliTotales=new NotaCreditoSoli();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditosoliLogic.getNotaCreditoSolis().remove(notacreditosoliTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditosolis.remove(notacreditosoliTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		notacreditosoliTotales=new NotaCreditoSoli();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoSoli notacreditosoli:notacreditosoliLogic.getNotaCreditoSolis()) {
				if(notacreditosoli.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditosoliTotales=notacreditosoli;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoSoliConstantesFunciones.TotalizarValoresFilaNotaCreditoSoli(this.notacreditosoliLogic.getNotaCreditoSolis(),notacreditosoliTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoSoli notacreditosoli:this.notacreditosolis) {
				if(notacreditosoli.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditosoliTotales=notacreditosoli;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoSoliConstantesFunciones.TotalizarValoresFilaNotaCreditoSoli(this.notacreditosolis,notacreditosoliTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getNotaCreditoSolisFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoNotaCreditoSoli";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdResponsable()throws Exception {
		try {
			sAccionBusqueda="FK_IdResponsable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdTipoCambio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCambio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdTipoNotaCreditoSoli()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoNotaCreditoSoli";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoSolisFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getNotaCreditoSolisFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli(String sFinalQuery,Long id_estado_nota_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli(sFinalQuery,this.pagination,id_estado_nota_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdResponsable(String sFinalQuery,Long id_responsable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdResponsable(sFinalQuery,this.pagination,id_responsable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdTipoCambio(String sFinalQuery,Long id_tipo_cambio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdTipoCambio(sFinalQuery,this.pagination,id_tipo_cambio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdTipoNotaCreditoSoli(String sFinalQuery,Long id_tipo_nota_credito_soli)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdTipoNotaCreditoSoli(sFinalQuery,this.pagination,id_tipo_nota_credito_soli);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdTransporte(String sFinalQuery,Long id_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdTransporte(sFinalQuery,this.pagination,id_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoSolisFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLogic.getNotaCreditoSolisFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosNotaCreditoSoli() {
		this.isPermisoTodoNotaCreditoSoli=false;
		this.isPermisoNuevoNotaCreditoSoli=false;
		this.isPermisoActualizarNotaCreditoSoli=false;
		this.isPermisoActualizarOriginalNotaCreditoSoli=false;
		this.isPermisoEliminarNotaCreditoSoli=false;
		this.isPermisoGuardarCambiosNotaCreditoSoli=false;
		this.isPermisoConsultaNotaCreditoSoli=false;
		this.isPermisoBusquedaNotaCreditoSoli=false;
		this.isPermisoReporteNotaCreditoSoli=false;		
		this.isPermisoOrdenNotaCreditoSoli=false;		
		this.isPermisoPaginacionMedioNotaCreditoSoli=false;		
		this.isPermisoPaginacionAltoNotaCreditoSoli=false;
		this.isPermisoPaginacionTodoNotaCreditoSoli=false;
		this.isPermisoCopiarNotaCreditoSoli=false;		
		this.isPermisoVerFormNotaCreditoSoli=false;		
		this.isPermisoDuplicarNotaCreditoSoli=false;		
		this.isPermisoOrdenNotaCreditoSoli=false;		
	}
	
	public void setPermisosUsuarioNotaCreditoSoli(Boolean isPermiso) {
		this.isPermisoTodoNotaCreditoSoli=isPermiso;
		this.isPermisoNuevoNotaCreditoSoli=isPermiso;
		this.isPermisoActualizarNotaCreditoSoli=isPermiso;
		this.isPermisoActualizarOriginalNotaCreditoSoli=isPermiso;
		this.isPermisoEliminarNotaCreditoSoli=isPermiso;
		this.isPermisoGuardarCambiosNotaCreditoSoli=isPermiso;
		this.isPermisoConsultaNotaCreditoSoli=isPermiso;
		this.isPermisoBusquedaNotaCreditoSoli=isPermiso;
		this.isPermisoReporteNotaCreditoSoli=isPermiso;
		this.isPermisoOrdenNotaCreditoSoli=isPermiso;		
		this.isPermisoPaginacionMedioNotaCreditoSoli=isPermiso;		
		this.isPermisoPaginacionAltoNotaCreditoSoli=isPermiso;		
		this.isPermisoPaginacionTodoNotaCreditoSoli=isPermiso;		
		this.isPermisoCopiarNotaCreditoSoli=isPermiso;		
		this.isPermisoVerFormNotaCreditoSoli=isPermiso;		
		this.isPermisoDuplicarNotaCreditoSoli=isPermiso;
		this.isPermisoOrdenNotaCreditoSoli=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioNotaCreditoSoli(Boolean isPermiso) {
		//this.isPermisoTodoNotaCreditoSoli=isPermiso;
		this.isPermisoNuevoNotaCreditoSoli=isPermiso;
		this.isPermisoActualizarNotaCreditoSoli=isPermiso;
		this.isPermisoActualizarOriginalNotaCreditoSoli=isPermiso;
		this.isPermisoEliminarNotaCreditoSoli=isPermiso;
		this.isPermisoGuardarCambiosNotaCreditoSoli=isPermiso;
		//this.isPermisoConsultaNotaCreditoSoli=isPermiso;
		//this.isPermisoBusquedaNotaCreditoSoli=isPermiso;
		//this.isPermisoReporteNotaCreditoSoli=isPermiso;
		//this.isPermisoOrdenNotaCreditoSoli=isPermiso;		
		//this.isPermisoPaginacionMedioNotaCreditoSoli=isPermiso;		
		//this.isPermisoPaginacionAltoNotaCreditoSoli=isPermiso;		
		//this.isPermisoPaginacionTodoNotaCreditoSoli=isPermiso;		
		//this.isPermisoCopiarNotaCreditoSoli=isPermiso;		
		//this.isPermisoDuplicarNotaCreditoSoli=isPermiso;
		//this.isPermisoOrdenNotaCreditoSoli=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoSoliClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetaNotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
		
		if(NotaCreditoSoliJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetaNotaCreditoSoli=false;
		this.isTienePermisosDetaNotaCreditoSoli=this.verificarGetPermisosUsuarioOpcionNotaCreditoSoliClaseRelacionada(this.opcionsRelacionadas,DetaNotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoSoliClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetaNotaCreditoSoli=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioNotaCreditoSoliClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionNotaCreditoSoliClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioNotaCreditoSoliClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetaNotaCreditoSoli && this.jInternalFrameDetalleFormNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.remove(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioNotaCreditoSoli() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(NotaCreditoSoliJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, NotaCreditoSoliConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoNotaCreditoSoli=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarNotaCreditoSoli=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalNotaCreditoSoli=this.isPermisoActualizarNotaCreditoSoli;
			this.isPermisoEliminarNotaCreditoSoli=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosNotaCreditoSoli=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaNotaCreditoSoli=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaNotaCreditoSoli=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoNotaCreditoSoli=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteNotaCreditoSoli=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCreditoSoli=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioNotaCreditoSoli=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoNotaCreditoSoli=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoNotaCreditoSoli=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarNotaCreditoSoli=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormNotaCreditoSoli=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarNotaCreditoSoli=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCreditoSoli=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosNotaCreditoSoli.setToolTipText(this.jTableDatosNotaCreditoSoli.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioNotaCreditoSoli(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioNotaCreditoSoli(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(NotaCreditoSoliJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(NotaCreditoSoliJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioNotaCreditoSoli() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetaNotaCreditoSoli && this.notacreditosoliConstantesFunciones.mostrarDetaNotaCreditoSoliNotaCreditoSoli && !NotaCreditoSoliConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle  Solicitud Nota Credit");
			reporte.setsDescripcion("Detalle  Solicitud Nota Credit");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyNotaCreditoSoliListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.tiponotacreditosolisForeignKey=new ArrayList();
				this.responsablesForeignKey=new ArrayList();
				this.estadonotacreditosolisForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
				this.transportesForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyNotaCreditoSoliListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(NotaCreditoSoliJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyNotaCreditoSoliListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoNotaCreditoSoliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoNotaCreditoSoliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoNotaCreditoSoliListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiponotacreditosolisForeignKey==null||this.tiponotacreditosolisForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoNotaCreditoSoliConstantesFunciones.getArrayColumnasGlobalesTipoNotaCreditoSoli(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoNotaCreditoSoliConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoNotaCreditoSoliConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoNotaCreditoSolisForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ResponsableConstantesFunciones.SFINALQUERY;

				this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCreditoSoliListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadonotacreditosolisForeignKey==null||this.estadonotacreditosolisForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoNotaCreditoSolisForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyNotaCreditoSoliListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			NotaCreditoSoliParameterReturnGeneral notacreditosoliReturnGeneral=new NotaCreditoSoliParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_empresaNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_empresaNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_sucursalNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_sucursalNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_ejercicioNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_ejercicioNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_periodoNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_periodoNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_anioNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_anioNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_mesNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_mesNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_usuarioNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_usuarioNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_monedaNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_monedaNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_empleadoNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_empleadoNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_formatoNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_formatoNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_tipo_precioNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_tipo_precioNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_clienteNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_clienteNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_facturaNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_facturaNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalTipoNotaCreditoSoli="";

				if(((this.tiponotacreditosolisForeignKey==null||this.tiponotacreditosolisForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_tipo_nota_credito_soliNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_tipo_nota_credito_soliNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoNotaCreditoSoli()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoNotaCreditoSoliConstantesFunciones.getArrayColumnasGlobalesTipoNotaCreditoSoli(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoNotaCreditoSoli=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoNotaCreditoSoliConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoNotaCreditoSoli=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoNotaCreditoSoli, "");
						finalQueryGlobalTipoNotaCreditoSoli+=TipoNotaCreditoSoliConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoNotaCreditoSolisForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoNotaCreditoSoli=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidTipoNotaCreditoSoliActual();
					}
				} else {
					finalQueryGlobalTipoNotaCreditoSoli="NONE";
				}


				String finalQueryGlobalResponsable="";

				if(((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_responsableNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_responsableNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalResponsable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

						finalQueryGlobalResponsable=Funciones.GetFinalQueryAppend(finalQueryGlobalResponsable, "");
						finalQueryGlobalResponsable+=ResponsableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalResponsable=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidResponsableActual();
					}
				} else {
					finalQueryGlobalResponsable="NONE";
				}


				String finalQueryGlobalEstadoNotaCreditoSoli="";

				if(((this.estadonotacreditosolisForeignKey==null||this.estadonotacreditosolisForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_estado_nota_creditoNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_estado_nota_creditoNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoSoli()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoNotaCreditoSoli=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoNotaCreditoSoli=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoNotaCreditoSoli, "");
						finalQueryGlobalEstadoNotaCreditoSoli+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoNotaCreditoSolisForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoNotaCreditoSoli=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidEstadoNotaCreditoSoliActual();
					}
				} else {
					finalQueryGlobalEstadoNotaCreditoSoli="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_centro_costoNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_centro_costoNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_vendedorNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_vendedorNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_tipo_cambioNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_tipo_cambioNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}


				String finalQueryGlobalTransporte="";

				if(((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_transporteNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_transporteNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalTransporte, "");
						finalQueryGlobalTransporte+=TransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransporte=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidTransporteActual();
					}
				} else {
					finalQueryGlobalTransporte="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.notacreditosoliConstantesFunciones.cargarid_transportistaNotaCreditoSoli)
					 || (this.esRecargarFks && this.notacreditosoliConstantesFunciones.cargarid_transportistaNotaCreditoSoli)) {

					if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+notacreditosoliSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				notacreditosoliReturnGeneral=notacreditosoliLogic.cargarCombosLoteForeignKeyNotaCreditoSoli(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalMoneda,finalQueryGlobalEmpleado,finalQueryGlobalFormato,finalQueryGlobalTipoPrecio,finalQueryGlobalCliente,finalQueryGlobalFactura,finalQueryGlobalTipoNotaCreditoSoli,finalQueryGlobalResponsable,finalQueryGlobalEstadoNotaCreditoSoli,finalQueryGlobalCentroCosto,finalQueryGlobalVendedor,finalQueryGlobalTipoCambio,finalQueryGlobalTransporte,finalQueryGlobalTransportista);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=notacreditosoliReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=notacreditosoliReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=notacreditosoliReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=notacreditosoliReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=notacreditosoliReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=notacreditosoliReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=notacreditosoliReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=notacreditosoliReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=notacreditosoliReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=notacreditosoliReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=notacreditosoliReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=notacreditosoliReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=notacreditosoliReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalTipoNotaCreditoSoli.equals("NONE")) {
				this.tiponotacreditosolisForeignKey=notacreditosoliReturnGeneral.gettiponotacreditosolisForeignKey();
			}

			if(!finalQueryGlobalResponsable.equals("NONE")) {
				this.responsablesForeignKey=notacreditosoliReturnGeneral.getresponsablesForeignKey();
			}

			if(!finalQueryGlobalEstadoNotaCreditoSoli.equals("NONE")) {
				this.estadonotacreditosolisForeignKey=notacreditosoliReturnGeneral.getestadonotacreditosolisForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=notacreditosoliReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=notacreditosoliReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=notacreditosoliReturnGeneral.gettipocambiosForeignKey();
			}

			if(!finalQueryGlobalTransporte.equals("NONE")) {
				this.transportesForeignKey=notacreditosoliReturnGeneral.gettransportesForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=notacreditosoliReturnGeneral.gettransportistasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyNotaCreditoSoli()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyTipoNotaCreditoSoli();
			this.addItemDefectoCombosForeignKeyResponsable();
			this.addItemDefectoCombosForeignKeyEstadoNotaCreditoSoli();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyTipoCambio();
			this.addItemDefectoCombosForeignKeyTransporte();
			this.addItemDefectoCombosForeignKeyTransportista();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoNotaCreditoSoli()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoNotaCreditoSoli()) {
				TipoNotaCreditoSoli tiponotacreditosoli=new TipoNotaCreditoSoli();
				TipoNotaCreditoSoliConstantesFunciones.setTipoNotaCreditoSoliDescripcion(tiponotacreditosoli,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiponotacreditosoli.setId(null);

				if(!TipoNotaCreditoSoliConstantesFunciones.ExisteEnLista(this.tiponotacreditosolisForeignKey,tiponotacreditosoli,true)) {

					this.tiponotacreditosolisForeignKey.add(0,tiponotacreditosoli);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyResponsable()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				Responsable responsable=new Responsable();
				ResponsableConstantesFunciones.setResponsableDescripcion(responsable,Constantes.SMENSAJE_ESCOJA_OPCION);
				responsable.setId(null);

				if(!ResponsableConstantesFunciones.ExisteEnLista(this.responsablesForeignKey,responsable,true)) {

					this.responsablesForeignKey.add(0,responsable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoNotaCreditoSoli()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoSoli()) {
				EstadoNotaCredito estadonotacreditosoli=new EstadoNotaCredito();
				EstadoNotaCreditoConstantesFunciones.setEstadoNotaCreditoDescripcion(estadonotacreditosoli,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadonotacreditosoli.setId(null);

				if(!EstadoNotaCreditoConstantesFunciones.ExisteEnLista(this.estadonotacreditosolisForeignKey,estadonotacreditosoli,true)) {

					this.estadonotacreditosolisForeignKey.add(0,estadonotacreditosoli);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransporte()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				Transporte transporte=new Transporte();
				TransporteConstantesFunciones.setTransporteDescripcion(transporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				transporte.setId(null);

				if(!TransporteConstantesFunciones.ExisteEnLista(this.transportesForeignKey,transporte,true)) {

					this.transportesForeignKey.add(0,transporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.notacreditosoliSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyNotaCreditoSoli()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyNotaCreditoSoli(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyNotaCreditoSoli()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.notacreditosoli.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacreditosoli.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacreditosoli.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacreditosoli.setfecha_cliente(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacreditosoli.setfecha_autorizacion(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoSoli();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyNotaCreditoSoli(NotaCreditoSoli notacreditosoli)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(notacreditosoli.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(notacreditosoli.getid_formato(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(notacreditosoli.getid_tipo_precio(),false,"Formulario");
			this.setActualClienteForeignKey(notacreditosoli.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(notacreditosoli.getid_factura(),false,"Formulario");
			this.setActualTipoNotaCreditoSoliForeignKey(notacreditosoli.getid_tipo_nota_credito_soli(),false,"Formulario");
			this.setActualResponsableForeignKey(notacreditosoli.getid_responsable(),false,"Formulario");
			this.setActualEstadoNotaCreditoSoliForeignKey(notacreditosoli.getid_estado_nota_credito(),false,"Formulario");
			this.setActualCentroCostoForeignKey(notacreditosoli.getid_centro_costo(),false,"Formulario");
			this.setActualVendedorForeignKey(notacreditosoli.getid_vendedor(),false,"Formulario");
			this.setActualTipoCambioForeignKey(notacreditosoli.getid_tipo_cambio(),false,"Formulario");
			this.setActualTransporteForeignKey(notacreditosoli.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(notacreditosoli.getid_transportista(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyNotaCreditoSoli(NotaCreditoSoli notacreditosoli,String sTipoEvento)throws Exception {	
		try {
			
			

				if(notacreditosoli.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(notacreditosoli.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(notacreditosoli.getCliente()!=null && !sTipoEvento.equals("id_clienteNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(notacreditosoli.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(notacreditosoli.getFactura()!=null && !sTipoEvento.equals("id_facturaNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(notacreditosoli.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(notacreditosoli.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(notacreditosoli.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(notacreditosoli.getVendedor()!=null && !sTipoEvento.equals("id_vendedorNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.vendedorsForeignKey=new ArrayList<Vendedor>();
					this.vendedorsForeignKey.add(notacreditosoli.getVendedor());

					this.addItemDefectoCombosForeignKeyVendedor();
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				if(notacreditosoli.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioNotaCreditoSoli")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(notacreditosoli.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyNotaCreditoSoli()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.notacreditosoliConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(this.notacreditosoliConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.notacreditosoliConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualClienteForeignKey(this.notacreditosoliConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(this.notacreditosoliConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualTipoNotaCreditoSoliForeignKey(this.notacreditosoliConstantesFunciones.getid_tipo_nota_credito_soli(),false,"Formulario");
			this.setActualResponsableForeignKey(this.notacreditosoliConstantesFunciones.getid_responsable(),false,"Formulario");
			this.setActualEstadoNotaCreditoSoliForeignKey(this.notacreditosoliConstantesFunciones.getid_estado_nota_credito(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.notacreditosoliConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualVendedorForeignKey(this.notacreditosoliConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualTipoCambioForeignKey(this.notacreditosoliConstantesFunciones.getid_tipo_cambio(),false,"Formulario");
			this.setActualTransporteForeignKey(this.notacreditosoliConstantesFunciones.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.notacreditosoliConstantesFunciones.getid_transportista(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoSoli()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyNotaCreditoSoli()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyNotaCreditoSoli()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroNotaCreditoSoli()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyNotaCreditoSoli()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameTipoNotaCreditoSolisForeignKey("Todos");
			this.cargarCombosFrameResponsablesForeignKey("Todos");
			this.cargarCombosFrameEstadoNotaCreditoSolisForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");
			this.cargarCombosFrameTransportesForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyNotaCreditoSoli(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoNotaCreditoSolisForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoNotaCreditoSolisForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyNotaCreditoSoli()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	










































	
	

	public NotaCreditoSoliBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public NotaCreditoSoliBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public NotaCreditoSoliBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean(); 
		this.notacreditosoliConstantesFunciones=new NotaCreditoSoliConstantesFunciones(); 
		this.notacreditosoliBean=new NotaCreditoSoli();//(this.notacreditosoliConstantesFunciones); 		
		this.notacreditosoliReturnGeneral=new NotaCreditoSoliParameterReturnGeneral(); 
		
		this.notacreditosoliSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.notacreditosoliSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public NotaCreditoSoliBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public NotaCreditoSoliBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public NotaCreditoSoliBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessNotaCreditoSoli(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.notacreditosoliConstantesFunciones=new NotaCreditoSoliConstantesFunciones(); 
			this.notacreditosoliBean=new NotaCreditoSoli();//this.notacreditosoliConstantesFunciones); 			
			this.notacreditosoliReturnGeneral=new NotaCreditoSoliParameterReturnGeneral(); 
		
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Solicitud Nota Credito Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.notacreditosoli=new NotaCreditoSoli();
			this.notacreditosolis = new ArrayList<NotaCreditoSoli>();
			this.notacreditosolisAux = new ArrayList<NotaCreditoSoli>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic=new NotaCreditoSoliLogic();
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			//this.notacreditosoliSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.notacreditosoliSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormNotaCreditoSoli);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCreditoSoli);	
					}
					
					if(this.jInternalFrameImportacionNotaCreditoSoli!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCreditoSoli);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByNotaCreditoSoli!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByNotaCreditoSoli);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCreditoSoli);
				this.jInternalFrameDetalleFormNotaCreditoSoli.setVisible(false);
				this.jInternalFrameDetalleFormNotaCreditoSoli.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCreditoSoli);
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.setVisible(false);
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionNotaCreditoSoli!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionNotaCreditoSoli);
					this.jInternalFrameImportacionNotaCreditoSoli.setVisible(false);
					this.jInternalFrameImportacionNotaCreditoSoli.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByNotaCreditoSoli!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByNotaCreditoSoli);
					this.jInternalFrameOrderByNotaCreditoSoli.setVisible(false);
					this.jInternalFrameOrderByNotaCreditoSoli.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idNotaCreditoSoliActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=NotaCreditoSoliConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.notacreditosoliReturnGeneral=new NotaCreditoSoliParameterReturnGeneral();
			
			this.notacreditosoliParameterGeneral=new NotaCreditoSoliParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.notacreditosoliLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(NotaCreditoSoliJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetaNotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoSoliConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),this.notacreditosoliSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoSoliConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),this.notacreditosoliSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaDuplicarNotaCreditoSoli=true;
			this.isVisibilidadCeldaCopiarNotaCreditoSoli=true;
			this.isVisibilidadCeldaVerFormNotaCreditoSoli=true;
			this.isVisibilidadCeldaOrdenNotaCreditoSoli=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdResponsable=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			this.isVisibilidadFK_IdTipoNotaCreditoSoli=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdTransporte=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosNotaCreditoSoli();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioNotaCreditoSoli(false);
			
			this.setPermisosUsuarioNotaCreditoSoli();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado() 
				|| (this.notacreditosoliSessionBean.getEsGuardarRelacionado() && this.notacreditosoliSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioNotaCreditoSoliClasesRelacionadas();
			}
			
			if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioNotaCreditoSoliClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosNotaCreditoSoli();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualNotaCreditoSoli();
			}
			
			if(!this.isPermisoBusquedaNotaCreditoSoli) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioNotaCreditoSoli,this.isPermisoPaginacionMedioNotaCreditoSoli,this.isPermisoPaginacionTodoNotaCreditoSoli);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(NotaCreditoSoliConstantesFunciones.getTiposSeleccionarNotaCreditoSoli());
				
				this.tiposColumnasSelect=NotaCreditoSoliConstantesFunciones.getTiposSeleccionarNotaCreditoSoli(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectNotaCreditoSoli();				
				//this.tiposRelacionesSelect=NotaCreditoSoliConstantesFunciones.getTiposRelacionesNotaCreditoSoli(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioNotaCreditoSoli();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioNotaCreditoSoli(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioNotaCreditoSoli(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoSoli() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detanotacreditosoliLogic=new DetaNotaCreditoSoliLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.monedaLogic=new MonedaLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.formatoLogic=new FormatoLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.clienteLogic=new ClienteLogic();
			this.facturaLogic=new FacturaLogic();
			this.tiponotacreditosoliLogic=new TipoNotaCreditoSoliLogic();
			this.responsableLogic=new ResponsableLogic();
			this.estadonotacreditosoliLogic=new EstadoNotaCreditoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.vendedorLogic=new VendedorLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			this.transporteLogic=new TransporteLogic();
			this.transportistaLogic=new TransportistaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				notacreditosoliImplementable= (NotaCreditoSoliImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoSoliConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				notacreditosoliImplementableHome= (NotaCreditoSoliImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoSoliConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.notacreditosolis= new ArrayList<NotaCreditoSoli>();
			this.notacreditosolisEliminados= new ArrayList<NotaCreditoSoli>();
						
			this.isEsNuevoNotaCreditoSoli=false;
			this.esParaAccionDesdeFormularioNotaCreditoSoli=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idEmpleadoActual=0L;
			this.idClienteActual=0L;
			this.idFacturaActual=0L;
			this.idCentroCostoActual=0L;
			this.idVendedorActual=0L;
			this.idTipoCambioActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.tiponotacreditosolisForeignKey=new ArrayList<TipoNotaCreditoSoli>() ;
			this.responsablesForeignKey=new ArrayList<Responsable>() ;
			this.estadonotacreditosolisForeignKey=new ArrayList<EstadoNotaCredito>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			this.transportesForeignKey=new ArrayList<Transporte>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyNotaCreditoSoli(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroNotaCreditoSoli();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=NotaCreditoSoliConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesNotaCreditoSoli("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingNotaCreditoSoli(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioNotaCreditoSoli();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioNotaCreditoSoli();
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasNotaCreditoSoli.getTabCount(); i++) {
					this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessNotaCreditoSoli(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga NotaCreditoSoli: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectNotaCreditoSoli() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetaNotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetaNotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesNotaCreditoSoli")) {
				iIndex=this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle  Solicitud Nota Credits")) {
					if(!DetaNotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessNotaCreditoSoli();

						this.cargarParteTabPanelRelacionadaDetaNotaCreditoSoli(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessNotaCreditoSoli();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetaNotaCreditoSoli(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormNotaCreditoSoli.cargarSessionConBeanSwingJInternalFrameDetaNotaCreditoSoli(false,true,iIndex);
		this.jButtonDetaNotaCreditoSoliActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetaNotaCreditoSoli();

		//this.jTabbedPaneRelacionesNotaCreditoSoli.updateUI();
		//this.jTabbedPaneRelacionesNotaCreditoSoli.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesNotaCreditoSoli.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetaNotaCreditoSoli")) {
				int row=this.jTableDatosNotaCreditoSoli.getSelectedRow();
				jButtonDetaNotaCreditoSoliActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle  Solicitud Nota Credit")) {

					if(this.isTienePermisosDetaNotaCreditoSoli && this.notacreditosoliConstantesFunciones.mostrarDetaNotaCreditoSoliNotaCreditoSoli && !NotaCreditoSoliConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle  Solicitud Nota Credits"+"("+DetaNotaCreditoSoliConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle  Solicitud Nota Credits");

						if(notacreditosoliConstantesFunciones.resaltarDetaNotaCreditoSoliNotaCreditoSoli!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(notacreditosoliConstantesFunciones.resaltarDetaNotaCreditoSoliNotaCreditoSoli);
						}

						jmenuItem.setEnabled(this.notacreditosoliConstantesFunciones.activarDetaNotaCreditoSoliNotaCreditoSoli);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetaNotaCreditoSoli"));

						

						this.jInternalFrameDetalleFormNotaCreditoSoli.jmenuDetalleNotaCreditoSoli.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyNotaCreditoSoli(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyNotaCreditoSoli(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyNotaCreditoSoli(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyNotaCreditoSoliListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyNotaCreditoSoli();
		
		this.cargarCombosFrameForeignKeyNotaCreditoSoli();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyNotaCreditoSoli();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyNotaCreditoSoli();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoNotaCreditoSoli(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoNotaCreditoSoliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoNotaCreditoSoli();
				this.cargarCombosFrameTipoNotaCreditoSolisForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoNotaCreditoSoli(this.tiponotacreditosolisForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaResponsable(this.responsablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCreditoSoli(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoNotaCreditoSoliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoNotaCreditoSoli();
				this.cargarCombosFrameEstadoNotaCreditoSolisForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoNotaCreditoSoli(this.estadonotacreditosolisForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransporte(this.transportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoNotaCreditoSoliActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			
			if(jTableDatosNotaCreditoSoli.getRowCount()>=1) {
				jTableDatosNotaCreditoSoli.removeRowSelectionInterval(0, jTableDatosNotaCreditoSoli.getRowCount()-1);						
			}
			
			this.isEsNuevoNotaCreditoSoli=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoNotaCreditoSoli(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesNotaCreditoSoli(true);			
			//this.notacreditosoli=new NotaCreditoSoli();
			//this.notacreditosoli.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoSoli(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli() ;
			
			if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoSoli(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.notacreditosoli);	
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);				
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar NotaCreditoSoli: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarNotaCreditoSoliActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosNotaCreditoSoli.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosNotaCreditoSoli.getSelectedRows().length;			
			}
			
			notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoNotaCreditoSoli--;			
				//NotaCreditoSoli notacreditosoliAux= new NotaCreditoSoli();			
				//notacreditosoliAux.setId(this.iIdNuevoNotaCreditoSoli);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//NotaCreditoSoli notacreditosoliOrigen=new NotaCreditoSoli();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(NotaCreditoSoli notacreditosoliOrigen : notacreditosolisSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							notacreditosoliOrigen =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosoliOrigen =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaNotaCreditoSoli();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.notacreditosoli.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosNotaCreditoSoli(notacreditosoliOrigen,this.notacreditosoli,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditosoliLogic.getNotaCreditoSolis().add(this.notacreditosoliAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditosolis.add(this.notacreditosoliAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
				
				this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoSoli(), this.getIndiceNuevoNotaCreditoSoli());
				
				int iLastRow =  this.jTableDatosNotaCreditoSoli.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCreditoSoli.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCreditoSoli.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();									
		
			NotaCreditoSoli notacreditosoliOrigen=new NotaCreditoSoli();
			NotaCreditoSoli notacreditosoliDestino=new NotaCreditoSoli();
				
			notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosNotaCreditoSoli.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || notacreditosolisSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosNotaCreditoSoli.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliOrigen =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditosoliOrigen =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosoliDestino =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditosoliDestino =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				notacreditosoliOrigen =notacreditosolisSeleccionados.get(0);
				notacreditosoliDestino =notacreditosolisSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosNotaCreditoSoli(notacreditosoliOrigen,notacreditosoliDestino,true,false);
				
				notacreditosoliDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditosoliDestino,notacreditosoliLogic.getNotaCreditoSolis());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditosoliDestino,notacreditosolis);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
				
				//this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoSoli(), this.getIndiceNuevoNotaCreditoSoli());
				
				int iLastRow =  this.jTableDatosNotaCreditoSoli.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCreditoSoli.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCreditoSoli.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesNotaCreditoSoli.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesNotaCreditoSoli.setVisible(!isVisible);
			this.jPanelPaginacionNotaCreditoSoli.setVisible(!isVisible);
			this.jPanelAccionesNotaCreditoSoli.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameNotaCreditoSoli();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoNotaCreditoSoli();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionNotaCreditoSoli();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByNotaCreditoSoli();
			
			this.abrirFrameOrderByNotaCreditoSoli();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByNotaCreditoSoli();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleNotaCreditoSoli(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCreditoSoli);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormNotaCreditoSoli.isMaximum()) {
					this.jInternalFrameDetalleFormNotaCreditoSoli.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormNotaCreditoSoli.setSize(this.jInternalFrameDetalleFormNotaCreditoSoli.iWidthFormulario,this.jInternalFrameDetalleFormNotaCreditoSoli.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormNotaCreditoSoli.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormNotaCreditoSoli.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormNotaCreditoSoli.isMaximum()) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormNotaCreditoSoli.jContentPaneDetalleNotaCreditoSoli.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoSoli.jContentPaneDetalleNotaCreditoSoli.getWidth(),NotaCreditoSoliConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoSoli.jContentPaneDetalleNotaCreditoSoli.getWidth(),NotaCreditoSoliConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoSoli.jContentPaneDetalleNotaCreditoSoli.getWidth(),NotaCreditoSoliConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetaNotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetaNotaCreditoSoli();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormNotaCreditoSoli.setVisible(true);
	        this.jInternalFrameDetalleFormNotaCreditoSoli.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByNotaCreditoSoli() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByNotaCreditoSoli==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByNotaCreditoSoli=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCreditoSoli,false,this);
				} else {
					this.jInternalFrameOrderByNotaCreditoSoli=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCreditoSoli,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByNotaCreditoSoli);
				this.jInternalFrameOrderByNotaCreditoSoli.setVisible(false);
				this.jInternalFrameOrderByNotaCreditoSoli.setSelected(false);
				
				this.jInternalFrameOrderByNotaCreditoSoli.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCreditoSoli"));
				
				this.inicializarActualizarBindingTablaOrderByNotaCreditoSoli();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionNotaCreditoSoli() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionNotaCreditoSoli==null) {
				
				this.jInternalFrameImportacionNotaCreditoSoli=new ImportacionJInternalFrame(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCreditoSoli);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionNotaCreditoSoli);
				this.jInternalFrameImportacionNotaCreditoSoli.setVisible(false);
				this.jInternalFrameImportacionNotaCreditoSoli.setSelected(false);


				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCreditoSoli"));
				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCreditoSoli"));
				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCreditoSoli"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoNotaCreditoSoli() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoSoli==null) {
				this.jInternalFrameReporteDinamicoNotaCreditoSoli=new ReporteDinamicoJInternalFrame(NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCreditoSoli);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCreditoSoli);
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.setVisible(false);
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoSoli"));
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoSoli"));
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoSoli"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoSoli();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetaNotaCreditoSoli() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCreditoSoli.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormNotaCreditoSoli.jContentPaneDetalleNotaCreditoSoli.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCreditoSoli.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCreditoSoli.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCreditoSoli.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleNotaCreditoSoli() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCreditoSoli);
			
	       	this.jInternalFrameDetalleFormNotaCreditoSoli.setVisible(false);
	        this.jInternalFrameDetalleFormNotaCreditoSoli.setSelected(false);
			
			//this.jInternalFrameDetalleFormNotaCreditoSoli.dispose();
			//this.jInternalFrameDetalleFormNotaCreditoSoli=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoNotaCreditoSoli() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoNotaCreditoSoli.setVisible(true);
	        this.jInternalFrameReporteDinamicoNotaCreditoSoli.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionNotaCreditoSoli() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionNotaCreditoSoli.setVisible(true);
	        this.jInternalFrameImportacionNotaCreditoSoli.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByNotaCreditoSoli() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByNotaCreditoSoli.setVisible(true);
	        this.jInternalFrameOrderByNotaCreditoSoli.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByNotaCreditoSoli() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByNotaCreditoSoli.setVisible(false);
	        this.jInternalFrameOrderByNotaCreditoSoli.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoNotaCreditoSoli() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoNotaCreditoSoli.setVisible(false);
	        this.jInternalFrameReporteDinamicoNotaCreditoSoli.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionNotaCreditoSoli() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionNotaCreditoSoli.setVisible(false);
	        this.jInternalFrameImportacionNotaCreditoSoli.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarNotaCreditoSoli(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarNotaCreditoSoli(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesNotaCreditoSoli(true);
			//this.isEsNuevoNotaCreditoSoli=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesNotaCreditoSoli("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoSoli(false) ;
			
			if(notacreditosoliSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.getEsGuardarRelacionado() && DetaNotaCreditoSoliJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaNotaCreditoSoliActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoSoli(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaNotaCreditoSoliActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarNotaCreditoSoli(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesNotaCreditoSoli(true);
			//this.isEsNuevoNotaCreditoSoli=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.notacreditosoli.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesNotaCreditoSoli("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesNotaCreditoSoli(false) ;
			
			if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoSoli(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Empleado")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_empleadoNotaCreditoSoli) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_clienteNotaCreditoSoli) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_facturaNotaCreditoSoli) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_centro_costoNotaCreditoSoli) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("Vendedor")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_vendedorNotaCreditoSoli) {
					this.cargarCombosVendedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_vendedor (id);

				this.recargarComboTablaVendedor(this.vendedorsForeignKey);

			}
			
			if(sType.equals("TipoCambio")) {
				if(!this.notacreditosoliConstantesFunciones.cargarid_tipo_cambioNotaCreditoSoli) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoNotaCreditoSoli(List<TipoNotaCreditoSoli> tiponotacreditosolisForeignKey)throws Exception{
		TableColumn tableColumnTipoNotaCreditoSoli=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI));
		TableCellEditor tableCellEditorTipoNotaCreditoSoli =tableColumnTipoNotaCreditoSoli.getCellEditor();

		TipoNotaCreditoSoliTableCell tiponotacreditosoliTableCellFk=(TipoNotaCreditoSoliTableCell)tableCellEditorTipoNotaCreditoSoli;

		if(tiponotacreditosoliTableCellFk!=null) {
			tiponotacreditosoliTableCellFk.settiponotacreditosolisForeignKey(tiponotacreditosolisForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiponotacreditosoliTableCellFk.setRowActual(intSelectedRow);
			//tiponotacreditosoliTableCellFk.settiponotacreditosolisForeignKeyActual(tiponotacreditosolisForeignKey);
		//}


		if(tiponotacreditosoliTableCellFk!=null) {
			tiponotacreditosoliTableCellFk.RecargarTipoNotaCreditoSolisForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaResponsable(List<Responsable> responsablesForeignKey)throws Exception{
		TableColumn tableColumnResponsable=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE));
		TableCellEditor tableCellEditorResponsable =tableColumnResponsable.getCellEditor();

		ResponsableTableCell responsableTableCellFk=(ResponsableTableCell)tableCellEditorResponsable;

		if(responsableTableCellFk!=null) {
			responsableTableCellFk.setresponsablesForeignKey(responsablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//responsableTableCellFk.setRowActual(intSelectedRow);
			//responsableTableCellFk.setresponsablesForeignKeyActual(responsablesForeignKey);
		//}


		if(responsableTableCellFk!=null) {
			responsableTableCellFk.RecargarResponsablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoNotaCreditoSoli(List<EstadoNotaCredito> estadonotacreditosolisForeignKey)throws Exception{
		TableColumn tableColumnEstadoNotaCreditoSoli=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI));
		TableCellEditor tableCellEditorEstadoNotaCreditoSoli =tableColumnEstadoNotaCreditoSoli.getCellEditor();

		EstadoNotaCreditoTableCell estadonotacreditoTableCellFk=(EstadoNotaCreditoTableCell)tableCellEditorEstadoNotaCreditoSoli;

		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.setestadonotacreditosForeignKey(estadonotacreditosolisForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadonotacreditoTableCellFk.setRowActual(intSelectedRow);
			//estadonotacreditoTableCellFk.setestadonotacreditosForeignKeyActual(estadonotacreditosolisForeignKey);
		//}


		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.RecargarEstadoNotaCreditosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransporte(List<Transporte> transportesForeignKey)throws Exception{
		TableColumn tableColumnTransporte=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE));
		TableCellEditor tableCellEditorTransporte =tableColumnTransporte.getCellEditor();

		TransporteTableCell transporteTableCellFk=(TransporteTableCell)tableCellEditorTransporte;

		if(transporteTableCellFk!=null) {
			transporteTableCellFk.settransportesForeignKey(transportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transporteTableCellFk.setRowActual(intSelectedRow);
			//transporteTableCellFk.settransportesForeignKeyActual(transportesForeignKey);
		//}


		if(transporteTableCellFk!=null) {
			transporteTableCellFk.RecargarTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_vendedor (Long id) throws Exception {
		this.setActualVendedorForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesNotaCreditoSoli(false);
			
			//if(!this.isEsNuevoNotaCreditoSoli) {								
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				
			}
			
			if(this.permiteMantenimiento(this.notacreditosoli)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoNotaCreditoSoli=true;
					this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
					this.isEsNuevoNotaCreditoSoli=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoNotaCreditoSoli=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoNotaCreditoSoli=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCreditoSoli(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(false);
				
				this.habilitarDeshabilitarControlesNotaCreditoSoli(false);
			
												
				
				if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleNotaCreditoSoli();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoNotaCreditoSoliActionPerformed(evt,notacreditosoliSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualNotaCreditoSoli(this.notacreditosoli,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,notacreditosoliSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.notacreditosoli.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				this.notacreditosoli.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				this.notacreditosoli.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.notacreditosoli)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((NotaCreditoSoliModel) this.jTableDatosNotaCreditoSoli.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoNotaCreditoSoli=true;
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
				this.isEsNuevoNotaCreditoSoli=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCreditoSoli(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(false);
				
				this.habilitarDeshabilitarControlesNotaCreditoSoli(false);
				
				
				
				if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleNotaCreditoSoli();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosNotaCreditoSoli.getRowCount()>=1) {
				jTableDatosNotaCreditoSoli.removeRowSelectionInterval(0, jTableDatosNotaCreditoSoli.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesNotaCreditoSoli(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoSoli(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(false) ;
			
			this.isEsNuevoNotaCreditoSoli=false;
			
			if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleNotaCreditoSoli();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingNotaCreditoSoli(false);
				
				//SI ES MANUAL
				if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualNotaCreditoSoli();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoNotaCreditoSoli--;			
			//NotaCreditoSoli notacreditosoliAux= new NotaCreditoSoli();			
			//notacreditosoliAux.setId(this.iIdNuevoNotaCreditoSoli);
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaNotaCreditoSoli();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
			
			this.notacreditosoli.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.notacreditosoliLogic.getNotaCreditoSolis().add(this.notacreditosoliAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.notacreditosolis.add(this.notacreditosoliAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			
			this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoSoli(), this.getIndiceNuevoNotaCreditoSoli());
			
			int iLastRow =  this.jTableDatosNotaCreditoSoli.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosNotaCreditoSoli.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosNotaCreditoSoli.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoSoli(false);
			
			//SI ES MANUAL
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoSoli();
			}
			
			//this.abrirFrameTreeNotaCreditoSoli();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Solicitud Nota CreditoS ?", "MANTENIMIENTO DE Solicitud Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionNotaCreditoSoli.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralNotaCreditoSoli();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.notacreditosoliReturnGeneral=notacreditosoliLogic.procesarImportacionNotaCreditoSolisWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.notacreditosoliParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarNotaCreditoSoliReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionNotaCreditoSoli.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionNotaCreditoSoli.setFileImportacion(this.jInternalFrameImportacionNotaCreditoSoli.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionNotaCreditoSoli.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionNotaCreditoSoli.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionNotaCreditoSoli.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionNotaCreditoSoli.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		

		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("NotaCreditoSoliBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"NotaCreditoSoliBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroPreImpreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroPreImpreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroPreImpreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroPreImpreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDias_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDias_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDias_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDias_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefono_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefono_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefono_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefono_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoNotaCreditoSoli_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoNotaCreditoSoli_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoNotaCreditoSoli_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoNotaCreditoSoli_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Responsable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Responsable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Responsable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Responsable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoNotaCreditoSoli_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoNotaCreditoSoli_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoNotaCreditoSoli_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoNotaCreditoSoli_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nalizado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nalizado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nalizado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nalizado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUMAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_man_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_man_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_man_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_man_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talSinIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talSinIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talSinIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talSinIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoGeneral_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoGeneral_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoGeneral_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoGeneral_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nanciamiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nanciamiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nanciamiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nanciamiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_roValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_roValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_roValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_roValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoria="numero";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoria="numero_dias";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoria="direccion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoria="telefono";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI:
					sNombreCampoCategoria="id_tipo_nota_credito_soli";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoria="id_responsable";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI:
					sNombreCampoCategoria="id_estado_nota_credito";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO:
					sNombreCampoCategoria="penalizado";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoria="descuento_porcentaje";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoria="suman";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoria="total_sin_iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL:
					sNombreCampoCategoria="descuento_general";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTRO:
					sNombreCampoCategoria="otro";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoria="financiamiento";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR:
					sNombreCampoCategoria="otro_valor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoria="retencion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoria="id_transporte";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoria="fecha_cliente";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoria="fecha_autorizacion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoriaValor="numero";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoriaValor="numero_dias";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoriaValor="direccion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoriaValor="telefono";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI:
					sNombreCampoCategoriaValor="id_tipo_nota_credito_soli";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoriaValor="id_responsable";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI:
					sNombreCampoCategoriaValor="id_estado_nota_credito";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO:
					sNombreCampoCategoriaValor="penalizado";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoriaValor="descuento_porcentaje";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoriaValor="suman";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoriaValor="total_sin_iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL:
					sNombreCampoCategoriaValor="descuento_general";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTRO:
					sNombreCampoCategoriaValor="otro";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoriaValor="financiamiento";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR:
					sNombreCampoCategoriaValor="otro_valor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoriaValor="retencion";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoriaValor="id_transporte";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoriaValor="fecha_cliente";
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoriaValor="fecha_autorizacion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Preimpreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dias",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_dias");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_nota_credito_soli");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Responsable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_responsable");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_nota_credito");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Penalizado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"penalizado");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dscto %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_porcentaje");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Con Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUMAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Suman",sNombreCampoCategoria,sNombreCampoCategoriaValor,"suman");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dsto Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_sin_iva");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Dscto General",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_general");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otro");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Financiamiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"financiamiento");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otro Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otro_valor");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"retencion");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transporte");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_cliente");
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_autorizacion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("NotaCreditoSolis");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getnumero());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getnumero_dias());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getdireccion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettelefono());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RUC);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettiponotacreditosoli_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getresponsable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getestadonotacreditosoli_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getpenalizado());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getdescuento_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUMAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getsuman());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettotal_sin_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getdescuento_general());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTRO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getotro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IVA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfinanciamiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getotro_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_RETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getretencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_ICE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfecha_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION);
					iRow++;

					for(NotaCreditoSoli notacreditosoli:notacreditosolisSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditosoli.getfecha_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelNotaCreditoSoli(row);				
			//	iRow++;
			//}				
			
			//for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelNotaCreditoSoli(notacreditosoliAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoSoli(false);
			
			//SI ES MANUAL
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoSoli();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoSoli(false);
			
			//SI ES MANUAL
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCreditoSoli();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoSoli(false);
			
			//SI ES MANUAL
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCreditoSoli();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaNotaCreditoSoli() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosNotaCreditoSoli.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosNotaCreditoSoli.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosNotaCreditoSoli.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosNotaCreditoSoli.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosNotaCreditoSoli.setMinimumSize(dimensionMinimum);
		this.jTableDatosNotaCreditoSoli.setMaximumSize(dimensionMaximum);
		this.jTableDatosNotaCreditoSoli.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingNotaCreditoSoli(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingNotaCreditoSoli(esInicializar,true);
	}
	
	public void inicializarActualizarBindingNotaCreditoSoli(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaNotaCreditoSoli(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesNotaCreditoSoli(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasNotaCreditoSoli(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoSoli(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesNotaCreditoSoli(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualNotaCreditoSoli() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaNotaCreditoSoli();
		
		this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCreditoSoli();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoSoli() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoSoli(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoSoli(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosNotaCreditoSoli.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosNotaCreditoSoli.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteNotaCreditoSoli.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionNuevoNotaCreditoSoli.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionSinCerrarNotaCreditoSoli.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionSinMensajeNotaCreditoSoli.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosNotaCreditoSoli.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosNotaCreditoSoli.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteNotaCreditoSoli.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionNuevoNotaCreditoSoli.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionSinCerrarNotaCreditoSoli.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxPostAccionSinMensajeNotaCreditoSoli.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionNotaCreditoSoli.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionNotaCreditoSoli.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesNotaCreditoSoli.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesNotaCreditoSoli.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesNotaCreditoSoli.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarNotaCreditoSoli.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesNotaCreditoSoli.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesNotaCreditoSoli.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralNotaCreditoSoli.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesNotaCreditoSoli(Boolean esInicializar) throws Exception {
		try	{	
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoSoli(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoSoli() throws Exception {
		try	{
			if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCreditoSoli();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCreditoSoli() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCreditoSoli() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesNotaCreditoSoli.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesNotaCreditoSoli.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesNotaCreditoSoli.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionNotaCreditoSoli.addItem(reporte);
			}
			
			
			if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionNotaCreditoSoli.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionNotaCreditoSoli.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesNotaCreditoSoli.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesNotaCreditoSoli.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarNotaCreditoSoli.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarNotaCreditoSoli.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarNotaCreditoSoli.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoSoli();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoSoli() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
				
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=NotaCreditoSoliConstantesFunciones.getTiposSeleccionarNotaCreditoSoli(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=NotaCreditoSoliConstantesFunciones.getTiposSeleccionarNotaCreditoSoli(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=NotaCreditoSoliConstantesFunciones.getTiposSeleccionarNotaCreditoSoli(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualNotaCreditoSoli()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.getSelectedItem()!=null){this.id_estado_nota_creditoFK_IdEstadoNotaCreditoSoli=((EstadoNotaCredito)this.jComboBoxid_estado_nota_creditoFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.getSelectedItem()!=null){this.id_responsableFK_IdResponsable=((Responsable)this.jComboBoxid_responsableFK_IdResponsableNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.getSelectedItem()!=null){this.id_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli=((TipoNotaCreditoSoli)this.jComboBoxid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoliNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.getSelectedItem()!=null){this.id_transportistaFK_IdTransportista=((Transportista)this.jComboBoxid_transportistaFK_IdTransportistaNotaCreditoSoli.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoSoli.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasNotaCreditoSoli(Boolean esInicializar) throws Exception {				
		if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCreditoSoli();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaNotaCreditoSoli() throws Exception {
		this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByNotaCreditoSoli() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosNotaCreditoSoliOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoliOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaNotaCreditoSoli(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=notacreditosoliLogic.getNotaCreditoSolis().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=notacreditosolis.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosNotaCreditoSoli.setModel(new NotaCreditoSoliModel(this.notacreditosoliLogic.getNotaCreditoSolis(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosNotaCreditoSoli.setModel(new NotaCreditoSoliModel(this.notacreditosolis,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByNotaCreditoSoli!=null && this.jInternalFrameOrderByNotaCreditoSoli.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByNotaCreditoSoli();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO,notacreditosoliConstantesFunciones.resaltarSeleccionarNotaCreditoSoli,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+NotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO,notacreditosoliConstantesFunciones.resaltarSeleccionarNotaCreditoSoli,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_ID));

		if(this.notacreditosoliConstantesFunciones.mostraridNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltaridNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activaridNotaCreditoSoli,iSizeTabla,this,true,"idNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltaridNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activaridNotaCreditoSoli,this,true,"idNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA));

		if(this.notacreditosoliConstantesFunciones.mostrarid_empresaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_empresaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_empresaNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_empresaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_empresaNotaCreditoSoli,false,"id_empresaNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.notacreditosoliConstantesFunciones.mostrarid_sucursalNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_sucursalNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_sucursalNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_sucursalNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_sucursalNotaCreditoSoli,false,"id_sucursalNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_ejercicioNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_ejercicioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_ejercicioNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_ejercicioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_ejercicioNotaCreditoSoli,false,"id_ejercicioNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_periodoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_periodoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_periodoNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_periodoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_periodoNotaCreditoSoli,false,"id_periodoNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDANIO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_anioNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_anioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_anioNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_anioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_anioNotaCreditoSoli,true,"id_anioNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDMES));

		if(this.notacreditosoliConstantesFunciones.mostrarid_mesNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_mesNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_mesNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_mesNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_mesNotaCreditoSoli,true,"id_mesNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_usuarioNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_usuarioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_usuarioNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_usuarioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_usuarioNotaCreditoSoli,false,"id_usuarioNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_CODIGO));

		if(this.notacreditosoliConstantesFunciones.mostrarcodigoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltarcodigoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarcodigoNotaCreditoSoli,iSizeTabla,this,true,"codigoNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarcodigoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarcodigoNotaCreditoSoli,this,true,"codigoNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO));

		if(this.notacreditosoliConstantesFunciones.mostrarnumeroNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltarnumeroNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarnumeroNotaCreditoSoli,iSizeTabla,this,true,"numeroNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarnumeroNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarnumeroNotaCreditoSoli,this,true,"numeroNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION));

		if(this.notacreditosoliConstantesFunciones.mostrarfecha_emisionNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.notacreditosoliConstantesFunciones.resaltarfecha_emisionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfecha_emisionNotaCreditoSoli,iSizeTabla,this,true,"fecha_emisionNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarfecha_emisionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfecha_emisionNotaCreditoSoli,this,true,"fecha_emisionNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS));

		if(this.notacreditosoliConstantesFunciones.mostrarnumero_diasNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarnumero_diasNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarnumero_diasNotaCreditoSoli,iSizeTabla,this,true,"numero_diasNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarnumero_diasNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarnumero_diasNotaCreditoSoli,this,true,"numero_diasNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.notacreditosoliConstantesFunciones.mostrarfecha_vencimientoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.notacreditosoliConstantesFunciones.resaltarfecha_vencimientoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfecha_vencimientoNotaCreditoSoli,iSizeTabla,this,true,"fecha_vencimientoNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarfecha_vencimientoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfecha_vencimientoNotaCreditoSoli,this,true,"fecha_vencimientoNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA));

		if(this.notacreditosoliConstantesFunciones.mostrarid_monedaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_monedaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_monedaNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_monedaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_monedaNotaCreditoSoli,false,"id_monedaNotaCreditoSoli","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_empleadoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_empleadoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_empleadoNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_empleadoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_empleadoNotaCreditoSoli,true,"id_empleadoNotaCreditoSoli","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION));

		if(this.notacreditosoliConstantesFunciones.mostrarcotizacionNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarcotizacionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarcotizacionNotaCreditoSoli,iSizeTabla,this,true,"cotizacionNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarcotizacionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarcotizacionNotaCreditoSoli,this,true,"cotizacionNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_formatoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_formatoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_formatoNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_formatoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_formatoNotaCreditoSoli,true,"id_formatoNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.notacreditosoliConstantesFunciones.mostrarid_tipo_precioNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_tipo_precioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_tipo_precioNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_tipo_precioNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_tipo_precioNotaCreditoSoli,true,"id_tipo_precioNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE));

		if(this.notacreditosoliConstantesFunciones.mostrarid_clienteNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_clienteNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_clienteNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_clienteNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_clienteNotaCreditoSoli,true,"id_clienteNotaCreditoSoli","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA));

		if(this.notacreditosoliConstantesFunciones.mostrarid_facturaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_facturaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_facturaNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_facturaNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_facturaNotaCreditoSoli,true,"id_facturaNotaCreditoSoli","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION));

		if(this.notacreditosoliConstantesFunciones.mostrardireccionNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltardireccionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardireccionNotaCreditoSoli,iSizeTabla,this,true,"direccionNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltardireccionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardireccionNotaCreditoSoli,this,true,"direccionNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO));

		if(this.notacreditosoliConstantesFunciones.mostrartelefonoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltartelefonoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartelefonoNotaCreditoSoli,iSizeTabla,this,true,"telefonoNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltartelefonoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartelefonoNotaCreditoSoli,this,true,"telefonoNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_RUC));

		if(this.notacreditosoliConstantesFunciones.mostrarrucNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltarrucNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarrucNotaCreditoSoli,iSizeTabla,this,true,"rucNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarrucNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarrucNotaCreditoSoli,this,true,"rucNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI));

		if(this.notacreditosoliConstantesFunciones.mostrarid_tipo_nota_credito_soliNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoNotaCreditoSoliTableCell(this.tiponotacreditosolisForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_tipo_nota_credito_soliNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_tipo_nota_credito_soliNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new TipoNotaCreditoSoliTableCell(this.tiponotacreditosolisForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_tipo_nota_credito_soliNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_tipo_nota_credito_soliNotaCreditoSoli,true,"id_tipo_nota_credito_soliNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE));

		if(this.notacreditosoliConstantesFunciones.mostrarid_responsableNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ResponsableTableCell(this.responsablesForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_responsableNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_responsableNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new ResponsableTableCell(this.responsablesForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_responsableNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_responsableNotaCreditoSoli,true,"id_responsableNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI));

		if(this.notacreditosoliConstantesFunciones.mostrarid_estado_nota_creditoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoNotaCreditoTableCell(this.estadonotacreditosolisForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_estado_nota_creditoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_estado_nota_creditoNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new EstadoNotaCreditoTableCell(this.estadonotacreditosolisForeignKey,this.notacreditosoliConstantesFunciones.resaltarid_estado_nota_creditoNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarid_estado_nota_creditoNotaCreditoSoli,true,"id_estado_nota_creditoNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION));

		if(this.notacreditosoliConstantesFunciones.mostrardescripcionNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditosoliConstantesFunciones.resaltardescripcionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescripcionNotaCreditoSoli,iSizeTabla,this,true,"descripcionNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltardescripcionNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescripcionNotaCreditoSoli,this,true,"descripcionNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO));

		if(this.notacreditosoliConstantesFunciones.mostrarpenalizadoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.notacreditosoliConstantesFunciones.resaltarpenalizadoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarpenalizadoNotaCreditoSoli,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarpenalizadoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarpenalizadoNotaCreditoSoli,this,true,"penalizadoNotaCreditoSoli","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE));

		if(this.notacreditosoliConstantesFunciones.mostrardescuento_porcentajeNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_porcentajeNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_porcentajeNotaCreditoSoli,iSizeTabla,this,true,"descuento_porcentajeNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_porcentajeNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_porcentajeNotaCreditoSoli,this,true,"descuento_porcentajeNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA));

		if(this.notacreditosoliConstantesFunciones.mostrartotal_ivaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltartotal_ivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotal_ivaNotaCreditoSoli,iSizeTabla,this,true,"total_ivaNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltartotal_ivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotal_ivaNotaCreditoSoli,this,true,"total_ivaNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_SUMAN));

		if(this.notacreditosoliConstantesFunciones.mostrarsumanNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_SUMAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarsumanNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarsumanNotaCreditoSoli,iSizeTabla,this,true,"sumanNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarsumanNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarsumanNotaCreditoSoli,this,true,"sumanNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.notacreditosoliConstantesFunciones.mostrardescuento_valorNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_valorNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_valorNotaCreditoSoli,iSizeTabla,this,true,"descuento_valorNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_valorNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_valorNotaCreditoSoli,this,true,"descuento_valorNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA));

		if(this.notacreditosoliConstantesFunciones.mostrartotal_sin_ivaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltartotal_sin_ivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotal_sin_ivaNotaCreditoSoli,iSizeTabla,this,true,"total_sin_ivaNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltartotal_sin_ivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotal_sin_ivaNotaCreditoSoli,this,true,"total_sin_ivaNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL));

		if(this.notacreditosoliConstantesFunciones.mostrardescuento_generalNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_generalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_generalNotaCreditoSoli,iSizeTabla,this,true,"descuento_generalNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltardescuento_generalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activardescuento_generalNotaCreditoSoli,this,true,"descuento_generalNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_FLETE));

		if(this.notacreditosoliConstantesFunciones.mostrarfleteNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_FLETE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarfleteNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfleteNotaCreditoSoli,iSizeTabla,this,true,"fleteNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarfleteNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfleteNotaCreditoSoli,this,true,"fleteNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_TOTAL));

		if(this.notacreditosoliConstantesFunciones.mostrartotalNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltartotalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotalNotaCreditoSoli,iSizeTabla,this,true,"totalNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltartotalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activartotalNotaCreditoSoli,this,true,"totalNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL));

		if(this.notacreditosoliConstantesFunciones.mostrarsub_totalNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarsub_totalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarsub_totalNotaCreditoSoli,iSizeTabla,this,true,"sub_totalNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarsub_totalNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarsub_totalNotaCreditoSoli,this,true,"sub_totalNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_OTRO));

		if(this.notacreditosoliConstantesFunciones.mostrarotroNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_OTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarotroNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarotroNotaCreditoSoli,iSizeTabla,this,true,"otroNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarotroNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarotroNotaCreditoSoli,this,true,"otroNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_IVA));

		if(this.notacreditosoliConstantesFunciones.mostrarivaNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarivaNotaCreditoSoli,iSizeTabla,this,true,"ivaNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarivaNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarivaNotaCreditoSoli,this,true,"ivaNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO));

		if(this.notacreditosoliConstantesFunciones.mostrarfinanciamientoNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarfinanciamientoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfinanciamientoNotaCreditoSoli,iSizeTabla,this,true,"financiamientoNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarfinanciamientoNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarfinanciamientoNotaCreditoSoli,this,true,"financiamientoNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR));

		if(this.notacreditosoliConstantesFunciones.mostrarotro_valorNotaCreditoSoli && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditosoliConstantesFunciones.resaltarotro_valorNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarotro_valorNotaCreditoSoli,iSizeTabla,this,true,"otro_valorNotaCreditoSoli","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditosoliConstantesFunciones.resaltarotro_valorNotaCreditoSoli,this.notacreditosoliConstantesFunciones.activarotro_valorNotaCreditoSoli,this,true,"otro_valorNotaCreditoSoli","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoSoliPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetaNotaCreditoSoli && this.notacreditosoliConstantesFunciones.mostrarDetaNotaCreditoSoliNotaCreditoSoli && !NotaCreditoSoliConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle  Solicitud Nota Credits");
				tableColumn.setHeaderValue("Detalle  Solicitud Nota Credits");
				tableColumn.setCellRenderer(new DetaNotaCreditoSoliTableCell(notacreditosoliConstantesFunciones.resaltarDetaNotaCreditoSoliNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarDetaNotaCreditoSoliNotaCreditoSoli));
				tableColumn.setCellEditor(new DetaNotaCreditoSoliTableCell(notacreditosoliConstantesFunciones.resaltarDetaNotaCreditoSoliNotaCreditoSoli,this,this.notacreditosoliConstantesFunciones.activarDetaNotaCreditoSoliNotaCreditoSoli));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.notacreditosoliSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosNotaCreditoSoli.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditosoliSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosNotaCreditoSoli.moveColumn(this.jTableDatosNotaCreditoSoli.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosNotaCreditoSoli.moveColumn(this.jTableDatosNotaCreditoSoli.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditosoliSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosNotaCreditoSoli.moveColumn(this.jTableDatosNotaCreditoSoli.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosNotaCreditoSoli.moveColumn(this.jTableDatosNotaCreditoSoli.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosNotaCreditoSoli.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosNotaCreditoSoli.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosNotaCreditoSoli,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosNotaCreditoSoli.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosNotaCreditoSoli.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosNotaCreditoSoli.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosNotaCreditoSoli.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=notacreditosoliLogic.getNotaCreditoSolis().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=notacreditosolis.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosNotaCreditoSoli.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosNotaCreditoSoli.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosNotaCreditoSoli();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoNotaCreditoSoli=false;
					
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
				if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCreditoSoli.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.notacreditosoli.getsType().equals("DUPLICADO")
				   || this.notacreditosoli.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoNotaCreditoSoli=true;
				
				} else {
					this.isEsNuevoNotaCreditoSoli=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					if(this.notacreditosoli.getId()>=0 && !this.notacreditosoli.getIsNew()) {						
						this.isEsNuevoNotaCreditoSoli=false;
						
					} else {
						this.isEsNuevoNotaCreditoSoli=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoNotaCreditoSoli(esRelaciones);						
				
				this.seleccionarNotaCreditoSoli(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.notacreditosoli.getId()<0) {
					this.isEsNuevoNotaCreditoSoli=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarNotaCreditoSoli(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarNotaCreditoSoli(evt,rowIndex);
				}	
				
				if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion NotaCreditoSoli: " + this.dDif); 
					}
				}								
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarNotaCreditoSoli(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.notacreditosoli)) {
					if(this.notacreditosoli.getId()>0) {
						this.notacreditosoli.setIsDeleted(true);
						
						this.notacreditosolisEliminados.add(this.notacreditosoli);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditosoliLogic.getNotaCreditoSolis().remove(this.notacreditosoli);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditosolis.remove(this.notacreditosoli);				
					}
					
					
					((NotaCreditoSoliModel) this.jTableDatosNotaCreditoSoli.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoSoli(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarNotaCreditoSoli(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoNotaCreditoSoli) {
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCreditoSoli.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCreditoSoli.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoli);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.notacreditosoliConstantesFunciones.cargarid_empresaNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_empresaNotaCreditoSoli) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.notacreditosoli.getid_empresa());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(notacreditosoli.getEmpresa()!=null) {
							this.empresasForeignKey.add(notacreditosoli.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.notacreditosoli.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.notacreditosoliConstantesFunciones.cargarid_sucursalNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_sucursalNotaCreditoSoli) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.notacreditosoli.getid_sucursal());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(notacreditosoli.getSucursal()!=null) {
							this.sucursalsForeignKey.add(notacreditosoli.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.notacreditosoli.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.notacreditosoliConstantesFunciones.cargarid_ejercicioNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_ejercicioNotaCreditoSoli) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.notacreditosoli.getid_ejercicio());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(notacreditosoli.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(notacreditosoli.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.notacreditosoli.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.notacreditosoliConstantesFunciones.cargarid_periodoNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_periodoNotaCreditoSoli) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.notacreditosoli.getid_periodo());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(notacreditosoli.getPeriodo()!=null) {
							this.periodosForeignKey.add(notacreditosoli.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.notacreditosoli.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.notacreditosoliConstantesFunciones.cargarid_anioNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_anioNotaCreditoSoli) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.notacreditosoli.getid_anio());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(notacreditosoli.getAnio()!=null) {
							this.aniosForeignKey.add(notacreditosoli.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.notacreditosoli.getid_anio(),false,"Formulario");

					//Mes
					if(!this.notacreditosoliConstantesFunciones.cargarid_mesNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_mesNotaCreditoSoli) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.notacreditosoli.getid_mes());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(notacreditosoli.getMes()!=null) {
							this.messForeignKey.add(notacreditosoli.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.notacreditosoli.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.notacreditosoliConstantesFunciones.cargarid_usuarioNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_usuarioNotaCreditoSoli) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.notacreditosoli.getid_usuario());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(notacreditosoli.getUsuario()!=null) {
							this.usuariosForeignKey.add(notacreditosoli.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.notacreditosoli.getid_usuario(),false,"Formulario");

					//Moneda
					if(!this.notacreditosoliConstantesFunciones.cargarid_monedaNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_monedaNotaCreditoSoli) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.notacreditosoli.getid_moneda());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(notacreditosoli.getMoneda()!=null) {
							this.monedasForeignKey.add(notacreditosoli.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.notacreditosoli.getid_moneda(),false,"Formulario");

					//Empleado
					if(!this.notacreditosoliConstantesFunciones.cargarid_empleadoNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_empleadoNotaCreditoSoli) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.notacreditosoli.getid_empleado());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(notacreditosoli.getEmpleado()!=null) {
							this.empleadosForeignKey.add(notacreditosoli.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.notacreditosoli.getid_empleado(),false,"Formulario");

					//Formato
					if(!this.notacreditosoliConstantesFunciones.cargarid_formatoNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_formatoNotaCreditoSoli) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.notacreditosoli.getid_formato());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(notacreditosoli.getFormato()!=null) {
							this.formatosForeignKey.add(notacreditosoli.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.notacreditosoli.getid_formato(),false,"Formulario");

					//TipoPrecio
					if(!this.notacreditosoliConstantesFunciones.cargarid_tipo_precioNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_tipo_precioNotaCreditoSoli) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.notacreditosoli.getid_tipo_precio());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(notacreditosoli.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(notacreditosoli.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.notacreditosoli.getid_tipo_precio(),false,"Formulario");

					//Cliente
					if(!this.notacreditosoliConstantesFunciones.cargarid_clienteNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_clienteNotaCreditoSoli) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.notacreditosoli.getid_cliente());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(notacreditosoli.getCliente()!=null) {
							this.clientesForeignKey.add(notacreditosoli.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.notacreditosoli.getid_cliente(),false,"Formulario");

					//Factura
					if(!this.notacreditosoliConstantesFunciones.cargarid_facturaNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_facturaNotaCreditoSoli) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.notacreditosoli.getid_factura());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(notacreditosoli.getFactura()!=null) {
							this.facturasForeignKey.add(notacreditosoli.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.notacreditosoli.getid_factura(),false,"Formulario");

					//TipoNotaCreditoSoli
					if(!this.notacreditosoliConstantesFunciones.cargarid_tipo_nota_credito_soliNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_tipo_nota_credito_soliNotaCreditoSoli) {
						//this.cargarCombosTipoNotaCreditoSolisForeignKeyLista(" where id="+this.notacreditosoli.getid_tipo_nota_credito_soli());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.tiponotacreditosolisForeignKey=new ArrayList<TipoNotaCreditoSoli>();

						if(notacreditosoli.getTipoNotaCreditoSoli()!=null) {
							this.tiponotacreditosolisForeignKey.add(notacreditosoli.getTipoNotaCreditoSoli());
						}

						this.addItemDefectoCombosForeignKeyTipoNotaCreditoSoli();
						this.cargarCombosFrameTipoNotaCreditoSolisForeignKey("Todos");
					}
					this.setActualTipoNotaCreditoSoliForeignKey(this.notacreditosoli.getid_tipo_nota_credito_soli(),false,"Formulario");

					//Responsable
					if(!this.notacreditosoliConstantesFunciones.cargarid_responsableNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_responsableNotaCreditoSoli) {
						//this.cargarCombosResponsablesForeignKeyLista(" where id="+this.notacreditosoli.getid_responsable());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.responsablesForeignKey=new ArrayList<Responsable>();

						if(notacreditosoli.getResponsable()!=null) {
							this.responsablesForeignKey.add(notacreditosoli.getResponsable());
						}

						this.addItemDefectoCombosForeignKeyResponsable();
						this.cargarCombosFrameResponsablesForeignKey("Todos");
					}
					this.setActualResponsableForeignKey(this.notacreditosoli.getid_responsable(),false,"Formulario");

					//EstadoNotaCreditoSoli
					if(!this.notacreditosoliConstantesFunciones.cargarid_estado_nota_creditoNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_estado_nota_creditoNotaCreditoSoli) {
						//this.cargarCombosEstadoNotaCreditoSolisForeignKeyLista(" where id="+this.notacreditosoli.getid_estado_nota_credito());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.estadonotacreditosolisForeignKey=new ArrayList<EstadoNotaCredito>();

						if(notacreditosoli.getEstadoNotaCreditoSoli()!=null) {
							this.estadonotacreditosolisForeignKey.add(notacreditosoli.getEstadoNotaCreditoSoli());
						}

						this.addItemDefectoCombosForeignKeyEstadoNotaCreditoSoli();
						this.cargarCombosFrameEstadoNotaCreditoSolisForeignKey("Todos");
					}
					this.setActualEstadoNotaCreditoSoliForeignKey(this.notacreditosoli.getid_estado_nota_credito(),false,"Formulario");

					//CentroCosto
					if(!this.notacreditosoliConstantesFunciones.cargarid_centro_costoNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_centro_costoNotaCreditoSoli) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.notacreditosoli.getid_centro_costo());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(notacreditosoli.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(notacreditosoli.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.notacreditosoli.getid_centro_costo(),false,"Formulario");

					//Vendedor
					if(!this.notacreditosoliConstantesFunciones.cargarid_vendedorNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_vendedorNotaCreditoSoli) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.notacreditosoli.getid_vendedor());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(notacreditosoli.getVendedor()!=null) {
							this.vendedorsForeignKey.add(notacreditosoli.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.notacreditosoli.getid_vendedor(),false,"Formulario");

					//TipoCambio
					if(!this.notacreditosoliConstantesFunciones.cargarid_tipo_cambioNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_tipo_cambioNotaCreditoSoli) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.notacreditosoli.getid_tipo_cambio());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(notacreditosoli.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(notacreditosoli.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.notacreditosoli.getid_tipo_cambio(),false,"Formulario");

					//Transporte
					if(!this.notacreditosoliConstantesFunciones.cargarid_transporteNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_transporteNotaCreditoSoli) {
						//this.cargarCombosTransportesForeignKeyLista(" where id="+this.notacreditosoli.getid_transporte());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.transportesForeignKey=new ArrayList<Transporte>();

						if(notacreditosoli.getTransporte()!=null) {
							this.transportesForeignKey.add(notacreditosoli.getTransporte());
						}

						this.addItemDefectoCombosForeignKeyTransporte();
						this.cargarCombosFrameTransportesForeignKey("Todos");
					}
					this.setActualTransporteForeignKey(this.notacreditosoli.getid_transporte(),false,"Formulario");

					//Transportista
					if(!this.notacreditosoliConstantesFunciones.cargarid_transportistaNotaCreditoSoli || this.notacreditosoliConstantesFunciones.event_dependid_transportistaNotaCreditoSoli) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.notacreditosoli.getid_transportista());
									//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(notacreditosoli.getTransportista()!=null) {
							this.transportistasForeignKey.add(notacreditosoli.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.notacreditosoli.getid_transportista(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesNotaCreditoSoli("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesNotaCreditoSoli(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoSoli() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCreditoSoli(NotaCreditoSoli notacreditosoli) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoNotaCreditoSoli(notacreditosoli,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioNotaCreditoSoli(notacreditosoli);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyNotaCreditoSoli(notacreditosoli,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoSoli(notacreditosoli);
	}
	
	public void setVariablesObjetoActualToFormularioNotaCreditoSoli(NotaCreditoSoli notacreditosoli) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setText(notacreditosoli.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setText(notacreditosoli.getcodigo());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setText(notacreditosoli.getnumero());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setDate(notacreditosoli.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setText(notacreditosoli.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setDate(notacreditosoli.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setText(notacreditosoli.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setText(notacreditosoli.getdireccion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setText(notacreditosoli.gettelefono());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setText(notacreditosoli.getruc());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setText(notacreditosoli.getdescripcion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setSelected(notacreditosoli.getpenalizado());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setText(notacreditosoli.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setText(notacreditosoli.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setText(notacreditosoli.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setText(notacreditosoli.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setText(notacreditosoli.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setText(notacreditosoli.getdescuento_general().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setText(notacreditosoli.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setText(notacreditosoli.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setText(notacreditosoli.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setText(notacreditosoli.getotro().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setText(notacreditosoli.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setText(notacreditosoli.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setText(notacreditosoli.getotro_valor().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,NotaCreditoSoli notacreditosoliLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,notacreditosoliLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,NotaCreditoSoli notacreditosoliLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				notacreditosoliLocal=this.notacreditosoli;
			} else {
				notacreditosoliLocal=this.notacreditosoliAnterior;
			}
		}
		
		if(this.permiteMantenimiento(notacreditosoliLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoNotaCreditoSoli(notacreditosoliLocal,true);
					
					if(notacreditosoliSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(notacreditosoliLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(notacreditosoliLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCreditoSoli(notacreditosoli,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(notacreditosoli);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCreditoSoli(notacreditosoli,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.getText()==null || this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.getText()=="" || this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.getText()=="Id") {
				this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setText("0");
			}

			if(conColumnasBase) {notacreditosoli.setId(Long.parseLong(this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelIdNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setcodigo(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcodigoNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setnumero(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumeroNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setfecha_emision(this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_emisionNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setnumero_dias(Integer.parseInt(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelnumero_diasNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setfecha_vencimiento(this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfecha_vencimientoNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelcotizacionNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setdireccion(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldireccionNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.settelefono(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltelefonoNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setruc(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelrucNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setdescripcion(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescripcionNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setpenalizado(this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelpenalizadoNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setdescuento_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_porcentajeNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_ivaNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setsuman(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_SUMAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsumanNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_valorNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.settotal_sin_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotal_sin_ivaNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setdescuento_general(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeldescuento_generalNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setflete(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_FLETE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfleteNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.settotal(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabeltotalNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelsub_totalNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setotro(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_OTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotroNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setiva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelivaNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setfinanciamiento(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelfinanciamientoNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditosoli.setotro_valor(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelotro_valorNotaCreditoSoli,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCreditoSoli(NotaCreditoSoli notacreditosoliBean,NotaCreditoSoli notacreditosoli,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosNotaCreditoSoli(NotaCreditoSoli notacreditosoliOrigen,NotaCreditoSoli notacreditosoli,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditosoliOrigen.getId()!=null && !notacreditosoliOrigen.getId().equals(0L))) {notacreditosoli.setId(notacreditosoliOrigen.getId());}}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getcodigo()!=null && !notacreditosoliOrigen.getcodigo().equals(""))) {notacreditosoli.setcodigo(notacreditosoliOrigen.getcodigo());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getnumero()!=null && !notacreditosoliOrigen.getnumero().equals(""))) {notacreditosoli.setnumero(notacreditosoliOrigen.getnumero());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfecha_emision()!=null && !notacreditosoliOrigen.getfecha_emision().equals(new Date()))) {notacreditosoli.setfecha_emision(notacreditosoliOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getnumero_dias()!=null && !notacreditosoliOrigen.getnumero_dias().equals(0))) {notacreditosoli.setnumero_dias(notacreditosoliOrigen.getnumero_dias());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfecha_vencimiento()!=null && !notacreditosoliOrigen.getfecha_vencimiento().equals(new Date()))) {notacreditosoli.setfecha_vencimiento(notacreditosoliOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getcotizacion()!=null && !notacreditosoliOrigen.getcotizacion().equals(0.0))) {notacreditosoli.setcotizacion(notacreditosoliOrigen.getcotizacion());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getdireccion()!=null && !notacreditosoliOrigen.getdireccion().equals(""))) {notacreditosoli.setdireccion(notacreditosoliOrigen.getdireccion());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.gettelefono()!=null && !notacreditosoliOrigen.gettelefono().equals(""))) {notacreditosoli.settelefono(notacreditosoliOrigen.gettelefono());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getruc()!=null && !notacreditosoliOrigen.getruc().equals(""))) {notacreditosoli.setruc(notacreditosoliOrigen.getruc());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getdescripcion()!=null && !notacreditosoliOrigen.getdescripcion().equals(""))) {notacreditosoli.setdescripcion(notacreditosoliOrigen.getdescripcion());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getpenalizado()!=null && !notacreditosoliOrigen.getpenalizado().equals(false))) {notacreditosoli.setpenalizado(notacreditosoliOrigen.getpenalizado());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getdescuento_porcentaje()!=null && !notacreditosoliOrigen.getdescuento_porcentaje().equals(0.0))) {notacreditosoli.setdescuento_porcentaje(notacreditosoliOrigen.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.gettotal_iva()!=null && !notacreditosoliOrigen.gettotal_iva().equals(0.0))) {notacreditosoli.settotal_iva(notacreditosoliOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getsuman()!=null && !notacreditosoliOrigen.getsuman().equals(0.0))) {notacreditosoli.setsuman(notacreditosoliOrigen.getsuman());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getdescuento_valor()!=null && !notacreditosoliOrigen.getdescuento_valor().equals(0.0))) {notacreditosoli.setdescuento_valor(notacreditosoliOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.gettotal_sin_iva()!=null && !notacreditosoliOrigen.gettotal_sin_iva().equals(0.0))) {notacreditosoli.settotal_sin_iva(notacreditosoliOrigen.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getdescuento_general()!=null && !notacreditosoliOrigen.getdescuento_general().equals(0.0))) {notacreditosoli.setdescuento_general(notacreditosoliOrigen.getdescuento_general());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getflete()!=null && !notacreditosoliOrigen.getflete().equals(0.0))) {notacreditosoli.setflete(notacreditosoliOrigen.getflete());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.gettotal()!=null && !notacreditosoliOrigen.gettotal().equals(0.0))) {notacreditosoli.settotal(notacreditosoliOrigen.gettotal());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getsub_total()!=null && !notacreditosoliOrigen.getsub_total().equals(0.0))) {notacreditosoli.setsub_total(notacreditosoliOrigen.getsub_total());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getotro()!=null && !notacreditosoliOrigen.getotro().equals(0.0))) {notacreditosoli.setotro(notacreditosoliOrigen.getotro());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getiva()!=null && !notacreditosoliOrigen.getiva().equals(0.0))) {notacreditosoli.setiva(notacreditosoliOrigen.getiva());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfinanciamiento()!=null && !notacreditosoliOrigen.getfinanciamiento().equals(0.0))) {notacreditosoli.setfinanciamiento(notacreditosoliOrigen.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getotro_valor()!=null && !notacreditosoliOrigen.getotro_valor().equals(0.0))) {notacreditosoli.setotro_valor(notacreditosoliOrigen.getotro_valor());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getretencion()!=null && !notacreditosoliOrigen.getretencion().equals(0.0))) {notacreditosoli.setretencion(notacreditosoliOrigen.getretencion());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getice()!=null && !notacreditosoliOrigen.getice().equals(0.0))) {notacreditosoli.setice(notacreditosoliOrigen.getice());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfecha()!=null && !notacreditosoliOrigen.getfecha().equals(new Date()))) {notacreditosoli.setfecha(notacreditosoliOrigen.getfecha());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfecha_cliente()!=null && !notacreditosoliOrigen.getfecha_cliente().equals(new Date()))) {notacreditosoli.setfecha_cliente(notacreditosoliOrigen.getfecha_cliente());}
			if(conDefault || (!conDefault && notacreditosoliOrigen.getfecha_autorizacion()!=null && !notacreditosoliOrigen.getfecha_autorizacion().equals(new Date()))) {notacreditosoli.setfecha_autorizacion(notacreditosoliOrigen.getfecha_autorizacion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCreditoSoli(NotaCreditoSoli notacreditosoli) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setText(notacreditosoli.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setText(notacreditosoli.getcodigo());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setText(notacreditosoli.getnumero());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setDate(notacreditosoli.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setText(notacreditosoli.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setDate(notacreditosoli.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setText(notacreditosoli.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setText(notacreditosoli.getdireccion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setText(notacreditosoli.gettelefono());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setText(notacreditosoli.getruc());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setText(notacreditosoli.getdescripcion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setSelected(notacreditosoli.getpenalizado());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setText(notacreditosoli.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setText(notacreditosoli.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setText(notacreditosoli.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setText(notacreditosoli.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setText(notacreditosoli.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setText(notacreditosoli.getdescuento_general().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setText(notacreditosoli.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setText(notacreditosoli.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setText(notacreditosoli.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setText(notacreditosoli.getotro().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setText(notacreditosoli.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setText(notacreditosoli.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setText(notacreditosoli.getotro_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCreditoSoli(NotaCreditoSoliBean notacreditosoliBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setText(notacreditosoliBean.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setText(notacreditosoliBean.getcodigo());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setText(notacreditosoliBean.getnumero());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setDate(notacreditosoliBean.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setText(notacreditosoliBean.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setDate(notacreditosoliBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setText(notacreditosoliBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setText(notacreditosoliBean.getdireccion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setText(notacreditosoliBean.gettelefono());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setText(notacreditosoliBean.getruc());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setText(notacreditosoliBean.getdescripcion());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setSelected(notacreditosoliBean.getpenalizado());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setText(notacreditosoliBean.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setText(notacreditosoliBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setText(notacreditosoliBean.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setText(notacreditosoliBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setText(notacreditosoliBean.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setText(notacreditosoliBean.getdescuento_general().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setText(notacreditosoliBean.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setText(notacreditosoliBean.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setText(notacreditosoliBean.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setText(notacreditosoliBean.getotro().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setText(notacreditosoliBean.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setText(notacreditosoliBean.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setText(notacreditosoliBean.getotro_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanNotaCreditoSoli(NotaCreditoSoliParameterReturnGeneral notacreditosoliReturnGeneral,NotaCreditoSoliBean notacreditosoliBean,Boolean conDefault) throws Exception { 
		try {
			NotaCreditoSoli notacreditosoliLocal=new NotaCreditoSoli();
			
			notacreditosoliLocal=notacreditosoliReturnGeneral.getNotaCreditoSoli();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditosoliLocal.getId()!=null && !notacreditosoliLocal.getId().equals(0L))) {notacreditosoliBean.setId(notacreditosoliLocal.getId());}}
			if(conDefault || (!conDefault && notacreditosoliLocal.getcodigo()!=null && !notacreditosoliLocal.getcodigo().equals(""))) {notacreditosoliBean.setcodigo(notacreditosoliLocal.getcodigo());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getnumero()!=null && !notacreditosoliLocal.getnumero().equals(""))) {notacreditosoliBean.setnumero(notacreditosoliLocal.getnumero());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getfecha_emision()!=null && !notacreditosoliLocal.getfecha_emision().equals(new Date()))) {notacreditosoliBean.setfecha_emision(notacreditosoliLocal.getfecha_emision());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getnumero_dias()!=null && !notacreditosoliLocal.getnumero_dias().equals(0))) {notacreditosoliBean.setnumero_dias(notacreditosoliLocal.getnumero_dias());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getfecha_vencimiento()!=null && !notacreditosoliLocal.getfecha_vencimiento().equals(new Date()))) {notacreditosoliBean.setfecha_vencimiento(notacreditosoliLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getcotizacion()!=null && !notacreditosoliLocal.getcotizacion().equals(0.0))) {notacreditosoliBean.setcotizacion(notacreditosoliLocal.getcotizacion());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getdireccion()!=null && !notacreditosoliLocal.getdireccion().equals(""))) {notacreditosoliBean.setdireccion(notacreditosoliLocal.getdireccion());}
			if(conDefault || (!conDefault && notacreditosoliLocal.gettelefono()!=null && !notacreditosoliLocal.gettelefono().equals(""))) {notacreditosoliBean.settelefono(notacreditosoliLocal.gettelefono());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getruc()!=null && !notacreditosoliLocal.getruc().equals(""))) {notacreditosoliBean.setruc(notacreditosoliLocal.getruc());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getdescripcion()!=null && !notacreditosoliLocal.getdescripcion().equals(""))) {notacreditosoliBean.setdescripcion(notacreditosoliLocal.getdescripcion());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getpenalizado()!=null && !notacreditosoliLocal.getpenalizado().equals(false))) {notacreditosoliBean.setpenalizado(notacreditosoliLocal.getpenalizado());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getdescuento_porcentaje()!=null && !notacreditosoliLocal.getdescuento_porcentaje().equals(0.0))) {notacreditosoliBean.setdescuento_porcentaje(notacreditosoliLocal.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && notacreditosoliLocal.gettotal_iva()!=null && !notacreditosoliLocal.gettotal_iva().equals(0.0))) {notacreditosoliBean.settotal_iva(notacreditosoliLocal.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getsuman()!=null && !notacreditosoliLocal.getsuman().equals(0.0))) {notacreditosoliBean.setsuman(notacreditosoliLocal.getsuman());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getdescuento_valor()!=null && !notacreditosoliLocal.getdescuento_valor().equals(0.0))) {notacreditosoliBean.setdescuento_valor(notacreditosoliLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && notacreditosoliLocal.gettotal_sin_iva()!=null && !notacreditosoliLocal.gettotal_sin_iva().equals(0.0))) {notacreditosoliBean.settotal_sin_iva(notacreditosoliLocal.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getdescuento_general()!=null && !notacreditosoliLocal.getdescuento_general().equals(0.0))) {notacreditosoliBean.setdescuento_general(notacreditosoliLocal.getdescuento_general());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getflete()!=null && !notacreditosoliLocal.getflete().equals(0.0))) {notacreditosoliBean.setflete(notacreditosoliLocal.getflete());}
			if(conDefault || (!conDefault && notacreditosoliLocal.gettotal()!=null && !notacreditosoliLocal.gettotal().equals(0.0))) {notacreditosoliBean.settotal(notacreditosoliLocal.gettotal());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getsub_total()!=null && !notacreditosoliLocal.getsub_total().equals(0.0))) {notacreditosoliBean.setsub_total(notacreditosoliLocal.getsub_total());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getotro()!=null && !notacreditosoliLocal.getotro().equals(0.0))) {notacreditosoliBean.setotro(notacreditosoliLocal.getotro());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getiva()!=null && !notacreditosoliLocal.getiva().equals(0.0))) {notacreditosoliBean.setiva(notacreditosoliLocal.getiva());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getfinanciamiento()!=null && !notacreditosoliLocal.getfinanciamiento().equals(0.0))) {notacreditosoliBean.setfinanciamiento(notacreditosoliLocal.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditosoliLocal.getotro_valor()!=null && !notacreditosoliLocal.getotro_valor().equals(0.0))) {notacreditosoliBean.setotro_valor(notacreditosoliLocal.getotro_valor());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxNotaCreditoSoliGenerico(Long idNotaCreditoSoliSeleccionado,JComboBox jComboBoxNotaCreditoSoli,List<NotaCreditoSoli> notacreditosolisLocal)throws Exception {
		try {
			NotaCreditoSoli  notacreditosoliTemp=null;

			for(NotaCreditoSoli notacreditosoliAux:notacreditosolisLocal) {
				if(notacreditosoliAux.getId()!=null && notacreditosoliAux.getId().equals(idNotaCreditoSoliSeleccionado)) {
					notacreditosoliTemp=notacreditosoliAux;
					break;
				}
			}

			jComboBoxNotaCreditoSoli.setSelectedItem(notacreditosoliTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxNotaCreditoSoliGenerico(JComboBox jComboBoxNotaCreditoSoli,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxNotaCreditoSoli.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCreditoSoli.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxNotaCreditoSoli.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCreditoSoli.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCreditoSoli.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxNotaCreditoSoli.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCreditoSoli.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxNotaCreditoSoli.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxNotaCreditoSoli.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxNotaCreditoSoli.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetaNotaCreditoSoli")) {
			jButtonDetaNotaCreditoSoliActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditosoli=(NotaCreditoSoli) notacreditosoliLogic.getNotaCreditoSolis().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacreditosoli =(NotaCreditoSoli) notacreditosolis.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getempleado_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getformato_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getfactura_descripcion();
			}
		}

		if(sTipo.equals("TipoNotaCreditoSoli")) {
			//sDescripcion=this.getActualTipoNotaCreditoSoliForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.gettiponotacreditosoli_descripcion();
			} else {
				//sDescripcion=this.getActualTipoNotaCreditoSoliForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.gettiponotacreditosoli_descripcion();
			}
		}

		if(sTipo.equals("Responsable")) {
			//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getresponsable_descripcion();
			} else {
				//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getresponsable_descripcion();
			}
		}

		if(sTipo.equals("EstadoNotaCreditoSoli")) {
			//sDescripcion=this.getActualEstadoNotaCreditoSoliForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getestadonotacreditosoli_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoNotaCreditoSoliForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getestadonotacreditosoli_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.gettipocambio_descripcion();
			}
		}

		if(sTipo.equals("Transporte")) {
			//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.gettransporte_descripcion();
			} else {
				//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.gettransporte_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!notacreditosoli.getIsNew() && !notacreditosoli.getIsChanged() && !notacreditosoli.getIsDeleted()) {
				sDescripcion=notacreditosoli.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditosoli.gettransportista_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		NotaCreditoSoli notacreditosoliRow=new NotaCreditoSoli();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditosoliRow=(NotaCreditoSoli) notacreditosoliLogic.getNotaCreditoSolis().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacreditosoliRow=(NotaCreditoSoli) notacreditosolis.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetaNotaCreditoSoliActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,NotaCreditoSoli notacreditosoli) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli = (NotaCreditoSoli)this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.notacreditosoli = (NotaCreditoSoli)this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(notacreditosoli!=null) {
						this.notacreditosoli = notacreditosoli;
					} else {
						this.notacreditosoli = new NotaCreditoSoli();
					}
				}

				if(this.isTienePermisosDetaNotaCreditoSoli && this.permiteMantenimiento(this.notacreditosoli)) {
					DetaNotaCreditoSoliBeanSwingJInternalFrame detanotacreditosoliBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup=new DetaNotaCreditoSoliBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detanotacreditosoliBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup;
					} else {
						detanotacreditosoliBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame;
					}

					List<NotaCreditoSoli> notacreditosolis=new ArrayList<NotaCreditoSoli>();
					notacreditosolis.add(this.notacreditosoli);
					if(!esRelacionado) {
						//detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.setConGuardarRelaciones(false);
						//detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detanotacreditosoliBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormNotaCreditoSoli.cargarDetaNotaCreditoSoliBeanSwingJInternalFrame(notacreditosolis,this.notacreditosoli,detanotacreditosoliBeanSwingJInternalFrame,/*conInicializar,*/detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.getConGuardarRelaciones(),detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliSessionBean.getEsGuardarRelacionado());
					detanotacreditosoliBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detanotacreditosoliBeanSwingJInternalFrame.actualizarEstadoPanelsDetaNotaCreditoSoli("no_relacionado");

						detanotacreditosoliBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetaNotaCreditoSoliConstantesFunciones.ITAMANIOFILATABLA + (DetaNotaCreditoSoliConstantesFunciones.ITAMANIOFILATABLA/2));

						detanotacreditosoliBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
						TitledBorder titledBorderDetaNotaCreditoSoli=(TitledBorder)detanotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCreditoSoli.getBorder();

						titledBorderDetaNotaCreditoSoli.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Detalle  Solicitud Nota Credit");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detanotacreditosoliBeanSwingJInternalFrame);
						}

						detanotacreditosoliBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detanotacreditosoliBeanSwingJInternalFrame);

						detanotacreditosoliBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle  Solicitud Nota Credit",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualNotaCreditoSoli(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));			
			this.jButtonDuplicarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoSoli && this.isPermisoDuplicarNotaCreditoSoli));			
			this.jButtonCopiarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoSoli && this.isPermisoCopiarNotaCreditoSoli));
			this.jButtonVerFormNotaCreditoSoli.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoSoli && this.isPermisoVerFormNotaCreditoSoli));
			
			this.jButtonAbrirOrderByNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));			
			
			this.jButtonNuevoRelacionesNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));			
			this.jButtonNuevoGuardarCambiosNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaModificarNotaCreditoSoli && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoSoli && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoSoli && this.isPermisoEliminarNotaCreditoSoli));
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoSoli);							
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));			
			
			}
						
			this.jButtonGuardarCambiosTablaNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));						
			this.jButtonDuplicarToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoSoli && this.isPermisoDuplicarNotaCreditoSoli));						
			this.jButtonCopiarToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoSoli && this.isPermisoCopiarNotaCreditoSoli));			
			this.jButtonVerFormToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoSoli && this.isPermisoVerFormNotaCreditoSoli));			
			this.jButtonAbrirOrderByToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));
			this.jButtonNuevoRelacionesToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));			
			this.jButtonNuevoGuardarCambiosToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));			
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaModificarNotaCreditoSoli && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoSoli  && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoSoli && this.isPermisoEliminarNotaCreditoSoli));
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarToolBarNotaCreditoSoli.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoSoli);				
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));			
			this.jMenuItemDuplicarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoSoli && this.isPermisoDuplicarNotaCreditoSoli));			
			this.jMenuItemCopiarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoSoli && this.isPermisoCopiarNotaCreditoSoli));			
			this.jMenuItemVerFormNotaCreditoSoli.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoSoli && this.isPermisoVerFormNotaCreditoSoli));			
			this.jMenuItemAbrirOrderByNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));			
			//this.jMenuItemMostrarOcultarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));
			this.jMenuItemDetalleAbrirOrderByNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));			
			//this.jMenuItemDetalleMostrarOcultarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoSoli && this.isPermisoOrdenNotaCreditoSoli));			
			this.jMenuItemNuevoRelacionesNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli));			
			this.jMenuItemNuevoGuardarCambiosNotaCreditoSoli.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoSoli && this.isPermisoNuevoNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));									
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemModificarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaModificarNotaCreditoSoli && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemActualizarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoSoli && this.isPermisoActualizarNotaCreditoSoli));	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemEliminarNotaCreditoSoli.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoSoli && this.isPermisoEliminarNotaCreditoSoli));
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemCancelarNotaCreditoSoli.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoSoli);				
			}
			
			this.jMenuItemGuardarCambiosNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));						
			this.jMenuItemGuardarCambiosTablaNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=this.jButtonNuevoNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaDuplicarNotaCreditoSoli=this.jButtonDuplicarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaCopiarNotaCreditoSoli=this.jButtonCopiarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaVerFormNotaCreditoSoli=this.jButtonVerFormNotaCreditoSoli.isVisible();
			
			this.isVisibilidadCeldaOrdenNotaCreditoSoli=this.jButtonAbrirOrderByNotaCreditoSoli.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=this.jButtonNuevoRelacionesNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaModificarNotaCreditoSoli=this.jButtonModificarNotaCreditoSoli.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaGuardarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=this.jButtonGuardarCambiosTablaNotaCreditoSoli.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=this.jButtonNuevoToolBarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=this.jButtonNuevoRelacionesToolBarNotaCreditoSoli.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.isVisibilidadCeldaModificarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarToolBarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarToolBarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarToolBarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarToolBarNotaCreditoSoli.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCreditoSoli=this.jButtonGuardarCambiosToolBarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=this.jButtonGuardarCambiosTablaToolBarNotaCreditoSoli.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=this.jMenuItemNuevoNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=this.jMenuItemNuevoRelacionesNotaCreditoSoli.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.isVisibilidadCeldaModificarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemModificarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemActualizarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemEliminarNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemCancelarNotaCreditoSoli.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCreditoSoli=this.jMenuItemGuardarCambiosNotaCreditoSoli.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=this.jMenuItemGuardarCambiosTablaNotaCreditoSoli.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesNotaCreditoSoli(Boolean esInicializar) {
		if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {			
			if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
				//if(this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCreditoSoli();
			}
			
			this.inicializarActualizarBindingBotonesManualNotaCreditoSoli(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualNotaCreditoSoli() {
		this.jButtonNuevoNotaCreditoSoli.setVisible(this.isPermisoNuevoNotaCreditoSoli);			
		this.jButtonDuplicarNotaCreditoSoli.setVisible(this.isPermisoDuplicarNotaCreditoSoli);			
		this.jButtonCopiarNotaCreditoSoli.setVisible(this.isPermisoCopiarNotaCreditoSoli);			
		this.jButtonVerFormNotaCreditoSoli.setVisible(this.isPermisoVerFormNotaCreditoSoli);			
		
		this.jButtonAbrirOrderByNotaCreditoSoli.setVisible(this.isPermisoOrdenNotaCreditoSoli);					
		
		this.jButtonNuevoRelacionesNotaCreditoSoli.setVisible(this.isPermisoNuevoNotaCreditoSoli);			
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarNotaCreditoSoli.setVisible(this.isPermisoActualizarNotaCreditoSoli);	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.setVisible(this.isPermisoActualizarNotaCreditoSoli);	
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.setVisible(this.isPermisoEliminarNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoSoli);						
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.setVisible(this.isPermisoGuardarCambiosNotaCreditoSoli);							
		}
		
		this.jButtonGuardarCambiosTablaNotaCreditoSoli.setVisible(this.isPermisoActualizarNotaCreditoSoli);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCreditoSoli() {
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarNotaCreditoSoli.setVisible(this.isPermisoActualizarNotaCreditoSoli);	
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.setVisible(this.isPermisoActualizarNotaCreditoSoli);	
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.setVisible(this.isPermisoEliminarNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoSoli);							
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoSoli && this.isPermisoGuardarCambiosNotaCreditoSoli));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosNotaCreditoSoli() {
		if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualNotaCreditoSoli();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesNotaCreditoSoli() {
	}
	
	public void jTableDatosNotaCreditoSoliListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarNotaCreditoSoli(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.notacreditosoli.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.notacreditosoli.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.notacreditosoli.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.notacreditosoli.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.notacreditosoli.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.notacreditosoli.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.notacreditosoli.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.notacreditosoli.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.notacreditosoli.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumeroNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getnumero()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero like '%"+this.notacreditosoli.getnumero()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.notacreditosoli.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_diasNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getnumero_dias()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_dias = "+this.notacreditosoli.getnumero_dias().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.notacreditosoli.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.notacreditosoli.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.notacreditosoli.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.notacreditosoli.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.notacreditosoli.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.notacreditosoli.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.notacreditosoli.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.notacreditosoli.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getdireccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion like '%"+this.notacreditosoli.getdireccion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefonoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.gettelefono()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono like '%"+this.notacreditosoli.gettelefono()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.notacreditosoli.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiponotacreditosoli=true;

			idTienePermisotiponotacreditosoli=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(TipoNotaCreditoSoliConstantesFunciones.CLASSNAME);

			if(idTienePermisotiponotacreditosoli) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.tiponotacreditosoliBeanSwingJInternalFrame=new TipoNotaCreditoSoliBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiponotacreditosoliBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiponotacreditosoliBeanSwingJInternalFrame.getTipoNotaCreditoSoliLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_tipo_nota_credito_soli()!=null) {
					this.tiponotacreditosoliBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiponotacreditosoliBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_tipo_nota_credito_soli());
					this.tiponotacreditosoliBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiponotacreditosoliBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiponotacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoNotaCreditoSoli();
				}

				JInternalFrameBase jinternalFrame =this.tiponotacreditosoliBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordertiponotacreditosoli=(TitledBorder)this.tiponotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosTipoNotaCreditoSoli.getBorder();

				titledBordertiponotacreditosoli.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Tipo Solicitud Nota Credito");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_tipo_nota_credito_soli()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_nota_credito_soli = "+this.notacreditosoli.getid_tipo_nota_credito_soli().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_responsableNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoresponsable=true;

			idTienePermisoresponsable=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(ResponsableConstantesFunciones.CLASSNAME);

			if(idTienePermisoresponsable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.responsableBeanSwingJInternalFrame=new ResponsableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.responsableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.responsableBeanSwingJInternalFrame.getResponsableLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_responsable()!=null) {
					this.responsableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.responsableBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_responsable());
					this.responsableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.inicializarActualizarBindingTablaResponsable();
				}

				JInternalFrameBase jinternalFrame =this.responsableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderresponsable=(TitledBorder)this.responsableBeanSwingJInternalFrame.jScrollPanelDatosResponsable.getBorder();

				titledBorderresponsable.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Responsable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_responsableNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_responsable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_responsable = "+this.notacreditosoli.getid_responsable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_nota_creditoNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadonotacreditosoli=true;

			idTienePermisoestadonotacreditosoli=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(EstadoNotaCreditoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadonotacreditosoli) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.estadonotacreditosoliBeanSwingJInternalFrame=new EstadoNotaCreditoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadonotacreditosoliBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadonotacreditosoliBeanSwingJInternalFrame.getEstadoNotaCreditoLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_estado_nota_credito()!=null) {
					this.estadonotacreditosoliBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadonotacreditosoliBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_estado_nota_credito());
					this.estadonotacreditosoliBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadonotacreditosoliBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadonotacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoNotaCredito();
				}

				JInternalFrameBase jinternalFrame =this.estadonotacreditosoliBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBorderestadonotacreditosoli=(TitledBorder)this.estadonotacreditosoliBeanSwingJInternalFrame.jScrollPanelDatosEstadoNotaCredito.getBorder();

				titledBorderestadonotacreditosoli.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Estado Nota Credito");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_nota_creditoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_estado_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_nota_credito = "+this.notacreditosoli.getid_estado_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.notacreditosoli.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonpenalizadoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getpenalizado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where penalizado = "+this.notacreditosoli.getpenalizado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_porcentajeNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getdescuento_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_porcentaje = "+this.notacreditosoli.getdescuento_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.notacreditosoli.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsumanNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getsuman()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where suman = "+this.notacreditosoli.getsuman().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.notacreditosoli.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_sin_ivaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.gettotal_sin_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_sin_iva = "+this.notacreditosoli.gettotal_sin_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_generalNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getdescuento_general()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_general = "+this.notacreditosoli.getdescuento_general().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.notacreditosoli.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.notacreditosoli.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.notacreditosoli.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotroNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getotro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otro = "+this.notacreditosoli.getotro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.notacreditosoli.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfinanciamientoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfinanciamiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where financiamiento = "+this.notacreditosoli.getfinanciamiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotro_valorNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getotro_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otro_valor = "+this.notacreditosoli.getotro_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonretencionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getretencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where retencion = "+this.notacreditosoli.getretencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.notacreditosoli.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.notacreditosoli.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.notacreditosoli.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="Vendedor";

			if(!this.sFinalQueryGeneral_vendedor.equals("")) {
				this.vendedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_vendedor);
				this.vendedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.vendedorBeanSwingJInternalFrame.procesarBusqueda(this.vendedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingVendedor(false);
			}

			if(!this.sFinalQueryComboVendedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBordervendedor=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Vendedor");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_vendedorNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.notacreditosoli.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoSoli=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosNotaCreditoSoli.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.notacreditosoli.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transporteNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransporte=true;

			idTienePermisotransporte=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(TransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisotransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.transporteBeanSwingJInternalFrame=new TransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transporteBeanSwingJInternalFrame.getTransporteLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_transporte()!=null) {
					this.transporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transporteBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_transporte());
					this.transporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.transporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordertransporte=(TitledBorder)this.transporteBeanSwingJInternalFrame.jScrollPanelDatosTransporte.getBorder();

				titledBordertransporte.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transporteNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transporte = "+this.notacreditosoli.getid_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaNotaCreditoSoliUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebNotaCreditoSoli(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoSoli.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoSoli.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.notacreditosoliLogic.getConnexion());

				if(this.notacreditosoli.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.notacreditosoli.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoSoli=(TitledBorder)this.jScrollPanelDatosNotaCreditoSoli.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderNotaCreditoSoli.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.notacreditosoli.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_clienteNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfecha_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_cliente = '"+Funciones2.getStringPostgresDate(this.notacreditosoli.getfecha_cliente())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_autorizacionNotaCreditoSoliBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.getnotacreditosoli(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditosoli==null) {
						this.notacreditosoli = new NotaCreditoSoli();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);
				}

				if(this.notacreditosoli.getfecha_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_autorizacion = '"+Funciones2.getStringPostgresDate(this.notacreditosoli.getfecha_autorizacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoSoli(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdAnio();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdCentroCosto();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdCliente();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdEjercicio();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdEmpleado();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdEmpresa();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoNotaCreditoSoliNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdEstadoNotaCreditoSoli();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdFactura();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdFormato();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdMes();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdMoneda();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdPeriodo();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdResponsableNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdResponsable();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdSucursal();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCambioNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdTipoCambio();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoNotaCreditoSoliNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdTipoNotaCreditoSoli();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdTipoPrecio();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransporteNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdTransporte();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdTransportista();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdUsuario();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorNotaCreditoSoliActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);

			this.getNotaCreditoSolisFK_IdVendedor();

			this.inicializarActualizarBindingNotaCreditoSoli(false);

			//if(NotaCreditoSoliBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditosoliLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameNotaCreditoSoli() {
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
		

		if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.setVisible(false);	    			
			this.jInternalFrameDetalleFormNotaCreditoSoli.dispose();
			this.jInternalFrameDetalleFormNotaCreditoSoli=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
			this.jInternalFrameReporteDinamicoNotaCreditoSoli.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoNotaCreditoSoli.dispose();
			this.jInternalFrameReporteDinamicoNotaCreditoSoli=null;
		}
		
		if(this.jInternalFrameImportacionNotaCreditoSoli!=null) {
			this.jInternalFrameImportacionNotaCreditoSoli.setVisible(false);	    			
			this.jInternalFrameImportacionNotaCreditoSoli.dispose();
			this.jInternalFrameImportacionNotaCreditoSoli=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessNotaCreditoSoli();
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			
			if(sTipo.equals("NuevoNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarNotaCreditoSoli")) {
				jButtonDuplicarNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarNotaCreditoSoli")) {
				jButtonCopiarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("VerFormNotaCreditoSoli")) {
				jButtonVerFormNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarNotaCreditoSoli")) {
				jButtonDuplicarNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarNotaCreditoSoli")) {
				jButtonDuplicarNotaCreditoSoliActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarNotaCreditoSoli")) {
				jButtonModificarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarNotaCreditoSoli")) {
				jButtonModificarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarNotaCreditoSoli")) {
				jButtonModificarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("ActualizarNotaCreditoSoli")) {
				jButtonActualizarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarNotaCreditoSoli")) {
				jButtonActualizarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarNotaCreditoSoli")) {
				jButtonActualizarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("EliminarNotaCreditoSoli")) {
				jButtonEliminarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarNotaCreditoSoli")) {
				jButtonEliminarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarNotaCreditoSoli")) {
				jButtonEliminarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("CancelarNotaCreditoSoli")) {
				jButtonCancelarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarNotaCreditoSoli")) {
				jButtonCancelarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarNotaCreditoSoli")) {
				jButtonCancelarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("CerrarNotaCreditoSoli")) {
				jButtonCerrarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarNotaCreditoSoli")) {
				jButtonCerrarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarNotaCreditoSoli")) {
				jButtonCerrarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarNotaCreditoSoli")) {
				jButtonMostrarOcultarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarNotaCreditoSoli")) {
				jButtonCancelarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarNotaCreditoSoli")) {
				jButtonCopiarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarNotaCreditoSoli")) {
				jButtonVerFormNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarNotaCreditoSoli")) {
				jButtonCopiarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormNotaCreditoSoli")) {
				jButtonVerFormNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionNotaCreditoSoli")) {
				jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarNotaCreditoSoli")) {
				jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionNotaCreditoSoli")) {
				jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresNotaCreditoSoli")) {
				jButtonAnterioresNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarNotaCreditoSoli")) {
				jButtonAnterioresNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreNotaCreditoSoli")) {
				jButtonAnterioresNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("SiguientesNotaCreditoSoli")) {
				jButtonSiguientesNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarNotaCreditoSoli")) {
				jButtonSiguientesNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesNotaCreditoSoli")) {
				jButtonSiguientesNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByNotaCreditoSoli") || sTipo.equals("MenuItemDetalleAbrirOrderByNotaCreditoSoli")) {
				jButtonAbrirOrderByNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarNotaCreditoSoli") || sTipo.equals("MenuItemDetalleMostrarOcultarNotaCreditoSoli")) {
				jButtonMostrarOcultarNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCreditoSoli")) {
				jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarNotaCreditoSoli")) {
				jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosNotaCreditoSoli")) {
				jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoNotaCreditoSoli")) {
				jButtonCerrarReporteDinamicoNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoNotaCreditoSoli")) {
				jButtonGenerarReporteDinamicoNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoNotaCreditoSoli")) {
				
				jButtonGenerarExcelReporteDinamicoNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionNotaCreditoSoli")) {
				jButtonCerrarImportacionNotaCreditoSoliActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionNotaCreditoSoli")) {
				
				jButtonGenerarImportacionNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionNotaCreditoSoli")) {
				
				jButtonAbrirImportacionNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesNotaCreditoSoli")) {
				jComboBoxTiposAccionesNotaCreditoSoliActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesNotaCreditoSoli")) {
				jComboBoxTiposRelacionesNotaCreditoSoliActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioNotaCreditoSoli")) {
				jComboBoxTiposAccionesNotaCreditoSoliActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarNotaCreditoSoli")) {
				
				jComboBoxTiposSeleccionarNotaCreditoSoliActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralNotaCreditoSoli")) {
				jTextFieldValorCampoGeneralNotaCreditoSoliActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByNotaCreditoSoli")) {
				jButtonAbrirOrderByNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarNotaCreditoSoli")) {
				jButtonAbrirOrderByNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByNotaCreditoSoli")) {
				jButtonCerrarOrderByNotaCreditoSoliActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoSoliBusqueda")) {
				this.jButtonidNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoSoliUpdate")) {
				this.jButtonid_empresaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoSoliBusqueda")) {
				this.jButtonid_empresaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoSoliUpdate")) {
				this.jButtonid_sucursalNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoSoliBusqueda")) {
				this.jButtonid_sucursalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoSoliUpdate")) {
				this.jButtonid_ejercicioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoSoliBusqueda")) {
				this.jButtonid_ejercicioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoSoliUpdate")) {
				this.jButtonid_periodoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoSoliBusqueda")) {
				this.jButtonid_periodoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioNotaCreditoSoliUpdate")) {
				this.jButtonid_anioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioNotaCreditoSoliBusqueda")) {
				this.jButtonid_anioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesNotaCreditoSoliUpdate")) {
				this.jButtonid_mesNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesNotaCreditoSoliBusqueda")) {
				this.jButtonid_mesNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoSoliUpdate")) {
				this.jButtonid_usuarioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoSoliBusqueda")) {
				this.jButtonid_usuarioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoNotaCreditoSoliBusqueda")) {
				this.jButtoncodigoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroNotaCreditoSoliBusqueda")) {
				this.jButtonnumeroNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_emisionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasNotaCreditoSoliBusqueda")) {
				this.jButtonnumero_diasNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_vencimientoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoSoliUpdate")) {
				this.jButtonid_monedaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoSoliBusqueda")) {
				this.jButtonid_monedaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoli")) {
				this.jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoliUpdate")) {
				this.jButtonid_empleadoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoliBusqueda")) {
				this.jButtonid_empleadoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionNotaCreditoSoliBusqueda")) {
				this.jButtoncotizacionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoSoliUpdate")) {
				this.jButtonid_formatoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoSoliBusqueda")) {
				this.jButtonid_formatoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoli")) {
				this.jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoliUpdate")) {
				this.jButtonid_clienteNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoliBusqueda")) {
				this.jButtonid_clienteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoli")) {
				this.jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoliUpdate")) {
				this.jButtonid_facturaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoliBusqueda")) {
				this.jButtonid_facturaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionNotaCreditoSoliBusqueda")) {
				this.jButtondireccionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoNotaCreditoSoliBusqueda")) {
				this.jButtontelefonoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucNotaCreditoSoliBusqueda")) {
				this.jButtonrucNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_nota_credito_soliNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_nota_credito_soliNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoSoliUpdate")) {
				this.jButtonid_responsableNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoSoliBusqueda")) {
				this.jButtonid_responsableNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoSoliUpdate")) {
				this.jButtonid_estado_nota_creditoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoSoliBusqueda")) {
				this.jButtonid_estado_nota_creditoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionNotaCreditoSoliBusqueda")) {
				this.jButtondescripcionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("penalizadoNotaCreditoSoliBusqueda")) {
				this.jButtonpenalizadoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_porcentajeNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoSoliBusqueda")) {
				this.jButtontotal_ivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanNotaCreditoSoliBusqueda")) {
				this.jButtonsumanNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_valorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoSoliBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_generalNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_generalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoSoliBusqueda")) {
				this.jButtonfleteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoSoliBusqueda")) {
				this.jButtontotalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoSoliBusqueda")) {
				this.jButtonsub_totalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otroNotaCreditoSoliBusqueda")) {
				this.jButtonotroNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoSoliBusqueda")) {
				this.jButtonivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoSoliBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otro_valorNotaCreditoSoliBusqueda")) {
				this.jButtonotro_valorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionNotaCreditoSoliBusqueda")) {
				this.jButtonretencionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoSoliBusqueda")) {
				this.jButtoniceNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoSoliBusqueda")) {
				this.jButtonfechaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoli")) {
				this.jButtonid_centro_costoNotaCreditoSoliActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliUpdate")) {
				this.jButtonid_centro_costoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliBusqueda")) {
				this.jButtonid_centro_costoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoli")) {
				this.jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliUpdate")) {
				this.jButtonid_vendedorNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliBusqueda")) {
				this.jButtonid_vendedorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoli")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoSoliUpdate")) {
				this.jButtonid_transporteNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoSoliBusqueda")) {
				this.jButtonid_transporteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoSoliUpdate")) {
				this.jButtonid_transportistaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoSoliBusqueda")) {
				this.jButtonid_transportistaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_clienteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_autorizacionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteNotaCreditoSoli")) {
				this.jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoNotaCreditoSoli")) {
				this.jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaNotaCreditoSoli")) {
				this.jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("id_vendedorNotaCreditoSoli")) {
				this.jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdClienteNotaCreditoSoli")) {
				this.jButtonFK_IdClienteNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoNotaCreditoSoli")) {
				this.jButtonFK_IdEmpleadoNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoNotaCreditoSoliNotaCreditoSoli")) {
				this.jButtonFK_IdEstadoNotaCreditoSoliNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaNotaCreditoSoli")) {
				this.jButtonFK_IdFacturaNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdResponsableNotaCreditoSoli")) {
				this.jButtonFK_IdResponsableNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoNotaCreditoSoliNotaCreditoSoli")) {
				this.jButtonFK_IdTipoNotaCreditoSoliNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransportistaNotaCreditoSoli")) {
				this.jButtonFK_IdTransportistaNotaCreditoSoliActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorNotaCreditoSoli")) {
				this.jButtonFK_IdVendedorNotaCreditoSoliActionPerformed(evt);
			}
			
			;
			
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessNotaCreditoSoli();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			NotaCreditoSoli notacreditosoliLocal=null;
			
			if(!this.getEsControlTabla()) {
				notacreditosoliLocal=this.notacreditosoli;
			} else {
				notacreditosoliLocal=this.notacreditosoliAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
							
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
								
						
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
								
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
							
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
								
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosNotaCreditoSoli")) {
					jCheckBoxSeleccionarTodosNotaCreditoSoliItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosNotaCreditoSoli")) {
					jCheckBoxSeleccionadosNotaCreditoSoliItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarNotaCreditoSoli")) {
					
				}
				
				


				
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
												
				
				


				
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoSoliActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditosoli);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditosoli);
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoSoli.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoSoli.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoSoliActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditosoliAnterior =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarNotaCreditoSoli")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosNotaCreditoSoliListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosNotaCreditoSoli.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.notacreditosoli =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.notacreditosoli =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.notacreditosoli);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarNotaCreditoSoli")) {
				
				}
				
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarNotaCreditoSoli")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosNotaCreditoSoli.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarNotaCreditoSoli")) {
			
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessNotaCreditoSoli();
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			if(sTipo.equals("NuevoNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarNotaCreditoSoli")) {
				jButtonDuplicarNotaCreditoSoliActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarNotaCreditoSoli")) {
				jButtonCopiarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormNotaCreditoSoli")) {
				jButtonVerFormNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesNotaCreditoSoli")) {
				jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarNotaCreditoSoli")) {
				jButtonModificarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarNotaCreditoSoli")) {
				jButtonActualizarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarNotaCreditoSoli")) {
				jButtonEliminarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarNotaCreditoSoli")) {
				jButtonCancelarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarNotaCreditoSoli")) {
				jButtonCerrarNotaCreditoSoliActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosNotaCreditoSoli")) {
				jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCreditoSoli")) {
				jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByNotaCreditoSoli")) {
				jButtonAbrirOrderByNotaCreditoSoliActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionNotaCreditoSoli")) {
				jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresNotaCreditoSoli")) {
				jButtonAnterioresNotaCreditoSoliActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesNotaCreditoSoli")) {
				jButtonSiguientesNotaCreditoSoliActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoSoliBusqueda")) {
				this.jButtonidNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoSoliUpdate")) {
				this.jButtonid_empresaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoSoliBusqueda")) {
				this.jButtonid_empresaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoSoliUpdate")) {
				this.jButtonid_sucursalNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoSoliBusqueda")) {
				this.jButtonid_sucursalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoSoliUpdate")) {
				this.jButtonid_ejercicioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoSoliBusqueda")) {
				this.jButtonid_ejercicioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoSoliUpdate")) {
				this.jButtonid_periodoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoSoliBusqueda")) {
				this.jButtonid_periodoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioNotaCreditoSoliUpdate")) {
				this.jButtonid_anioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioNotaCreditoSoliBusqueda")) {
				this.jButtonid_anioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesNotaCreditoSoliUpdate")) {
				this.jButtonid_mesNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesNotaCreditoSoliBusqueda")) {
				this.jButtonid_mesNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoSoliUpdate")) {
				this.jButtonid_usuarioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoSoliBusqueda")) {
				this.jButtonid_usuarioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoNotaCreditoSoliBusqueda")) {
				this.jButtoncodigoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroNotaCreditoSoliBusqueda")) {
				this.jButtonnumeroNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_emisionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasNotaCreditoSoliBusqueda")) {
				this.jButtonnumero_diasNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_vencimientoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoSoliUpdate")) {
				this.jButtonid_monedaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoSoliBusqueda")) {
				this.jButtonid_monedaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoli")) {
				this.jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoliUpdate")) {
				this.jButtonid_empleadoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoSoliBusqueda")) {
				this.jButtonid_empleadoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionNotaCreditoSoliBusqueda")) {
				this.jButtoncotizacionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoSoliUpdate")) {
				this.jButtonid_formatoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoSoliBusqueda")) {
				this.jButtonid_formatoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoli")) {
				this.jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoliUpdate")) {
				this.jButtonid_clienteNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoSoliBusqueda")) {
				this.jButtonid_clienteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoli")) {
				this.jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoliUpdate")) {
				this.jButtonid_facturaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoSoliBusqueda")) {
				this.jButtonid_facturaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionNotaCreditoSoliBusqueda")) {
				this.jButtondireccionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoNotaCreditoSoliBusqueda")) {
				this.jButtontelefonoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucNotaCreditoSoliBusqueda")) {
				this.jButtonrucNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_nota_credito_soliNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_nota_credito_soliNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoSoliUpdate")) {
				this.jButtonid_responsableNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoSoliBusqueda")) {
				this.jButtonid_responsableNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoSoliUpdate")) {
				this.jButtonid_estado_nota_creditoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoSoliBusqueda")) {
				this.jButtonid_estado_nota_creditoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionNotaCreditoSoliBusqueda")) {
				this.jButtondescripcionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("penalizadoNotaCreditoSoliBusqueda")) {
				this.jButtonpenalizadoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_porcentajeNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoSoliBusqueda")) {
				this.jButtontotal_ivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanNotaCreditoSoliBusqueda")) {
				this.jButtonsumanNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_valorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoSoliBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_generalNotaCreditoSoliBusqueda")) {
				this.jButtondescuento_generalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoSoliBusqueda")) {
				this.jButtonfleteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoSoliBusqueda")) {
				this.jButtontotalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoSoliBusqueda")) {
				this.jButtonsub_totalNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otroNotaCreditoSoliBusqueda")) {
				this.jButtonotroNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoSoliBusqueda")) {
				this.jButtonivaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoSoliBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otro_valorNotaCreditoSoliBusqueda")) {
				this.jButtonotro_valorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionNotaCreditoSoliBusqueda")) {
				this.jButtonretencionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoSoliBusqueda")) {
				this.jButtoniceNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoSoliBusqueda")) {
				this.jButtonfechaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoli")) {
				this.jButtonid_centro_costoNotaCreditoSoliActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliUpdate")) {
				this.jButtonid_centro_costoNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoSoliBusqueda")) {
				this.jButtonid_centro_costoNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoli")) {
				this.jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliUpdate")) {
				this.jButtonid_vendedorNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoSoliBusqueda")) {
				this.jButtonid_vendedorNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoli")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoliUpdate")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoSoliBusqueda")) {
				this.jButtonid_tipo_cambioNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoSoliUpdate")) {
				this.jButtonid_transporteNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoSoliBusqueda")) {
				this.jButtonid_transporteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoSoliUpdate")) {
				this.jButtonid_transportistaNotaCreditoSoliUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoSoliBusqueda")) {
				this.jButtonid_transportistaNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_clienteNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionNotaCreditoSoliBusqueda")) {
				this.jButtonfecha_autorizacionNotaCreditoSoliBusquedaActionPerformed(evt);
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessNotaCreditoSoli();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameNotaCreditoSoli")) {
				closingInternalFrameNotaCreditoSoli();
				
			} else if(sTipo.equals("jButtonCancelarNotaCreditoSoli")) {
				JInternalFrameBase jInternalFrameDetalleFormNotaCreditoSoli = (JInternalFrameBase)evt.getSource();
	            	
	            NotaCreditoSoliBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoSoliBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCreditoSoli.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarNotaCreditoSoliActionPerformed(null);
			}
			
			NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacreditosoli,new Object(),this.notacreditosoliParameterGeneral,this.notacreditosoliReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormNotaCreditoSoli(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormNotaCreditoSoli(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormNotaCreditoSoli(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.notacreditosoli)) {
			if(!esControlTabla) {
				if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);			
				}
				
				if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualNotaCreditoSoli(this.notacreditosoli,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditosoliReturnGeneral=notacreditosoliLogic.procesarEventosNotaCreditoSolisWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditosoliLogic.getNotaCreditoSolis(),this.notacreditosoli,this.notacreditosoliParameterGeneral,this.isEsNuevoNotaCreditoSoli,classes);//this.notacreditosoliLogic.getNotaCreditoSoli()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanNotaCreditoSoli(this.notacreditosoliReturnGeneral,this.notacreditosoliBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanNotaCreditoSoli(classes,this.notacreditosoliReturnGeneral,this.notacreditosoliBean,false);
					}
						
					if(this.notacreditosoliReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli());	
					}
						
					if(this.notacreditosoliReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli(),classes);//this.notacreditosoliBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoSoli(this.notacreditosoli,classes);//this.notacreditosoliBean);									
				}
			
				if(NotaCreditoSoliJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualNotaCreditoSoli(this.notacreditosoli,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoSoli(this.notacreditosoli);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.notacreditosoliAnterior!=null) {
						this.notacreditosoli=this.notacreditosoliAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditosoliReturnGeneral=notacreditosoliLogic.procesarEventosNotaCreditoSolisWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditosoliLogic.getNotaCreditoSolis(),this.notacreditosoli,this.notacreditosoliParameterGeneral,this.isEsNuevoNotaCreditoSoli,classes);//this.notacreditosoliLogic.getNotaCreditoSoli()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditosoliSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditosoliSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.notacreditosoliReturnGeneral.getNotaCreditoSoli(),notacreditosoliLogic.getNotaCreditoSolis());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.notacreditosoliReturnGeneral.getNotaCreditoSoli(),this.notacreditosolis);
				}
				//ARCHITECTURE
				
				//this.jTableDatosNotaCreditoSoli.repaint();
				
				//((AbstractTableModel) this.jTableDatosNotaCreditoSoli.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosNotaCreditoSoli();
			}
		}
	}
	
	public void actualizarVisualTableDatosNotaCreditoSoli() throws Exception {
		
		NotaCreditoSoliModel notacreditosoliModel=(NotaCreditoSoliModel)this.jTableDatosNotaCreditoSoli.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditosoliModel.notacreditosolis=this.notacreditosoliLogic.getNotaCreditoSolis();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			notacreditosoliModel.notacreditosolis=this.notacreditosolis;
		}
		
		
		((NotaCreditoSoliModel) this.jTableDatosNotaCreditoSoli.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaNotaCreditoSoli() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getnotacreditosoliAnterior(),this.notacreditosoliLogic.getNotaCreditoSolis());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getnotacreditosoliAnterior(),this.notacreditosolis);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosNotaCreditoSoli();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioNotaCreditoSoli(NotaCreditoSoli notacreditosoli,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCreditoSoli.class)) {
					this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.setDetaNotaCreditoSolis(notacreditosoli.getDetaNotaCreditoSolis());
					this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaNotaCreditoSoli(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditosoli,new Object(),generalEntityParameterGeneral,this.notacreditosoliReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.notacreditosoliSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=NotaCreditoSoliConstantesFunciones.getClassesRelationshipsOfNotaCreditoSoli(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=NotaCreditoSoliConstantesFunciones.getClassesRelationshipsFromStringsOfNotaCreditoSoli(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormNotaCreditoSoli(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				NotaCreditoSoliBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditosoli,new Object(),generalEntityParameterGeneral,this.notacreditosoliReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioNotaCreditoSoli(NotaCreditoSoliBean notacreditosoliBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCreditoSoli.class)) {
					this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.setDetaNotaCreditoSolis(notacreditosoli.getDetaNotaCreditoSolis());
					this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaNotaCreditoSoli(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanNotaCreditoSoli(ArrayList<Classe> classes,NotaCreditoSoliReturnGeneral notacreditosoliReturnGeneral,NotaCreditoSoliBean notacreditosoliBean,Boolean conDefault) throws Exception {
		
			this.notacreditosoliBean.setDetaNotaCreditoSolis(notacreditosoliReturnGeneral.getNotaCreditoSoli().getDetaNotaCreditoSolis());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualNotaCreditoSoli(NotaCreditoSoli notacreditosoli,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCreditoSoli.class)) {
					notacreditosoli.setDetaNotaCreditoSolis(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliBeanSwingJInternalFrame.detanotacreditosoliLogic.getDetaNotaCreditoSolis());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.notacreditosoli)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormNotaCreditoSoli = new NotaCreditoSoliDetalleFormJInternalFrame(jDesktopPane,this.notacreditosoliSessionBean.getConGuardarRelaciones(),this.notacreditosoliSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.setVisible(false);
		this.jInternalFrameDetalleFormNotaCreditoSoli.setSelected(false);						
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.notacreditosoliLogic=this.notacreditosoliLogic;
		
		this.cargarCombosFrameForeignKeyNotaCreditoSoli("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCreditoSoli();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCreditoSoli();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyNotaCreditoSoli("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyNotaCreditoSoli();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCreditoSoli"));
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ModificarNotaCreditoSoli"));

		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCreditoSoli"));
					
		this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemModificarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCreditoSoli"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"ActualizarNotaCreditoSoli"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCreditoSoli"));
						
		this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemActualizarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCreditoSoli"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"EliminarNotaCreditoSoli"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCreditoSoli"));
								
		this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemEliminarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCreditoSoli"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CancelarNotaCreditoSoli"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCreditoSoli"));
					
		this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemCancelarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCreditoSoli"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemDetalleCerrarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCreditoSoli"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoSoli"));
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoSoli"));
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCreditoSoli"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonidNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncodigoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumeroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_emisionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumero_diasNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_vencimientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliBusqueda"));
		//jButtonid_empleadoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncotizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliBusqueda"));
		//jButtonid_clienteNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliBusqueda"));
		//jButtonid_facturaNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondireccionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontelefonoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonrucNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescripcionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonpenalizadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"penalizadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_porcentajeNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsumanNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_sin_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_generalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfleteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsub_totalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfinanciamientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotro_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonretencionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoniceNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfechaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoSoliBusqueda"));
		//jButtonid_centro_costoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoli"));
		//jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliBusqueda"));
		//jButtonid_vendedorNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoli"));
		//jButtonid_vendedorNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliBusqueda"));
		//jButtonid_tipo_cambioNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_autorizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoSoliBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCreditoSoli"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameNotaCreditoSoli"));
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCreditoSoli"));
		}
		
		this.jTableDatosNotaCreditoSoli.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarNotaCreditoSoli"));
		
		this.jTableDatosNotaCreditoSoli.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarNotaCreditoSoli"));
		
		this.jButtonNuevoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"NuevoNotaCreditoSoli"));
		
		this.jButtonDuplicarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"DuplicarNotaCreditoSoli"));
		
		this.jButtonCopiarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"CopiarNotaCreditoSoli"));
		
		this.jButtonVerFormNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"VerFormNotaCreditoSoli"));
		
		
		this.jButtonNuevoToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"NuevoToolBarNotaCreditoSoli"));
			
		this.jButtonDuplicarToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"DuplicarToolBarNotaCreditoSoli"));
			
		this.jMenuItemNuevoNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemNuevoNotaCreditoSoli"));
			
		this.jMenuItemDuplicarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarNotaCreditoSoli"));		
		
		
		this.jButtonNuevoRelacionesNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"NuevoRelacionesNotaCreditoSoli"));
		
		
		this.jButtonNuevoRelacionesToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarNotaCreditoSoli"));
			
		this.jMenuItemNuevoRelacionesNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesNotaCreditoSoli"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ModificarNotaCreditoSoli"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonModificarToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCreditoSoli"));
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemModificarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCreditoSoli"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"ActualizarNotaCreditoSoli"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonActualizarToolBarNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCreditoSoli"));
				
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemActualizarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCreditoSoli"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"EliminarNotaCreditoSoli"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonEliminarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCreditoSoli"));
						
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemEliminarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCreditoSoli"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CancelarNotaCreditoSoli"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonCancelarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCreditoSoli"));
			
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemCancelarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCreditoSoli"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarNotaCreditoSoli"));		
		
		
		this.jButtonCerrarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CerrarNotaCreditoSoli"));
		
		
		this.jButtonCerrarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CerrarToolBarNotaCreditoSoli"));
			
		this.jMenuItemCerrarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemCerrarNotaCreditoSoli"));
			
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jMenuItemDetalleCerrarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCreditoSoli"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosNotaCreditoSoli"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoSoli"));
		}
		
		this.jButtonCopiarToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CopiarToolBarNotaCreditoSoli"));
			
		this.jButtonVerFormToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"VerFormToolBarNotaCreditoSoli"));
		
		this.jMenuItemGuardarCambiosNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosNotaCreditoSoli"));
			
		this.jMenuItemCopiarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemCopiarNotaCreditoSoli"));		
		
		this.jMenuItemVerFormNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemVerFormNotaCreditoSoli"));		
		
		
		this.jButtonGuardarCambiosTablaNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCreditoSoli"));
		
		
		this.jButtonGuardarCambiosTablaToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarNotaCreditoSoli"));
			
		this.jMenuItemGuardarCambiosTablaNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCreditoSoli"));		
		
		
		
		this.jButtonRecargarInformacionNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"RecargarInformacionNotaCreditoSoli"));
					
		this.jButtonRecargarInformacionToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarNotaCreditoSoli"));
		
		this.jMenuItemRecargarInformacionNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionNotaCreditoSoli"));		
		
		
		
		this.jButtonAnterioresNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"AnterioresNotaCreditoSoli"));
		
		
		this.jButtonAnterioresToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"AnterioresToolBarNotaCreditoSoli"));
		
		this.jMenuItemAnterioresNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresNotaCreditoSoli"));		
		
		
		this.jButtonSiguientesNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"SiguientesNotaCreditoSoli"));
		
		
		this.jButtonSiguientesToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"SiguientesToolBarNotaCreditoSoli"));
			
		this.jMenuItemSiguientesNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesNotaCreditoSoli"));
			
		this.jMenuItemAbrirOrderByNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByNotaCreditoSoli"));
			
		this.jMenuItemMostrarOcultarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarNotaCreditoSoli"));
			
		this.jMenuItemDetalleAbrirOrderByNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByNotaCreditoSoli"));
			
		this.jMenuItemDetalleMostarOcultarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarNotaCreditoSoli"));		
		
		
		this.jButtonNuevoGuardarCambiosNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosNotaCreditoSoli"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarNotaCreditoSoli"));
			
		this.jMenuItemNuevoGuardarCambiosNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosNotaCreditoSoli"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosNotaCreditoSoli.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosNotaCreditoSoli"));

		this.jCheckBoxSeleccionadosNotaCreditoSoli.addItemListener(new CheckBoxItemListener(this,"SeleccionadosNotaCreditoSoli"));
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCreditoSoli"));
		}
		
		
		this.jComboBoxTiposRelacionesNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"TiposRelacionesNotaCreditoSoli"));
			
		this.jComboBoxTiposAccionesNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"TiposAccionesNotaCreditoSoli"));
					
		this.jComboBoxTiposSeleccionarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"TiposSeleccionarNotaCreditoSoli"));
			
		this.jTextFieldValorCampoGeneralNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralNotaCreditoSoli"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonidNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncodigoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumeroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_emisionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumero_diasNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_vencimientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliBusqueda"));
		//jButtonid_empleadoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncotizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliBusqueda"));
		//jButtonid_clienteNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliBusqueda"));
		//jButtonid_facturaNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondireccionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontelefonoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonrucNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescripcionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonpenalizadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"penalizadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_porcentajeNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsumanNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_sin_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_generalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfleteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsub_totalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfinanciamientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotro_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonretencionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoniceNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfechaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoSoliBusqueda"));
		//jButtonid_centro_costoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoli"));
		//jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliBusqueda"));
		//jButtonid_vendedorNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoli"));
		//jButtonid_vendedorNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliBusqueda"));
		//jButtonid_tipo_cambioNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_autorizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoSoliBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdClienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCreditoSoli"));

			this.jButtonBuscarFK_IdClienteid_clienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoli"));

			this.jButtonFK_IdEmpleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoNotaCreditoSoli"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoli"));

			this.jButtonFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdEstadoNotaCreditoSoliNotaCreditoSoli"));

			this.jButtonFK_IdFacturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdFacturaNotaCreditoSoli"));

			this.jButtonBuscarFK_IdFacturaid_facturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoli"));

			this.jButtonFK_IdResponsableNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdResponsableNotaCreditoSoli"));

			this.jButtonFK_IdTipoNotaCreditoSoliNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdTipoNotaCreditoSoliNotaCreditoSoli"));

			this.jButtonFK_IdTransportistaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaNotaCreditoSoli"));

			this.jButtonFK_IdVendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCreditoSoli"));

			this.jButtonBuscarFK_IdVendedorid_vendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoli"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoSoli!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoSoli"));
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoSoli"));
				this.jInternalFrameReporteDinamicoNotaCreditoSoli.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoSoli"));
			}
			
			//this.jButtonCerrarReporteDinamicoNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoSoli"));				
			//this.jButtonGenerarReporteDinamicoNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoSoli"));
			//this.jButtonGenerarExcelReporteDinamicoNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoSoli"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionNotaCreditoSoli!=null) {
				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCreditoSoli"));
				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCreditoSoli"));
				this.jInternalFrameImportacionNotaCreditoSoli.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCreditoSoli"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"AbrirOrderByNotaCreditoSoli"));
			
			this.jButtonAbrirOrderByToolBarNotaCreditoSoli.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarNotaCreditoSoli"));			
			
			if(this.jInternalFrameOrderByNotaCreditoSoli!=null) {
				this.jInternalFrameOrderByNotaCreditoSoli.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCreditoSoli"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoSoli.jTabbedPaneRelacionesNotaCreditoSoli.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCreditoSoli"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameNotaCreditoSoli();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormNotaCreditoSoli = (JInternalFrameBase)event.getSource();
	            	
	            NotaCreditoSoliBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoSoliBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCreditoSoli.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarNotaCreditoSoliActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosNotaCreditoSoli.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosNotaCreditoSoliListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosNotaCreditoSoli.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosNotaCreditoSoli.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoNotaCreditoSoli";
		inputMap = this.jButtonNuevoNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesNotaCreditoSoli";
		inputMap = this.jButtonNuevoRelacionesNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoSoliActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarNotaCreditoSoli";
		inputMap = this.jButtonModificarNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarNotaCreditoSoli";
		inputMap = this.jButtonActualizarNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarNotaCreditoSoli";
		inputMap = this.jButtonEliminarNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarNotaCreditoSoli";
		inputMap = this.jButtonCancelarNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarNotaCreditoSoli";
		inputMap = this.jButtonCerrarNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosNotaCreditoSoli";
		inputMap = this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonGuardarCambiosNotaCreditoSoli.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosNotaCreditoSoliActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosNotaCreditoSoli.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosNotaCreditoSoliItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesNotaCreditoSoli.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesNotaCreditoSoliActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarNotaCreditoSoli.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarNotaCreditoSoliActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralNotaCreditoSoli.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralNotaCreditoSoliActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonidNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empresaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_sucursalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_ejercicioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_periodoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_anioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_mesNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_usuarioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncodigoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumeroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_emisionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonnumero_diasNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_vencimientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_monedaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoSoliBusqueda"));
		//jButtonid_empleadoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoncotizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_formatoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_precioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoSoliBusqueda"));
		//jButtonid_clienteNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoliBusqueda"));
		//jButtonid_facturaNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondireccionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontelefonoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonrucNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_nota_credito_soliNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_nota_credito_soliNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_responsableNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_estado_nota_creditoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescripcionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonpenalizadoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"penalizadoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_porcentajeNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsumanNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotal_sin_ivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtondescuento_generalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfleteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtontotalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonsub_totalNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotroNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonivaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfinanciamientoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonotro_valorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonretencionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtoniceNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfechaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoSoliBusqueda"));
		//jButtonid_centro_costoNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoli"));
		//jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoSoliBusqueda"));
		//jButtonid_vendedorNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoli"));
		//jButtonid_vendedorNotaCreditoSoliArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoliBusqueda"));
		//jButtonid_tipo_cambioNotaCreditoSoli.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoSoliActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoli"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transporteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoSoliBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_transportistaNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_clienteNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoSoliBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonfecha_autorizacionNotaCreditoSoliBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoSoliBusqueda"));
		
		
		this.jButtonFK_IdClienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCreditoSoli"));

		this.jButtonBuscarFK_IdClienteid_clienteNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoSoli"));

		this.jButtonFK_IdEmpleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoNotaCreditoSoli"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoSoli"));

		this.jButtonFK_IdEstadoNotaCreditoSoliNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdEstadoNotaCreditoSoliNotaCreditoSoli"));

		this.jButtonFK_IdFacturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdFacturaNotaCreditoSoli"));

		this.jButtonBuscarFK_IdFacturaid_facturaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoSoli"));

		this.jButtonFK_IdResponsableNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdResponsableNotaCreditoSoli"));

		this.jButtonFK_IdTipoNotaCreditoSoliNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdTipoNotaCreditoSoliNotaCreditoSoli"));

		this.jButtonFK_IdTransportistaNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaNotaCreditoSoli"));

		this.jButtonFK_IdVendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCreditoSoli"));

		this.jButtonBuscarFK_IdVendedorid_vendedorNotaCreditoSoli.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoSoli"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionNotaCreditoSoli.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionNotaCreditoSoliActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarNotaCreditoSoliActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarNotaCreditoSoli.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosNotaCreditoSoli(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
					notacreditosoliAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoSoli notacreditosoliAux:notacreditosolis) {
					notacreditosoliAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosNotaCreditoSoliItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
						notacreditosoliAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoSoli notacreditosoliAux:notacreditosolis) {
						notacreditosoliAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
					
						if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO)) {
							existe=true;
							notacreditosoliAux.setpenalizado(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoSoli notacreditosoliAux:notacreditosolis) {
						
						if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO)) {
							existe=true;
							notacreditosoliAux.setpenalizado(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCreditoSoli.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCreditoSoli.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosNotaCreditoSoliItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosNotaCreditoSoli.getSelectedRows();
			
			NotaCreditoSoli notacreditosoliLocal=new NotaCreditoSoli();
			
			//this.seleccionarTodosNotaCreditoSoli(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditosoliLocal =(NotaCreditoSoli) this.notacreditosoliLogic.getNotaCreditoSolis().toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					notacreditosoliLocal =(NotaCreditoSoli) this.notacreditosolis.toArray()[this.jTableDatosNotaCreditoSoli.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				notacreditosoliLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
						notacreditosoliAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoSoli notacreditosoliAux:notacreditosolis) {
						notacreditosoliAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCreditoSoli.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCreditoSoli.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoSoli,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualNotaCreditoSoliItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarNotaCreditoSoliParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralNotaCreditoSoliActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralNotaCreditoSoli.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCreditoSoli notacreditosoliAux:this.notacreditosoliLogic.getNotaCreditoSolis()) {
				
						if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							notacreditosoliAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							notacreditosoliAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							notacreditosoliAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							notacreditosoliAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							notacreditosoliAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							notacreditosoliAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							notacreditosoliAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							notacreditosoliAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_RUC)) {
							existe=true;
							notacreditosoliAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							notacreditosoliAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							notacreditosoliAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditosoliAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							notacreditosoliAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							notacreditosoliAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditosoliAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL)) {
							existe=true;
							notacreditosoliAux.setdescuento_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditosoliAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditosoliAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditosoliAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_OTRO)) {
							existe=true;
							notacreditosoliAux.setotro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditosoliAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditosoliAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR)) {
							existe=true;
							notacreditosoliAux.setotro_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							notacreditosoliAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditosoliAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditosoliAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							notacreditosoliAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							notacreditosoliAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoSoli notacreditosoliAux:notacreditosolis) {
					
						if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							notacreditosoliAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							notacreditosoliAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							notacreditosoliAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							notacreditosoliAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							notacreditosoliAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							notacreditosoliAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							notacreditosoliAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							notacreditosoliAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_RUC)) {
							existe=true;
							notacreditosoliAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							notacreditosoliAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							notacreditosoliAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditosoliAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							notacreditosoliAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							notacreditosoliAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditosoliAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL)) {
							existe=true;
							notacreditosoliAux.setdescuento_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditosoliAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditosoliAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditosoliAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_OTRO)) {
							existe=true;
							notacreditosoliAux.setotro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditosoliAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditosoliAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR)) {
							existe=true;
							notacreditosoliAux.setotro_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							notacreditosoliAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditosoliAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditosoliAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							notacreditosoliAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							notacreditosoliAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesNotaCreditoSoliActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioNotaCreditoSoli=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesNotaCreditoSoli.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteNotaCreditoSoli) {				
					conSplash=true;//false;										
					
					//this.startProcessNotaCreditoSoli(conSplash);
				
					this.generarReporteNotaCreditoSolisSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoNotaCreditoSolisSeleccionados();
				//this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditoSolisSeleccionados(false);
				//this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditoSolisSeleccionados(true);
				//this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCreditoSoli();
				
				this.exportarNotaCreditoSolisSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionNotaCreditoSolis();
				//this.importarNotaCreditoSolis();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCreditoSoli();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelNotaCreditoSolisSeleccionados();
				//this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Solicitud Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessNotaCreditoSoli();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoNotaCreditoSoli)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyNotaCreditoSoli(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
				}	
			} 			
			else if(NotaCreditoSoliBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteNotaCreditoSoli) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessNotaCreditoSoli(conSplash);
					
						//this.actualizarParametrosGeneralNotaCreditoSoli();
						
						this.generarReporteProcesoAccionNotaCreditoSolisSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(NotaCreditoSoliBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Solicitud Nota CreditoS SELECCIONADOS?", "MANTENIMIENTO DE Solicitud Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessNotaCreditoSoli();
				
						this.actualizarParametrosGeneralNotaCreditoSoli();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.notacreditosoliReturnGeneral=notacreditosoliLogic.procesarAccionNotaCreditoSolisWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.notacreditosoliLogic.getNotaCreditoSolis(),this.notacreditosoliParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarNotaCreditoSoliReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralNotaCreditoSoli();
					
					NotaCreditoSoliBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarNotaCreditoSoliReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCreditoSoli.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxTiposAccionesFormularioNotaCreditoSoli.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessNotaCreditoSoli(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesNotaCreditoSoliActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessNotaCreditoSoli();
			
			if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
			NotaCreditoSoli notacreditosoli=new NotaCreditoSoli();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingNotaCreditoSoli(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesNotaCreditoSoli.getSelectedItem();
			
			
			
			
			notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
			//this.sTipoAccion;
			
			if(notacreditosolisSeleccionados.size()==1) {
				for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
					notacreditosoli=notacreditosoliAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle  Solicitud Nota Credit")) {
					jButtonDetaNotaCreditoSoliActionPerformed(null,rowIndex,true,false,notacreditosoli);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessNotaCreditoSoli();
			
      		//this.finishProcessNotaCreditoSoli(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarNotaCreditoSoliReturnGeneral() throws Exception {
		if(this.notacreditosoliReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.notacreditosoliReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.notacreditosoliReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.notacreditosoliReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.notacreditosoliReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.notacreditosoliReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingNotaCreditoSoli(false);
		}
		
		if(this.notacreditosoliReturnGeneral.getConRetornoLista() || this.notacreditosoliReturnGeneral.getConRetornoObjeto()) {
			if(this.notacreditosoliReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditosoliLogic.setNotaCreditoSolis(this.notacreditosoliReturnGeneral.getNotaCreditoSolis());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.notacreditosoliReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditosoliLogic.setNotaCreditoSoli(this.notacreditosoliReturnGeneral.getNotaCreditoSoli());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingNotaCreditoSoli(false);
		}
	}
	
	public void actualizarParametrosGeneralNotaCreditoSoli() throws Exception {
		
		
	}
	
	public ArrayList<NotaCreditoSoli> getNotaCreditoSolisSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioNotaCreditoSoli) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(NotaCreditoSoli notacreditosoliAux:notacreditosoliLogic.getNotaCreditoSolis()) {
					if(notacreditosoliAux.getIsSelected()) {
						notacreditosolisSeleccionados.add(notacreditosoliAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoSoli notacreditosoliAux:this.notacreditosolis) {
					if(notacreditosoliAux.getIsSelected()) {
						notacreditosolisSeleccionados.add(notacreditosoliAux);				
					}
				}
			}
			
			if(notacreditosolisSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						notacreditosolisSeleccionados.addAll(this.notacreditosoliLogic.getNotaCreditoSolis());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						notacreditosolisSeleccionados.addAll(this.notacreditosolis);				
					}
				}
			}
		} else {
			notacreditosolisSeleccionados.add(this.notacreditosoli);
		}
		
		return notacreditosolisSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteNotaCreditoSolisSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalNotaCreditoSolisSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoNotaCreditoSolisSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditoSolisSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditoSolisSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesNotaCreditoSolisSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Solicitud Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados);
		
	}	
	
	public void generarReporteNormalNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados);
	}		
	
	public void generarReporteProcesoAccionNotaCreditoSolisSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		
		this.abrirInicializarFrameReporteDinamicoNotaCreditoSoli();
		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoNotaCreditoSoli();
		
		
		//this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados ,notacreditosoliImplementable,notacreditosoliImplementableHome);
	}
	
	public void mostrarImportacionNotaCreditoSolis() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionNotaCreditoSoli();
		
		this.abrirFrameImportacionNotaCreditoSoli();		
		
			
		//this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados ,notacreditosoliImplementable,notacreditosoliImplementableHome);
	}
	
	public void importarNotaCreditoSolis() throws Exception {		
	
	}
	
	public void exportarNotaCreditoSolisSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelNotaCreditoSolisSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoNotaCreditoSolisSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlNotaCreditoSolisSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Solicitud Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarNotaCreditoSoli(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarNotaCreditoSoli(notacreditosoliAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//notacreditosoliAux.setsDetalleGeneralEntityReporte(notacreditosoliAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarNotaCreditoSoli(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_SUMAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_OTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_RETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarNotaCreditoSoli(NotaCreditoSoli notacreditosoli,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=notacreditosoli.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getnumero();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getnumero_dias().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getdireccion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettelefono();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettiponotacreditosoli_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getresponsable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getestadonotacreditosoli_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getpenalizado().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getdescuento_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getsuman().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettotal_sin_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getdescuento_general().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getotro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfinanciamiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getotro_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getretencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfecha_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditosoli.getfecha_autorizacion().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("NotaCreditoSolis");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelNotaCreditoSoli(row);				
				iRow++;
			}				
			
			for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelNotaCreditoSoli(notacreditosoliAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlNotaCreditoSolisSeleccionados() throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();		
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditosoli.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("notacreditosolis");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("notacreditosoli");
			//elementRoot.appendChild(element);
		
			for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
				element = document.createElement("notacreditosoli");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlNotaCreditoSoli(notacreditosoliAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Solicitud Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelNotaCreditoSoli(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUMAN);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTALSINIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_DESCUENTOGENERAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FINANCIAMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_OTROVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_RETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelNotaCreditoSoli(NotaCreditoSoli notacreditosoli,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getnumero());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getnumero_dias());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getdireccion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettelefono());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettiponotacreditosoli_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getresponsable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getestadonotacreditosoli_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getpenalizado());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getdescuento_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getsuman());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettotal_sin_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getdescuento_general());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getotro());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfinanciamiento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getotro_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getretencion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfecha_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditosoli.getfecha_autorizacion());				
	}
	
	public void setFilaDatosExportarXmlNotaCreditoSoli(NotaCreditoSoli notacreditosoli,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(NotaCreditoSoliConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(notacreditosoli.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(NotaCreditoSoliConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(notacreditosoli.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(notacreditosoli.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(notacreditosoli.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(notacreditosoli.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(notacreditosoli.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(notacreditosoli.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(notacreditosoli.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementusuario_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(notacreditosoli.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementcodigo = document.createElement(NotaCreditoSoliConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(notacreditosoli.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnumero = document.createElement(NotaCreditoSoliConstantesFunciones.NUMEROPREIMPRESO);
		elementnumero.appendChild(document.createTextNode(notacreditosoli.getnumero().trim()));
		element.appendChild(elementnumero);

		Element elementfecha_emision = document.createElement(NotaCreditoSoliConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(notacreditosoli.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementnumero_dias = document.createElement(NotaCreditoSoliConstantesFunciones.NUMERODIAS);
		elementnumero_dias.appendChild(document.createTextNode(notacreditosoli.getnumero_dias().toString().trim()));
		element.appendChild(elementnumero_dias);

		Element elementfecha_vencimiento = document.createElement(NotaCreditoSoliConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(notacreditosoli.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementmoneda_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(notacreditosoli.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementempleado_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(notacreditosoli.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementcotizacion = document.createElement(NotaCreditoSoliConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(notacreditosoli.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementformato_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(notacreditosoli.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(notacreditosoli.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementcliente_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(notacreditosoli.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementfactura_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(notacreditosoli.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementdireccion = document.createElement(NotaCreditoSoliConstantesFunciones.DIRECCION);
		elementdireccion.appendChild(document.createTextNode(notacreditosoli.getdireccion().trim()));
		element.appendChild(elementdireccion);

		Element elementtelefono = document.createElement(NotaCreditoSoliConstantesFunciones.TELEFONO);
		elementtelefono.appendChild(document.createTextNode(notacreditosoli.gettelefono().trim()));
		element.appendChild(elementtelefono);

		Element elementruc = document.createElement(NotaCreditoSoliConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(notacreditosoli.getruc().trim()));
		element.appendChild(elementruc);

		Element elementtiponotacreditosoli_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDTIPONOTACREDITOSOLI);
		elementtiponotacreditosoli_descripcion.appendChild(document.createTextNode(notacreditosoli.gettiponotacreditosoli_descripcion()));
		element.appendChild(elementtiponotacreditosoli_descripcion);

		Element elementresponsable_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDRESPONSABLE);
		elementresponsable_descripcion.appendChild(document.createTextNode(notacreditosoli.getresponsable_descripcion()));
		element.appendChild(elementresponsable_descripcion);

		Element elementestadonotacreditosoli_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDESTADONOTACREDITOSOLI);
		elementestadonotacreditosoli_descripcion.appendChild(document.createTextNode(notacreditosoli.getestadonotacreditosoli_descripcion()));
		element.appendChild(elementestadonotacreditosoli_descripcion);

		Element elementdescripcion = document.createElement(NotaCreditoSoliConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(notacreditosoli.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementpenalizado = document.createElement(NotaCreditoSoliConstantesFunciones.PENALIZADO);
		elementpenalizado.appendChild(document.createTextNode(notacreditosoli.getpenalizado().toString().trim()));
		element.appendChild(elementpenalizado);

		Element elementdescuento_porcentaje = document.createElement(NotaCreditoSoliConstantesFunciones.DESCUENTOPORCENTAJE);
		elementdescuento_porcentaje.appendChild(document.createTextNode(notacreditosoli.getdescuento_porcentaje().toString().trim()));
		element.appendChild(elementdescuento_porcentaje);

		Element elementtotal_iva = document.createElement(NotaCreditoSoliConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(notacreditosoli.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementsuman = document.createElement(NotaCreditoSoliConstantesFunciones.SUMAN);
		elementsuman.appendChild(document.createTextNode(notacreditosoli.getsuman().toString().trim()));
		element.appendChild(elementsuman);

		Element elementdescuento_valor = document.createElement(NotaCreditoSoliConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(notacreditosoli.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementtotal_sin_iva = document.createElement(NotaCreditoSoliConstantesFunciones.TOTALSINIVA);
		elementtotal_sin_iva.appendChild(document.createTextNode(notacreditosoli.gettotal_sin_iva().toString().trim()));
		element.appendChild(elementtotal_sin_iva);

		Element elementdescuento_general = document.createElement(NotaCreditoSoliConstantesFunciones.DESCUENTOGENERAL);
		elementdescuento_general.appendChild(document.createTextNode(notacreditosoli.getdescuento_general().toString().trim()));
		element.appendChild(elementdescuento_general);

		Element elementflete = document.createElement(NotaCreditoSoliConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(notacreditosoli.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementtotal = document.createElement(NotaCreditoSoliConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(notacreditosoli.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementsub_total = document.createElement(NotaCreditoSoliConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(notacreditosoli.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementotro = document.createElement(NotaCreditoSoliConstantesFunciones.OTRO);
		elementotro.appendChild(document.createTextNode(notacreditosoli.getotro().toString().trim()));
		element.appendChild(elementotro);

		Element elementiva = document.createElement(NotaCreditoSoliConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(notacreditosoli.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementfinanciamiento = document.createElement(NotaCreditoSoliConstantesFunciones.FINANCIAMIENTO);
		elementfinanciamiento.appendChild(document.createTextNode(notacreditosoli.getfinanciamiento().toString().trim()));
		element.appendChild(elementfinanciamiento);

		Element elementotro_valor = document.createElement(NotaCreditoSoliConstantesFunciones.OTROVALOR);
		elementotro_valor.appendChild(document.createTextNode(notacreditosoli.getotro_valor().toString().trim()));
		element.appendChild(elementotro_valor);

		Element elementretencion = document.createElement(NotaCreditoSoliConstantesFunciones.RETENCION);
		elementretencion.appendChild(document.createTextNode(notacreditosoli.getretencion().toString().trim()));
		element.appendChild(elementretencion);

		Element elementice = document.createElement(NotaCreditoSoliConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(notacreditosoli.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementfecha = document.createElement(NotaCreditoSoliConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(notacreditosoli.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementcentrocosto_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(notacreditosoli.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementvendedor_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(notacreditosoli.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementtipocambio_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(notacreditosoli.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementtransporte_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDTRANSPORTE);
		elementtransporte_descripcion.appendChild(document.createTextNode(notacreditosoli.gettransporte_descripcion()));
		element.appendChild(elementtransporte_descripcion);

		Element elementtransportista_descripcion = document.createElement(NotaCreditoSoliConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(notacreditosoli.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementfecha_cliente = document.createElement(NotaCreditoSoliConstantesFunciones.FECHACLIENTE);
		elementfecha_cliente.appendChild(document.createTextNode(notacreditosoli.getfecha_cliente().toString().trim()));
		element.appendChild(elementfecha_cliente);

		Element elementfecha_autorizacion = document.createElement(NotaCreditoSoliConstantesFunciones.FECHAAUTORIZACION);
		elementfecha_autorizacion.appendChild(document.createTextNode(notacreditosoli.getfecha_autorizacion().toString().trim()));
		element.appendChild(elementfecha_autorizacion);
	}
	
	public void generarReporteGroupGenericoNotaCreditoSolisSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados=new ArrayList<NotaCreditoSoli>();
		
		notacreditosolisSeleccionados=this.getNotaCreditoSolisSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoNotaCreditoSoli(notacreditosolisSeleccionados);
		
		this.generarReporteNotaCreditoSolis("Todos",notacreditosolisSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoNotaCreditoSoli(ArrayList<NotaCreditoSoli> notacreditosolisSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(NotaCreditoSoli notacreditosoliAux:notacreditosolisSeleccionados) {
				notacreditosoliAux.setsDetalleGeneralEntityReporte(notacreditosoliAux.toString());
			
				if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getnumero());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditosoliAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_NUMERODIAS)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getnumero_dias().toString());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditosoliAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DIRECCION)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getdireccion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_TELEFONO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettelefono());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_RUC)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPONOTACREDITOSOLI)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettiponotacreditosoli_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDRESPONSABLE)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getresponsable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDESTADONOTACREDITOSOLI)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getestadonotacreditosoli_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_PENALIZADO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(notacreditosoliAux.getpenalizado()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditosoliAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTE)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(notacreditosoliAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHACLIENTE)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditosoliAux.getfecha_cliente()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoSoliConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
					existe=true;
					notacreditosoliAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditosoliAux.getfecha_autorizacion()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoSoliConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesNotaCreditoSoli(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoNotaCreditoSoli=true;
				this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=true;
				this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=true;
			}
			
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=true;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=true;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=true;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=true;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=true;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
			this.isVisibilidadCeldaModificarNotaCreditoSoli=true;
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
			this.isVisibilidadCeldaCancelarNotaCreditoSoli=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoSoli=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(NotaCreditoSoliJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=true;
		} else {
			this.actualizarEstadoPanelsNotaCreditoSoli(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarNotaCreditoSoli=false;
			//this.isVisibilidadCeldaVerFormNotaCreditoSoli=false;
			this.isVisibilidadCeldaDuplicarNotaCreditoSoli=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!notacreditosoliSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
		} else {
			this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			if(!notacreditosoliSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;												
			}
			
			this.jButtonCerrarNotaCreditoSoli.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoSoli=false;
		}
		
		if(!this.permiteMantenimiento(this.notacreditosoli)) {
			this.isVisibilidadCeldaActualizarNotaCreditoSoli=false;
			this.isVisibilidadCeldaEliminarNotaCreditoSoli=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCreditoSoli() {
		this.isVisibilidadCeldaNuevoNotaCreditoSoli=false;
		this.isVisibilidadCeldaGuardarCambiosNotaCreditoSoli=false;
	}
	
	public void actualizarEstadoPanelsNotaCreditoSoli(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionNotaCreditoSoli!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoSoli.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoSoli!=null) {
				this.jScrollPanelDatosNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoSoli!=null) {
				this.jPanelPaginacionNotaCreditoSoli.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
					this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.notacreditosoliSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoSoli!=null) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesNotaCreditoSoli!=null) {
				this.jPanelParametrosReportesNotaCreditoSoli.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaMesNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoNotaCreditoSoli(Boolean isParaTipoNotaCreditoSoli){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoNotaCreditoSoliNegation=!isParaTipoNotaCreditoSoli;

			this.isVisibilidadFK_IdCliente=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaTipoNotaCreditoSoli;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaTipoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaResponsable(Boolean isParaResponsable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaResponsableNegation=!isParaResponsable;

			this.isVisibilidadFK_IdCliente=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaResponsable;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoNotaCreditoSoli(Boolean isParaEstadoNotaCreditoSoli){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoNotaCreditoSoliNegation=!isParaEstadoNotaCreditoSoli;

			this.isVisibilidadFK_IdCliente=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaEstadoNotaCreditoSoli;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoNotaCreditoSoliNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdCliente=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadFK_IdCliente=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransporte(Boolean isParaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransporteNegation=!isParaTransporte;

			this.isVisibilidadFK_IdCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadFK_IdCliente=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdClienteNotaCreditoSoli);}

			this.isVisibilidadFK_IdEmpleado=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEmpleadoNotaCreditoSoli);}

			this.isVisibilidadFK_IdEstadoNotaCreditoSoli=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdFactura=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdFacturaNotaCreditoSoli);}

			this.isVisibilidadFK_IdResponsable=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdResponsable) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdResponsableNotaCreditoSoli);}

			this.isVisibilidadFK_IdTipoNotaCreditoSoli=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdTipoNotaCreditoSoli) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);}

			this.isVisibilidadFK_IdTransportista=isParaTransportista;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdTransportistaNotaCreditoSoli);}

			this.isVisibilidadFK_IdVendedor=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoSoli.remove(jPanelFK_IdVendedorNotaCreditoSoli);}
		}
		
	}
	
	

	public String registrarSesionNotaCreditoSoliParaDetaNotaCreditoSolis() throws Exception {
		Boolean isPaginaPopupDetaNotaCreditoSoli=false;

		try {

			if(this.notacreditosoliSessionBean==null) {
				this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean==null) {
				this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean=new DetaNotaCreditoSoliSessionBean();
			}

			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetaNotaCreditoSoliConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetaNotaCreditoSoli=this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetaNotaCreditoSoli(true);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetaNotaCreditoSoli(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);
			this.jInternalFrameDetalleFormNotaCreditoSoli.detanotacreditosoliSessionBean.setNoMantenimiento(true);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionNotaCreditoSoliParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//empleadoSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoSoliParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//clienteSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoSoliParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//facturaSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoSoliParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//centrocostoSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoSoliParaBusquedaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			vendedorSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			vendedorSessionBean.setisPermiteRecargarInformacion(false);
			vendedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupVendedor=vendedorSessionBean.getisPaginaPopup();
			vendedorSessionBean.setisPaginaPopup(false);
			vendedorSessionBean.setEstaModoBusqueda(true);
			vendedorSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_vendedor(TO_REPLACE);");
			vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//vendedorSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//vendedorSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoSoliParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(notacreditosoliSessionBean==null) {
				notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(notacreditosoliSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditosoliFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(NotaCreditoSoliConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoSoli(true);
			//tipocambioSessionBean.setlidNotaCreditoSoliActual(this.idNotaCreditoSoliActual);

			notacreditosoliSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoSoli(true);
			notacreditosoliSessionBean.setlIdNotaCreditoSoliActualForeignKey(this.idNotaCreditoSoliActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//NotaCreditoSoliSessionBean notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
		
		if(this.notacreditosoliSessionBean==null) {
			this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
		}
		
		this.notacreditosoliSessionBean.setsUltimaBusquedaNotaCreditoSoli(this.getsAccionBusqueda());
		this.notacreditosoliSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.notacreditosoliSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			notacreditosoliSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			notacreditosoliSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			notacreditosoliSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			notacreditosoliSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoNotaCreditoSoli")) {
			notacreditosoliSessionBean.setid_estado_nota_credito(this.getid_estado_nota_creditoFK_IdEstadoNotaCreditoSoli());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			notacreditosoliSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			notacreditosoliSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdResponsable")) {
			notacreditosoliSessionBean.setid_responsable(this.getid_responsableFK_IdResponsable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			notacreditosoliSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoNotaCreditoSoli")) {
			notacreditosoliSessionBean.setid_tipo_nota_credito_soli(this.getid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
			notacreditosoliSessionBean.setid_transportista(this.getid_transportistaFK_IdTransportista());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			notacreditosoliSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			notacreditosoliSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//NotaCreditoSoliSessionBean notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
		
		if(this.notacreditosoliSessionBean==null) {
			this.notacreditosoliSessionBean=new NotaCreditoSoliSessionBean();
		}
		
		if(this.notacreditosoliSessionBean.getsUltimaBusquedaNotaCreditoSoli()!=null&&!this.notacreditosoliSessionBean.getsUltimaBusquedaNotaCreditoSoli().equals("")) {
			this.setsAccionBusqueda(notacreditosoliSessionBean.getsUltimaBusquedaNotaCreditoSoli());
			this.setiNumeroPaginacion(notacreditosoliSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(notacreditosoliSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(notacreditosoliSessionBean.getid_cliente());
				notacreditosoliSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(notacreditosoliSessionBean.getid_ejercicio());
				notacreditosoliSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(notacreditosoliSessionBean.getid_empleado());
				notacreditosoliSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(notacreditosoliSessionBean.getid_empresa());
				notacreditosoliSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoNotaCreditoSoli")) {
				this.setid_estado_nota_creditoFK_IdEstadoNotaCreditoSoli(notacreditosoliSessionBean.getid_estado_nota_credito());
				notacreditosoliSessionBean.setid_estado_nota_credito(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(notacreditosoliSessionBean.getid_factura());
				notacreditosoliSessionBean.setid_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(notacreditosoliSessionBean.getid_periodo());
				notacreditosoliSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdResponsable")) {
				this.setid_responsableFK_IdResponsable(notacreditosoliSessionBean.getid_responsable());
				notacreditosoliSessionBean.setid_responsable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(notacreditosoliSessionBean.getid_sucursal());
				notacreditosoliSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoNotaCreditoSoli")) {
				this.setid_tipo_nota_credito_soliFK_IdTipoNotaCreditoSoli(notacreditosoliSessionBean.getid_tipo_nota_credito_soli());
				notacreditosoliSessionBean.setid_tipo_nota_credito_soli(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
				this.setid_transportistaFK_IdTransportista(notacreditosoliSessionBean.getid_transportista());
				notacreditosoliSessionBean.setid_transportista(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(notacreditosoliSessionBean.getid_usuario());
				notacreditosoliSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(notacreditosoliSessionBean.getid_vendedor());
				notacreditosoliSessionBean.setid_vendedor(null);
			}
		}
		
		this.notacreditosoliSessionBean.setsUltimaBusquedaNotaCreditoSoli("");
		this.notacreditosoliSessionBean.setiNumeroPaginacion(NotaCreditoSoliConstantesFunciones.INUMEROPAGINACION);
		this.notacreditosoliSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaNotaCreditoSoli(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioNotaCreditoSoli() {
		this.updateBorderResaltarBusquedasFormularioNotaCreditoSoli();
		this.updateVisibilidadBusquedasFormularioNotaCreditoSoli();
		this.updateHabilitarBusquedasFormularioNotaCreditoSoli();
	}
	
	public void updateBorderResaltarBusquedasFormularioNotaCreditoSoli() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasNotaCreditoSoli.getComponents().length>0) {
	

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdClienteNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdClienteNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdEmpleadoNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEmpleadoNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdEmpleadoNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdFacturaNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdFacturaNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdFacturaNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdResponsableNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdResponsableNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdResponsableNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdTipoNotaCreditoSoliNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdTransportistaNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTransportistaNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdTransportistaNotaCreditoSoli);
			}
		}

		if(this.notacreditosoliConstantesFunciones.resaltarFK_IdVendedorNotaCreditoSoli!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoSoli);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdVendedorNotaCreditoSoli);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioNotaCreditoSoli() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasNotaCreditoSoli.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdClienteNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdClienteNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEmpleadoNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdEmpleadoNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdEmpleadoNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdFacturaNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdFacturaNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdFacturaNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdResponsableNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdResponsableNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdResponsableNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdTipoNotaCreditoSoliNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTransportistaNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdTransportistaNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdTransportistaNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoSoli);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditosoliConstantesFunciones.mostrarFK_IdVendedorNotaCreditoSoli);
			if(!this.notacreditosoliConstantesFunciones.mostrarFK_IdVendedorNotaCreditoSoli && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoSoli.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioNotaCreditoSoli() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasNotaCreditoSoli.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdClienteNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdClienteNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEmpleadoNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdEmpleadoNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdEmpleadoNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdFacturaNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdFacturaNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdFacturaNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdResponsableNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdResponsableNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdResponsableNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTransportistaNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdTransportistaNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdTransportistaNotaCreditoSoli);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoSoli);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditosoliConstantesFunciones.activarFK_IdVendedorNotaCreditoSoli);
				this.jTabbedPaneBusquedasNotaCreditoSoli.setEnabledAt(index,this.notacreditosoliConstantesFunciones.activarFK_IdVendedorNotaCreditoSoli);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaNotaCreditoSoli(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdClienteNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdClienteNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEmpleadoNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdEmpleadoNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdEmpleadoNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoNotaCreditoSoli")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdEstadoNotaCreditoSoliNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdFacturaNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdFacturaNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdFacturaNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdResponsable")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdResponsableNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdResponsableNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdResponsableNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoNotaCreditoSoli")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTipoNotaCreditoSoliNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdTipoNotaCreditoSoliNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdTipoNotaCreditoSoliNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransportista")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdTransportistaNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdTransportistaNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdTransportistaNotaCreditoSoli);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasNotaCreditoSoli.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoSoli);

			this.jTabbedPaneBusquedasNotaCreditoSoli.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoSoli.getComponent(index);

			this.notacreditosoliConstantesFunciones.setResaltarFK_IdVendedorNotaCreditoSoli(resaltar);

			jPanel.setBorder(this.notacreditosoliConstantesFunciones.resaltarFK_IdVendedorNotaCreditoSoli);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarNotaCreditoSoli.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioNotaCreditoSoli() throws Exception {

		if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioNotaCreditoSoli();
		this.updateVisibilidadResaltarControlesFormularioNotaCreditoSoli();
		this.updateHabilitarResaltarControlesFormularioNotaCreditoSoli();
		
	}
	
	public void updateBorderResaltarControlesFormularioNotaCreditoSoli() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.notacreditosoliConstantesFunciones.resaltaridNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltaridNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_empresaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_empresaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_sucursalNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_sucursalNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_ejercicioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_ejercicioNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_periodoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_periodoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_anioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_anioNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_mesNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_mesNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_usuarioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_usuarioNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarcodigoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarcodigoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarnumeroNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarnumeroNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfecha_emisionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfecha_emisionNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarnumero_diasNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarnumero_diasNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfecha_vencimientoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfecha_vencimientoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_monedaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_monedaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_empleadoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_empleadoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarcotizacionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarcotizacionNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_formatoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_formatoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_tipo_precioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_tipo_precioNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_clienteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_clienteNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_facturaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_facturaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltardireccionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltardireccionNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltartelefonoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltartelefonoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarrucNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarrucNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_tipo_nota_credito_soliNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_tipo_nota_credito_soliNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_responsableNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_responsableNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_estado_nota_creditoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_estado_nota_creditoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltardescripcionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltardescripcionNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarpenalizadoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setBorderPainted(true);this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarpenalizadoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltardescuento_porcentajeNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltardescuento_porcentajeNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltartotal_ivaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltartotal_ivaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarsumanNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarsumanNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltardescuento_valorNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltardescuento_valorNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltartotal_sin_ivaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltartotal_sin_ivaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltardescuento_generalNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltardescuento_generalNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfleteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfleteNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltartotalNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltartotalNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarsub_totalNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarsub_totalNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarotroNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarotroNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarivaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarivaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfinanciamientoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfinanciamientoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarotro_valorNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarotro_valorNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarretencionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldretencionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarretencionNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltariceNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldiceNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltariceNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfechaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfechaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfechaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_centro_costoNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_centro_costoNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_vendedorNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_vendedorNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_tipo_cambioNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_tipo_cambioNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_transporteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_transporteNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarid_transportistaNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarid_transportistaNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfecha_clienteNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_clienteNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfecha_clienteNotaCreditoSoli);}
		if(this.notacreditosoliConstantesFunciones.resaltarfecha_autorizacionNotaCreditoSoli!=null && this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_autorizacionNotaCreditoSoli.setBorder(this.notacreditosoliConstantesFunciones.resaltarfecha_autorizacionNotaCreditoSoli);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioNotaCreditoSoli() throws Exception {		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
	
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostraridNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelidNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostraridNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_empresaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_empresaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_empresaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_sucursalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_sucursalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_sucursalNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_ejercicioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_ejercicioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_ejercicioNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_periodoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_periodoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_periodoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_anioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_anioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_anioNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_mesNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_mesNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_mesNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_usuarioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_usuarioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_usuarioNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarcodigoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelcodigoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarcodigoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarnumeroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelnumeroNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarnumeroNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_emisionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfecha_emisionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_emisionNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarnumero_diasNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelnumero_diasNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarnumero_diasNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_vencimientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfecha_vencimientoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_vencimientoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_monedaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_monedaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_monedaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_empleadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_empleadoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_empleadoNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_empleadoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarcotizacionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelcotizacionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarcotizacionNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_formatoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_formatoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_formatoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_precioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_tipo_precioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_precioNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_clienteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_clienteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_clienteNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_clienteNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_facturaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_facturaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_facturaNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_facturaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardireccionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneldireccionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardireccionNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartelefonoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneltelefonoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartelefonoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarrucNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelrucNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarrucNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_nota_credito_soliNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_tipo_nota_credito_soliNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_nota_credito_soliNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_responsableNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_responsableNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_responsableNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_estado_nota_creditoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_estado_nota_creditoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_estado_nota_creditoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescripcionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneldescripcionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescripcionNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarpenalizadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelpenalizadoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarpenalizadoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_porcentajeNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneldescuento_porcentajeNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_porcentajeNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotal_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneltotal_ivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotal_ivaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarsumanNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelsumanNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarsumanNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_valorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneldescuento_valorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_valorNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotal_sin_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneltotal_sin_ivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotal_sin_ivaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_generalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneldescuento_generalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrardescuento_generalNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfleteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfleteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfleteNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneltotalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrartotalNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarsub_totalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelsub_totalNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarsub_totalNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarotroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelotroNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarotroNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelivaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarivaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfinanciamientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfinanciamientoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfinanciamientoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarotro_valorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelotro_valorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarotro_valorNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldretencionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarretencionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelretencionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarretencionNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldiceNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrariceNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPaneliceNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrariceNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfechaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfechaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfechaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfechaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_centro_costoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_centro_costoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_centro_costoNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_centro_costoNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_vendedorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_vendedorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_vendedorNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_vendedorNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_cambioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_tipo_cambioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_cambioNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_tipo_cambioNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_transporteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_transporteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_transporteNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_transportistaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelid_transportistaNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarid_transportistaNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_clienteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_clienteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfecha_clienteNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_clienteNotaCreditoSoli);
		//this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_autorizacionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_autorizacionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jPanelfecha_autorizacionNotaCreditoSoli.setVisible(this.notacreditosoliConstantesFunciones.mostrarfecha_autorizacionNotaCreditoSoli);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioNotaCreditoSoli() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCreditoSoli==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoSoli!=null) {
	
		this.jInternalFrameDetalleFormNotaCreditoSoli.jLabelidNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activaridNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empresaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_empresaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_sucursalNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_sucursalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_ejercicioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_ejercicioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_periodoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_periodoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_anioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_anioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_mesNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_mesNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_usuarioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_usuarioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcodigoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarcodigoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumeroNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarnumeroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_emisionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfecha_emisionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldnumero_diasNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarnumero_diasNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_vencimientoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfecha_vencimientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_monedaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_monedaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_empleadoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_empleadoNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_empleadoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_empleadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldcotizacionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarcotizacionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_formatoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_formatoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_precioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_tipo_precioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_clienteNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_clienteNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_clienteNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_clienteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_facturaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_facturaNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_facturaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_facturaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadireccionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activardireccionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtelefonoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activartelefonoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldrucNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarrucNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_nota_credito_soliNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_tipo_nota_credito_soliNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_responsableNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_responsableNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_estado_nota_creditoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_estado_nota_creditoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextAreadescripcionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activardescripcionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jCheckBoxpenalizadoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarpenalizadoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_porcentajeNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activardescuento_porcentajeNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_ivaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activartotal_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsumanNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarsumanNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_valorNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activardescuento_valorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotal_sin_ivaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activartotal_sin_ivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFielddescuento_generalNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activardescuento_generalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfleteNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfleteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldtotalNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activartotalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldsub_totalNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarsub_totalNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotroNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarotroNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldivaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarivaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldfinanciamientoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfinanciamientoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldotro_valorNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarotro_valorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldretencionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarretencionNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jTextFieldiceNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activariceNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfechaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfechaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_centro_costoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_centro_costoNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_centro_costoNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_centro_costoNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_vendedorNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_vendedorNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_vendedorNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_vendedorNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_tipo_cambioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_tipo_cambioNotaCreditoSoli);
			this.jInternalFrameDetalleFormNotaCreditoSoli.jButtonid_tipo_cambioNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_tipo_cambioNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transporteNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_transporteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jComboBoxid_transportistaNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarid_transportistaNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_clienteNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfecha_clienteNotaCreditoSoli);
		this.jInternalFrameDetalleFormNotaCreditoSoli.jDateChooserfecha_autorizacionNotaCreditoSoli.setEnabled(this.notacreditosoliConstantesFunciones.activarfecha_autorizacionNotaCreditoSoli);
		}
	}
	
		
}